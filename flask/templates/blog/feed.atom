<?xml version='1.0' encoding='utf-8'?>
<feed xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2018'>
  <id>tag:blogger.com,1999:blog-7761348728894775915</id>
  <title>Physics Derivation Graph</title>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-25226267509759439</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Ansible</title>
    <content type='html'>&lt;pre&gt;
python3 -m pip install --user ansible
&lt;/pre&gt;

https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#control-node-requirements</content>
    <blogger:metaDescription/>
    <blogger:created>2023-03-07T01:03:04.717Z</blogger:created>
    <published>2023-03-07T01:25:00.002Z</published>
    <updated>2023-03-07T01:25:39.917Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-29048896748250144</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>connecting Jupyter and Neo4j</title>
    <content type='html'>&lt;h3&gt;
Jupyter&lt;/h3&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ cd&amp;nbsp;v5_property_graph&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ jupyter notebook&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Web browser opens to the URL&lt;br /&gt;
&lt;a href="http://localhost:8888/tree"&gt;http://localhost:8888/tree&lt;/a&gt;&lt;br /&gt;
Then open a new Python notebook.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Neo4j&lt;/h3&gt;
I'm running Neo4j Community version 3.2.3 on a Mac. I start the client GUI and then open a browser window to&lt;br /&gt;
&lt;a href="http://127.0.0.1:7474/browser/"&gt;http://127.0.0.1:7474/browser/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Connect Jupyter to Neo4j&lt;/h3&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from py2neo import authenticate,Graph, Node, Relationship&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;authenticate("127.0.0.1:7474", "neo4j", "asdf")&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;graph = Graph("http://127.0.0.1:7474/browser/")&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;graph.delete_all()&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
For more, see &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v5_property_graph/physics_derivation_graph_v5_using_neo4j.ipynb"&gt;this notebook&lt;/a&gt;.</content>
    <blogger:metaDescription/>
    <blogger:created>2018-08-11T14:04:38.856Z</blogger:created>
    <published>2018-08-11T14:54:00.002Z</published>
    <updated>2018-08-11T14:54:31.374Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/08/connecting-jupyter-and-neo4j.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-36053844934903576</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>disable UFW logging to /var/log/syslog</title>
    <content type='html'>&lt;a href="https://serverfault.com/questions/817565/remove-ufw-block-from-kern-log-and-sys-log"&gt;https://serverfault.com/questions/817565/remove-ufw-block-from-kern-log-and-sys-log&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://askubuntu.com/questions/452125/redirect-ufw-logs-to-own-file"&gt;https://askubuntu.com/questions/452125/redirect-ufw-logs-to-own-file&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-12T18:35:29.279Z</blogger:created>
    <published>2020-08-12T18:35:00.004Z</published>
    <updated>2020-09-20T19:44:25.600Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='ufw'/>
    <blogger:filename>/2020/08/disable-ufw-logging-to-varlogsyslog.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-40023571026514784</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>finding major edges of the Physics Derivation Graph</title>
    <content type='html'>I've decided to focus on building content for the Physics Derivation Graph. Since I don't think it's reasonable to enter all the mathematical physics content manually on my own, in this post I'll define some bounds.&lt;br /&gt;
&lt;br /&gt;
&lt;div&gt;
Step 1: identify major fields in Physics&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Electromagnetism&lt;/li&gt;
&lt;li&gt;relativity&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;astrophysics&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;quantum mechanics&lt;/li&gt;
&lt;li&gt;classical mechanics&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;thermodynamics&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
Step 2: identify top derivations associated with each area&lt;/div&gt;
&lt;div&gt;
&lt;ul style="text-align: left;"&gt;
&lt;li&gt;Electromagnetism: Maxwell's equations&lt;/li&gt;
&lt;li&gt;Relativity: Lorentz (time dilation, length contraction)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;astrophysics:&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Quantum mechanics: Schrodinger, Uncertainty&lt;/li&gt;
&lt;li&gt;Classical mechanics: F=ma, conservation of energy and momentum&lt;/li&gt;&lt;ul&gt;&lt;li&gt;thermodynamics: entropy&lt;/li&gt;&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Step 3:&amp;nbsp;&lt;/div&gt;
&lt;br /&gt;
There are expressions, domains, and notations that need to be included to demonstrate the comprehensive nature of the project and the capability of the framework.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;!--&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;--&gt;&lt;table border="2" cellpadding="1" cellspacing="1"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Expressions&lt;/th&gt;&lt;th&gt;Domains&lt;/th&gt;&lt;th&gt;Notation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation"&gt;Schrodinger's equation&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Quantum&lt;/td&gt;&lt;td&gt;Dirac/bra-ket&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;br /&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Maxwell's equations&lt;/td&gt;&lt;td&gt;Electromagnetics&lt;/td&gt;&lt;td&gt;differentiation, vectors&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;contravariant/covariant&lt;/td&gt;&lt;td&gt;Electrodynamics&lt;/td&gt;&lt;td&gt;Einstein notation&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations"&gt;Navier Stokes&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Fluid Mechanics&lt;/td&gt;&lt;td&gt;differentiation, vectors&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;mass-energy relation&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;Special Relativity&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;Thermodynamics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Uncertainty relation&lt;/td&gt;&lt;td&gt;Quantum Mechanics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;energy conservation&lt;/td&gt;&lt;td&gt;classical mechanics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;string theory&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;wave equation&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;statistical mechanics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;aerodynamics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;a href="http://ocw.mit.edu/courses/nuclear-engineering/22-51-quantum-theory-of-radiation-interactions-fall-2012/lecture-notes/MIT22_51F12_Ch9.pdf"&gt;simple harmonic oscillator&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;div&gt;
Other comprehensive lists of "things to know" in Physics&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://www.staff.science.uu.nl/~gadda001/goodtheorist/"&gt;https://www.staff.science.uu.nl/~gadda001/goodtheorist/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://news.ycombinator.com/item?id=10714048"&gt;https://news.ycombinator.com/item?id=10714048&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://www.physics.uoguelph.ca/poisson/research/notes.html"&gt;http://www.physics.uoguelph.ca/poisson/research/notes.html&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://www.physics.uoguelph.ca/poisson/research/mech.pdf"&gt;https://www.physics.uoguelph.ca/poisson/research/mech.pdf&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://theoreticalminimum.com/courses"&gt;http://theoreticalminimum.com/courses&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/wiki/All-Branches-of-Physics"&gt;https://github.com/allofphysicsgraph/proofofconcept/wiki/All-Branches-of-Physics&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;br /&gt;
The Physics Derivation Graph has a few&amp;nbsp;pertinent&amp;nbsp;scales:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;topics within physics, ie thermodynamics, quantum mechanics, classical&amp;nbsp;mechanics&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Outline_of_physics#Branches_of_physics"&gt;https://en.wikipedia.org/wiki/Outline_of_physics#Branches_of_physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikiversity.org/wiki/High_school_physics"&gt;https://en.wikiversity.org/wiki/High_school_physics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;major (often named) expressions within a domain, ie "E=mc^2", Schrodinger's equation, Maxwell's equations&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Physics_equations"&gt;https://en.wikipedia.org/wiki/Physics_equations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Category:Equations_of_physics"&gt;https://en.wikipedia.org/wiki/Category:Equations_of_physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_equations"&gt;https://en.wikipedia.org/wiki/List_of_equations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mcat-prep.com/mcat-physics-equations-sheet/"&gt;https://www.mcat-prep.com/mcat-physics-equations-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://physics.info/equations/"&gt;https://physics.info/equations/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;derivations linking the major expressions&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://srjcstaff.santarosa.edu/~lwillia2/42/WaveEquationDerivation.pdf"&gt;Derivation of Electromagnetic Waves from Maxwell’s Equations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lejpt.academicdirect.org/A26/031_048.pdf"&gt;Deriving time dependent Schrödinger equation from Wave-Mechanics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;a href="https://physicsderivationgraph.blogspot.com/2017/05/abstract-syntax-trees-and-inference.html"&gt;abstract syntax trees of an expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
In this post, I'll focus on finding examples of&amp;nbsp;derivations linking the major expressions&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Useful places to search&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Google Scholar&lt;/li&gt;
&lt;li&gt;Arxiv&lt;/li&gt;
&lt;li&gt;journals for Physics teachers&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Useful search string: derivation of equation&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;h3&gt;
Unsorted results&lt;/h3&gt;
https://en.wikipedia.org/wiki/ADM_formalism&lt;br /&gt;
https://en.wikipedia.org/wiki/Abraham–Lorentz_force&lt;br /&gt;
https://en.wikipedia.org/wiki/Acoustic_wave_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Action-angle_coordinates&lt;br /&gt;
https://en.wikipedia.org/wiki/Adiabatic_process&lt;br /&gt;
https://en.wikipedia.org/wiki/Angular_momentum&lt;br /&gt;
https://en.wikipedia.org/wiki/Angular_momentum_operator&lt;br /&gt;
https://en.wikipedia.org/wiki/Appell's_equation_of_motion&lt;br /&gt;
https://en.wikipedia.org/wiki/Area_of_a_circle&lt;br /&gt;
https://en.wikipedia.org/wiki/Available_energy_(particle_collision)&lt;br /&gt;
https://en.wikipedia.org/wiki/Avrami_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Azimuthal_quantum_number&lt;br /&gt;
https://en.wikipedia.org/wiki/BET_theory&lt;br /&gt;
https://en.wikipedia.org/wiki/Backpropagation&lt;br /&gt;
https://en.wikipedia.org/wiki/Ballistic_pendulum&lt;br /&gt;
https://en.wikipedia.org/wiki/Beer–Lambert_law&lt;br /&gt;
https://en.wikipedia.org/wiki/Bell's_theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Bethe–Salpeter_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Bivector&lt;br /&gt;
https://en.wikipedia.org/wiki/Black–Scholes_model&lt;br /&gt;
https://en.wikipedia.org/wiki/Bloch_oscillations&lt;br /&gt;
https://en.wikipedia.org/wiki/Boltzmann_relation&lt;br /&gt;
https://en.wikipedia.org/wiki/Bose–Einstein_statistics&lt;br /&gt;
https://en.wikipedia.org/wiki/Braking_distance&lt;br /&gt;
https://en.wikipedia.org/wiki/CHSH_inequality&lt;br /&gt;
https://en.wikipedia.org/wiki/Capillary_wave&lt;br /&gt;
https://en.wikipedia.org/wiki/Catenary&lt;br /&gt;
https://en.wikipedia.org/wiki/Causal_dynamical_triangulation&lt;br /&gt;
https://en.wikipedia.org/wiki/Causality&lt;br /&gt;
https://en.wikipedia.org/wiki/Centimetre–gram–second_system_of_units&lt;br /&gt;
https://en.wikipedia.org/wiki/Centripetal_force&lt;br /&gt;
https://en.wikipedia.org/wiki/Charge_conservation&lt;br /&gt;
https://en.wikipedia.org/wiki/Classical_electron_radius&lt;br /&gt;
https://en.wikipedia.org/wiki/Clausius–Clapeyron_relation&lt;br /&gt;
https://en.wikipedia.org/wiki/Coefficient_of_restitution&lt;br /&gt;
https://en.wikipedia.org/wiki/Collective_noun&lt;br /&gt;
https://en.wikipedia.org/wiki/Collision_theory&lt;br /&gt;
https://en.wikipedia.org/wiki/Compton_scattering&lt;br /&gt;
https://en.wikipedia.org/wiki/Conductance_quantum&lt;br /&gt;
https://en.wikipedia.org/wiki/Confidence_interval&lt;br /&gt;
https://en.wikipedia.org/wiki/Convolution&lt;br /&gt;
https://en.wikipedia.org/wiki/Darcy's_law&lt;br /&gt;
https://en.wikipedia.org/wiki/Debye_model&lt;br /&gt;
https://en.wikipedia.org/wiki/Derivative&lt;br /&gt;
https://en.wikipedia.org/wiki/Diffusion_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Doppler_broadening&lt;br /&gt;
https://en.wikipedia.org/wiki/Drag_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Dynamic_mechanical_analysis&lt;br /&gt;
https://en.wikipedia.org/wiki/Eddington_luminosity&lt;br /&gt;
https://en.wikipedia.org/wiki/Effective_medium_approximations&lt;br /&gt;
https://en.wikipedia.org/wiki/Elastic_collision&lt;br /&gt;
https://en.wikipedia.org/wiki/Electrodynamic_tether&lt;br /&gt;
https://en.wikipedia.org/wiki/Equilibrium_constant&lt;br /&gt;
https://en.wikipedia.org/wiki/Euler–Bernoulli_beam_theory&lt;br /&gt;
https://en.wikipedia.org/wiki/Euler–Maclaurin_formula&lt;br /&gt;
https://en.wikipedia.org/wiki/Ewald_summation&lt;br /&gt;
https://en.wikipedia.org/wiki/Exponential_decay&lt;br /&gt;
https://en.wikipedia.org/wiki/Fermat's_principle&lt;br /&gt;
https://en.wikipedia.org/wiki/Feynman_parametrization&lt;br /&gt;
https://en.wikipedia.org/wiki/Fick's_laws_of_diffusion&lt;br /&gt;
https://en.wikipedia.org/wiki/Fictitious_force&lt;br /&gt;
https://en.wikipedia.org/wiki/Fisher_information&lt;br /&gt;
https://en.wikipedia.org/wiki/Flory–Huggins_solution_theory&lt;br /&gt;
https://en.wikipedia.org/wiki/Fluctuation-dissipation_theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Four-gradient&lt;br /&gt;
https://en.wikipedia.org/wiki/Four-momentum&lt;br /&gt;
https://en.wikipedia.org/wiki/Fourier_optics&lt;br /&gt;
https://en.wikipedia.org/wiki/Freund–Rubin_compactification&lt;br /&gt;
https://en.wikipedia.org/wiki/Gaussian_gravitational_constant&lt;br /&gt;
https://en.wikipedia.org/wiki/Geiger–Nuttall_law&lt;br /&gt;
https://en.wikipedia.org/wiki/Generalizations_of_the_derivative&lt;br /&gt;
https://en.wikipedia.org/wiki/Gibbs_free_energy&lt;br /&gt;
https://en.wikipedia.org/wiki/Gibbs–Duhem_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Giovanni_Semerano&lt;br /&gt;
https://en.wikipedia.org/wiki/Golden_ratio&lt;br /&gt;
https://en.wikipedia.org/wiki/Group_velocity&lt;br /&gt;
https://en.wikipedia.org/wiki/Group_velocity_dispersion&lt;br /&gt;
https://en.wikipedia.org/wiki/Gullstrand–Painlevé_coordinates&lt;br /&gt;
https://en.wikipedia.org/wiki/Gyroradius&lt;br /&gt;
https://en.wikipedia.org/wiki/Hamilton–Jacobi_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Harmonic_coordinate_condition&lt;br /&gt;
https://en.wikipedia.org/wiki/Haynes–Shockley_experiment&lt;br /&gt;
https://en.wikipedia.org/wiki/Heat_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Helmholtz_coil&lt;br /&gt;
https://en.wikipedia.org/wiki/Helmholtz_decomposition&lt;br /&gt;
https://en.wikipedia.org/wiki/Hyperfocal_distance&lt;br /&gt;
https://en.wikipedia.org/wiki/Interference_(wave_propagation)&lt;br /&gt;
https://en.wikipedia.org/wiki/Ion_acoustic_wave&lt;br /&gt;
https://en.wikipedia.org/wiki/Isotropic_radiator&lt;br /&gt;
https://en.wikipedia.org/wiki/Kalman_filter&lt;br /&gt;
https://en.wikipedia.org/wiki/Killing_vector_field&lt;br /&gt;
https://en.wikipedia.org/wiki/Kinetic_energy&lt;br /&gt;
https://en.wikipedia.org/wiki/Klein–Gordon_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Kramers–Kronig_relations&lt;br /&gt;
https://en.wikipedia.org/wiki/Kramers–Wannier_duality&lt;br /&gt;
https://en.wikipedia.org/wiki/Kutta–Joukowski_theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Lamb_shift&lt;br /&gt;
https://en.wikipedia.org/wiki/Landau_quantization&lt;br /&gt;
https://en.wikipedia.org/wiki/Langmuir_(unit)&lt;br /&gt;
https://en.wikipedia.org/wiki/Laplace_expansion_(potential)&lt;br /&gt;
https://en.wikipedia.org/wiki/Large_eddy_simulation&lt;br /&gt;
https://en.wikipedia.org/wiki/Larmor_formula&lt;br /&gt;
https://en.wikipedia.org/wiki/Leibniz_integral_rule&lt;br /&gt;
https://en.wikipedia.org/wiki/Length_contraction&lt;br /&gt;
https://en.wikipedia.org/wiki/Lie_algebra&lt;br /&gt;
https://en.wikipedia.org/wiki/Liénard–Wiechert_potential&lt;br /&gt;
https://en.wikipedia.org/wiki/Linear_least_squares_(mathematics)&lt;br /&gt;
https://en.wikipedia.org/wiki/Linearized_gravity&lt;br /&gt;
https://en.wikipedia.org/wiki/Lippmann–Schwinger_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Magic_number_(physics)&lt;br /&gt;
https://en.wikipedia.org/wiki/Magnetic_quantum_number&lt;br /&gt;
https://en.wikipedia.org/wiki/Mass–energy_equivalence&lt;br /&gt;
https://en.wikipedia.org/wiki/Maxwell–Boltzmann_statistics&lt;br /&gt;
https://en.wikipedia.org/wiki/Mean_effective_pressure&lt;br /&gt;
https://en.wikipedia.org/wiki/Mean_free_path&lt;br /&gt;
https://en.wikipedia.org/wiki/Metalloid&lt;br /&gt;
https://en.wikipedia.org/wiki/Mooney–Rivlin_solid&lt;br /&gt;
https://en.wikipedia.org/wiki/Newton's_theorem_of_revolving_orbits&lt;br /&gt;
https://en.wikipedia.org/wiki/Noether's_theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Non-associative_algebra&lt;br /&gt;
https://en.wikipedia.org/wiki/Optical_flat&lt;br /&gt;
https://en.wikipedia.org/wiki/Optical_theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Orbital_state_vectors&lt;br /&gt;
https://en.wikipedia.org/wiki/Parabola&lt;br /&gt;
https://en.wikipedia.org/wiki/Parallax&lt;br /&gt;
https://en.wikipedia.org/wiki/Parametric_oscillator&lt;br /&gt;
https://en.wikipedia.org/wiki/Particle_in_a_spherically_symmetric_potential&lt;br /&gt;
https://en.wikipedia.org/wiki/Paschen's_law&lt;br /&gt;
https://en.wikipedia.org/wiki/Path_integral_formulation&lt;br /&gt;
https://en.wikipedia.org/wiki/Perpendicular_axis_theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Pilot_wave&lt;br /&gt;
https://en.wikipedia.org/wiki/Planck's_law&lt;br /&gt;
https://en.wikipedia.org/wiki/Planck_particle&lt;br /&gt;
https://en.wikipedia.org/wiki/Plasmon&lt;br /&gt;
https://en.wikipedia.org/wiki/Poisson–Boltzmann_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Polarization_identity&lt;br /&gt;
https://en.wikipedia.org/wiki/Ponderomotive_energy&lt;br /&gt;
https://en.wikipedia.org/wiki/Ponderomotive_force&lt;br /&gt;
https://en.wikipedia.org/wiki/Potential_energy&lt;br /&gt;
https://en.wikipedia.org/wiki/Potential_temperature&lt;br /&gt;
https://en.wikipedia.org/wiki/Poynting's_theorem&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Price_equation"&gt;https://en.wikipedia.org/wiki/Price_equation&lt;/a&gt;&lt;br /&gt;
https://en.wikipedia.org/wiki/Principal_quantum_number&lt;br /&gt;
https://en.wikipedia.org/wiki/Principle_of_maximum_entropy&lt;br /&gt;
https://en.wikipedia.org/wiki/Quadratic_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Quartz_crystal_microbalance&lt;br /&gt;
https://en.wikipedia.org/wiki/RRKM_theory&lt;br /&gt;
https://en.wikipedia.org/wiki/Radian&lt;br /&gt;
https://en.wikipedia.org/wiki/Radius_of_gyration&lt;br /&gt;
https://en.wikipedia.org/wiki/Rainbow&lt;br /&gt;
https://en.wikipedia.org/wiki/Read_(surname)&lt;br /&gt;
https://en.wikipedia.org/wiki/Redshift&lt;br /&gt;
https://en.wikipedia.org/wiki/Reduced_mass&lt;br /&gt;
https://en.wikipedia.org/wiki/Relational_quantum_mechanics&lt;br /&gt;
https://en.wikipedia.org/wiki/Richards_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Roche_limit&lt;br /&gt;
https://en.wikipedia.org/wiki/Rodrigues'_rotation_formula&lt;br /&gt;
https://en.wikipedia.org/wiki/Rotating_wave_approximation&lt;br /&gt;
https://en.wikipedia.org/wiki/Rutherford_scattering&lt;br /&gt;
https://en.wikipedia.org/wiki/Saha_ionization_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Scale_relativity&lt;br /&gt;
https://en.wikipedia.org/wiki/Schrödinger_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Schwinger–Dyson_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Second_law_of_thermodynamics&lt;br /&gt;
https://en.wikipedia.org/wiki/Shallow_water_equations&lt;br /&gt;
https://en.wikipedia.org/wiki/Shockley_diode_equation&lt;br /&gt;
https://en.wikipedia.org/wiki/Spin_connection&lt;br /&gt;
https://en.wikipedia.org/wiki/Spin_quantum_number&lt;br /&gt;
https://en.wikipedia.org/wiki/Stefan–Boltzmann_law&lt;br /&gt;
https://en.wikipedia.org/wiki/Stretch_rule&lt;br /&gt;
https://en.wikipedia.org/wiki/String_theory&lt;br /&gt;
https://en.wikipedia.org/wiki/Sverdrup_balance&lt;br /&gt;
https://en.wikipedia.org/wiki/Taylor's_theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Terminal_velocity&lt;br /&gt;
https://en.wikipedia.org/wiki/Tetum_language&lt;br /&gt;
https://en.wikipedia.org/wiki/Theorem&lt;br /&gt;
https://en.wikipedia.org/wiki/Torque&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Torricelli%27s_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Torricelli%27s_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm#Derivation"&gt;https://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm#Derivation&lt;/a&gt;&lt;br /&gt;
tag: math&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Tropical_cyclone#Maximum_potential_intensity"&gt;https://en.wikipedia.org/wiki/Tropical_cyclone#Maximum_potential_intensity&lt;/a&gt;&lt;br /&gt;
tag: weather&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Twomey_effect#Derivation"&gt;https://en.wikipedia.org/wiki/Twomey_effect#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Van_der_Waals_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Van_der_Waals_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Variable-range_hopping#Derivation"&gt;https://en.wikipedia.org/wiki/Variable-range_hopping#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Visibility#Derivation"&gt;https://en.wikipedia.org/wiki/Visibility#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Wallis_product#Derivation"&gt;https://en.wikipedia.org/wiki/Wallis_product#Derivation&lt;/a&gt;&lt;br /&gt;
tag: math&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Washburn%27s_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Washburn%27s_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Wheeler%E2%80%93DeWitt_equation#Derivation_from_path_integral"&gt;https://en.wikipedia.org/wiki/Wheeler%E2%80%93DeWitt_equation#Derivation_from_path_integral&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Optical_theorem"&gt;https://en.wikipedia.org/wiki/Optical_theorem&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://farside.ph.utexas.edu/teaching/qm/lectures/node87.html"&gt;https://farside.ph.utexas.edu/teaching/qm/lectures/node87.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Seismic Wave Equation&lt;br /&gt;
&lt;a href="http://www.ees.nmt.edu/outside/courses/GEOP523/Docs/waveeq.pdf"&gt;http://www.ees.nmt.edu/outside/courses/GEOP523/Docs/waveeq.pdf&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
Noether's theorem&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Noether%27s_theorem#Derivations"&gt;https://en.wikipedia.org/wiki/Noether%27s_theorem#Derivations&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.youtube.com/watch?v=Rqfj7n5aSwY"&gt;https://www.youtube.com/watch?v=Rqfj7n5aSwY&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Kalman_filter#Derivations"&gt;https://en.wikipedia.org/wiki/Kalman_filter#Derivations&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://www.mrelativity.net/RelationshipEF/The_Relationship_between_E_and_F_P1.htm"&gt;E=mc2 and F=ma&lt;/a&gt;&lt;br /&gt;
Ives, Herbert E. (1952), "Derivation of the mass–energy relation", Journal of the Optical Society of America, 42 (8): 540–543, doi:10.1364/JOSA.42.000540&amp;nbsp; &amp;nbsp;| tag: paywall&lt;br /&gt;
On the page &lt;a href="http://www.emc2-explained.info/Emc2/Deriving.htm"&gt;http://www.emc2-explained.info/Emc2/Deriving.htm&lt;/a&gt;&lt;br /&gt;
there's a step which involves &lt;a href="https://en.wikipedia.org/wiki/Integration_by_substitution"&gt;https://en.wikipedia.org/wiki/Integration_by_substitution&lt;/a&gt;&lt;br /&gt;
--&amp;gt; I don't understand the third line of equations. The infinitesimal switches from ds to d(mv), and the integration limit changes.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Maxwell_relations#Derivation"&gt;https://en.wikipedia.org/wiki/Maxwell_relations#Derivation&lt;/a&gt;&lt;/div&gt;
&lt;a href="http://srjcstaff.santarosa.edu/~lwillia2/42/WaveEquationDerivation.pdf"&gt;Derivation of Electromagnetic Waves from Maxwell’s Equations&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;a href="http://www.feynmanlectures.caltech.edu/II_18.html"&gt;Maxwell's equations as presented in Feynman's lectures&lt;/a&gt;&lt;br /&gt;
Feynman's derivation of Maxwell equations and extra dimensions:&amp;nbsp;&lt;a href="https://arxiv.org/abs/hep-ph/0106235"&gt;https://arxiv.org/abs/hep-ph/0106235&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://dx.doi.org/10.1063/1.857686"&gt;derivation of the time‐dependent convective‐diffusion equation for surfactant transport along a deforming interface&lt;/a&gt;&lt;br /&gt;
tag: paywall&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://doi.org/10.1103/PhysRevLett.44.55"&gt;Derivation of the Continuous-Time Random-Walk Equation&lt;/a&gt;&lt;br /&gt;
tag: paywall&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://doi.org/10.1016/0378-4371(92)90283-V"&gt;derivation of the chemical master equation&lt;/a&gt;&lt;br /&gt;
tag: paywall&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://doi.org/10.1103/PhysRevB.26.6516"&gt;Derivation of Kramer's equation, friction coefficient, and macroscopic laws for physisorption&lt;/a&gt;&lt;br /&gt;
tag: paywall&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://jetp.ac.ru/cgi-bin/dn/e_016_01_0094.pdf"&gt;QUANTUM-MECHANICAL DERIVATION OF AN EQUATION OF STATE OF IRON&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
derivation of an equation for predicting minimum spouting velocity - DOI: 10.1002/aic.690040423&lt;br /&gt;
tag: paywall&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;a href="http://dx.doi.org/10.1119/1.4830067"&gt;Derivation of the Biot-Savart Law from Ampere's Law Using the Displacement Current&lt;/a&gt;&lt;br /&gt;
tag: paywall&lt;br /&gt;
&lt;a href="https://physics.stackexchange.com/questions/67445/is-biot-savart-law-obtained-empirically-or-can-it-be-derived"&gt;https://physics.stackexchange.com/questions/67445/is-biot-savart-law-obtained-empirically-or-can-it-be-derived&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.wikihow.com/Derive-the-Biot%E2%80%90Savart-Law"&gt;http://www.wikihow.com/Derive-the-Biot%E2%80%90Savart-Law&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Classical mechanics&lt;/h3&gt;
&lt;a href="https://en.wikipedia.org/wiki/Projectile_motion"&gt;https://en.wikipedia.org/wiki/Projectile_motion&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Trajectory#Derivation_of_the_equation_of_motion"&gt;https://en.wikipedia.org/wiki/Trajectory#Derivation_of_the_equation_of_motion&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Wave_equation#Derivation_of_the_wave_equation"&gt;https://en.wikipedia.org/wiki/Wave_equation#Derivation_of_the_wave_equation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Work_(physics)#Derivation_for_a_particle_in_constrained_movement"&gt;https://en.wikipedia.org/wiki/Work_(physics)#Derivation_for_a_particle_in_constrained_movement&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Derivation of &lt;a href="https://en.wikipedia.org/wiki/Kepler%27s_laws_of_planetary_motion"&gt;Kepler's laws&lt;/a&gt;:&amp;nbsp;&lt;a href="https://physics.stackexchange.com/questions/112668/derivation-of-keplers-laws"&gt;https://physics.stackexchange.com/questions/112668/derivation-of-keplers-laws&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Diffusion_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Diffusion_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://isn.ucsd.edu/classes/beng221/lectures/beng221-lecture9-notes.pdf"&gt;Heat and Diffusion Equation in Space and Time&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;a href="http://math.unm.edu/~lromero/pdes/class_notes/derive.pdf"&gt;Derivation of the Diﬀusion Equation&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://www.math.utep.edu/Faculty/sewell/tamu/664/prob4b.pdf"&gt;Derivation of Diffusion Equation&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Airfoil#Derivation_of_thin_airfoil_theory"&gt;https://en.wikipedia.org/wiki/Airfoil#Derivation_of_thin_airfoil_theory&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Relation between F=ma and Newton's Second Law of Motion&lt;br /&gt;
&lt;a href="http://winnerscience.com/2013/06/06/derive-relation-f-ma-from-newton-2nd-law-of-motion/"&gt;http://winnerscience.com/2013/06/06/derive-relation-f-ma-from-newton-2nd-law-of-motion/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://physics.stackexchange.com/questions/105460/deriving-f-ma-newtons-second-law-of-motion"&gt;https://physics.stackexchange.com/questions/105460/deriving-f-ma-newtons-second-law-of-motion&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://zonalandeducation.com/mstm/physics/mechanics/momentum/introductoryProblems/momentumSummary2.html"&gt;http://zonalandeducation.com/mstm/physics/mechanics/momentum/introductoryProblems/momentumSummary2.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.batesville.k12.in.us/Physics/PhyNet/Mechanics/Momentum/deriving_eqn.htm"&gt;http://www.batesville.k12.in.us/Physics/PhyNet/Mechanics/Momentum/deriving_eqn.htm&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Rocket equation&lt;br /&gt;
&lt;a href="http://my.fit.edu/~dkirk/4262/Lectures/Rocket%20Equation%20Differential%20Form.doc"&gt;http://my.fit.edu/~dkirk/4262/Lectures/Rocket%20Equation%20Differential%20Form.doc&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.pgccphy.net/rec/rec006-rocket.pdf"&gt;http://www.pgccphy.net/rec/rec006-rocket.pdf&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://spaceflightsystems.grc.nasa.gov/education/rocket/rktpow.html"&gt;https://spaceflightsystems.grc.nasa.gov/education/rocket/rktpow.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://web.mit.edu/16.unified/www/FALL/thermodynamics/notes/node103.html"&gt;http://web.mit.edu/16.unified/www/FALL/thermodynamics/notes/node103.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Tsiolkovsky_rocket_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Tsiolkovsky_rocket_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Derivation_of_the_Navier%E2%80%93Stokes_equations"&gt;https://en.wikipedia.org/wiki/Derivation_of_the_Navier%E2%80%93Stokes_equations&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
A New Derivation of Jeffery’s Equation --&amp;nbsp;DOI: 10.1007/s00021-005-0208-0&lt;br /&gt;
tag: paywall, PDF&lt;br /&gt;
&lt;h3&gt;
Relativity&lt;/h3&gt;
&lt;div&gt;
&lt;a href="http://users.sussex.ac.uk/~waa22/relativity/Complete_Derivation_files/derivation.pdf"&gt;Derivation of time dilation&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://dx.doi.org/10.1119/1.4895356"&gt;A Simple Derivation of Time Dilation and Length Contraction in Special Relativity&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://en.wikipedia.org/wiki/Deriving_the_Schwarzschild_solution"&gt;https://en.wikipedia.org/wiki/Deriving_the_Schwarzschild_solution&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://en.wikipedia.org/wiki/Schwarzschild_radius#Derivation"&gt;https://en.wikipedia.org/wiki/Schwarzschild_radius#Derivation&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://users.sussex.ac.uk/~waa22/relativity/What_is_gravitational_time_dilation.html"&gt;https://users.sussex.ac.uk/~waa22/relativity/What_is_gravitational_time_dilation.html&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://eujournal.org/index.php/esj/article/viewFile/8701/8315"&gt;Gravitational Time Dilation Derived from Special Relativity and Newtonian Gravitational Potential&lt;/a&gt;&lt;/div&gt;
&lt;h3&gt;
Electronics&lt;/h3&gt;
&lt;a href="https://en.wikipedia.org/wiki/M-derived_filter#Derivation"&gt;https://en.wikipedia.org/wiki/M-derived_filter#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://www.ams.jhu.edu/~prashant/KCL_KVL.pdf"&gt;kirchoff current law and kirchoff voltage law&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Thermal, aka statistical, mechanics&lt;/h3&gt;
&lt;a href="https://en.wikipedia.org/wiki/Widom_scaling"&gt;https://en.wikipedia.org/wiki/Widom_scaling&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://doi.org/10.1016/j.jcis.2004.01.028"&gt;Local thermodynamic derivation of Young's equation&lt;/a&gt;&lt;br /&gt;
tag: paywall, PDF&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Relations_between_heat_capacities#Derivation"&gt;https://en.wikipedia.org/wiki/Relations_between_heat_capacities#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Gibbs%E2%80%93Helmholtz_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Gibbs%E2%80%93Helmholtz_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Gibbs_free_energy#Derivation"&gt;https://en.wikipedia.org/wiki/Gibbs_free_energy#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://www.physik.uni-augsburg.de/theo1/hanggi/Campisi_AJP.pdf"&gt;Derivation of the Boltzmann principle&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
Boltzmann distribution&lt;br /&gt;
&lt;a href="https://gravityandlevity.wordpress.com/2018/07/14/how-thick-is-the-atmosphere-a-derivation-of-the-boltmzann-distribution/amp/"&gt;https://gravityandlevity.wordpress.com/2018/07/14/how-thick-is-the-atmosphere-a-derivation-of-the-boltmzann-distribution/amp/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://news.ycombinator.com/item?id=17539765"&gt;https://news.ycombinator.com/item?id=17539765&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://doi.org/10.1016/0031-8914(60)90061-6"&gt;Note on the derivation of the Boltzmann equation from the Liouville equation&lt;/a&gt;&lt;br /&gt;
tag: paywall, PDF&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Maxwell%E2%80%93Boltzmann_distribution#Derivation_and_related_distributions"&gt;https://en.wikipedia.org/wiki/Maxwell%E2%80%93Boltzmann_distribution#Derivation_and_related_distributions&lt;/a&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Entropy&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://micro.stanford.edu/~caiwei/me334/Chap7_Entropy_v04.pdf"&gt;http://micro.stanford.edu/~caiwei/me334/Chap7_Entropy_v04.pdf&lt;/a&gt;&lt;/div&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Fundamental_thermodynamic_relation"&gt;https://en.wikipedia.org/wiki/Fundamental_thermodynamic_relation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Derivation of the Ideal Gas Law&lt;br /&gt;
DOI: 10.1021/ed084p1832&lt;br /&gt;
&lt;a href="http://homepage.smc.edu/gallogly_ethan/files/ideal%20gas%20law%20derivation.pdf"&gt;http://homepage.smc.edu/gallogly_ethan/files/ideal%20gas%20law%20derivation.pdf&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;a href="http://quantumfreak.com/derivation-of-pvnrt-the-equation-of-ideal-gas/"&gt;http://quantumfreak.com/derivation-of-pvnrt-the-equation-of-ideal-gas/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Ideal_gas_law#Theoretical"&gt;https://en.wikipedia.org/wiki/Ideal_gas_law#Theoretical&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Quantum Mechanics&lt;/h3&gt;
&lt;a href="https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation#Derivation"&gt;https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation#Derivation&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://lejpt.academicdirect.org/A26/031_048.pdf"&gt;Deriving time dependent Schrödinger equation from Wave-Mechanics&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;div&gt;
&lt;a href="https://arxiv.org/abs/1702.01880"&gt;Derivation of Schrodinger's equation&lt;/a&gt;&lt;br /&gt;
tag: arxiv&lt;/div&gt;
&lt;div&gt;
Derivation of Schrödinger's equation from stochastic electrodynamics -DOI: 10.1007/BF00670387&lt;br /&gt;
tag: paywall&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://doi.org/10.1103/PhysRev.150.1079"&gt;Derivation of the Schrödinger Equation from Newtonian Mechanics&lt;/a&gt;&lt;br /&gt;
tag: paywall, PDF&lt;/div&gt;
&lt;a href="https://doi.org/10.1088/0305-4470/7/11/005"&gt;Covariant Feynman derivation of Schrodinger's equation in a riemannian space&lt;/a&gt;&lt;br /&gt;
tag: paywall, PDF&lt;br /&gt;
&lt;a href="http://fermatslibrary.com/s/feynmans-derivation-of-the-schrodinger-equation"&gt;http://fermatslibrary.com/s/feynmans-derivation-of-the-schrodinger-equation&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://doi.org/10.1088/0143-0807/17/4/004"&gt;Derivation of the Dirac equation from a relativistic representation of spin&lt;/a&gt;&lt;br /&gt;
tag: paywall, PDF&lt;br /&gt;
&lt;a href="https://arxiv.org/vc/quant-ph/papers/0607/0607001v1.pdf"&gt;Physical meaning and derivation of Schrodinger and Dirac equations&lt;/a&gt;&lt;br /&gt;
tag: arxiv&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://www2.warwick.ac.uk/fac/sci/physics/staff/academic/boyd/stuff/dirac.pdf"&gt;The Dirac Equation&lt;/a&gt;&lt;br /&gt;
tag: PDF&lt;br /&gt;
&lt;br /&gt;
Particle in a 1D box&lt;br /&gt;
&lt;a href="https://chem.libretexts.org/Core/Physical_and_Theoretical_Chemistry/Quantum_Mechanics/05.5%3A_Particle_in_Boxes/Particle_in_a_1-dimensional_box"&gt;https://chem.libretexts.org/Core/Physical_and_Theoretical_Chemistry/Quantum_Mechanics/05.5%3A_Particle_in_Boxes/Particle_in_a_1-dimensional_box&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://quantummechanics.ucsd.edu/ph130a/130_notes/node136.html"&gt;http://quantummechanics.ucsd.edu/ph130a/130_notes/node136.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://hyperphysics.phy-astr.gsu.edu/hbase/quantum/pbox.html"&gt;http://hyperphysics.phy-astr.gsu.edu/hbase/quantum/pbox.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Particle_in_a_box"&gt;https://en.wikipedia.org/wiki/Particle_in_a_box&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Plasma&lt;/h3&gt;
&lt;a href="https://doi.org/10.1017/S0022377800012836"&gt;Thermodynamic derivation of Saha's equation for a multi-temperature plasma&lt;/a&gt;&lt;br /&gt;
tag: paywall, PDF&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
The Einstein and the Navier-Stokes Equations: Connecting the Two by Bredberg, Irene, Ph.D., HARVARD UNIVERSITY, 2012, 132 pages; 3513905&lt;br /&gt;
Abstract: This thesis establishes a precise mathematical connection between the Einstein equations of general relativity and the incompressible Navier-Stokes equation of fluid dynamics.&lt;br /&gt;
see also &lt;a href="http://arxiv.org/abs/1101.2451"&gt;http://arxiv.org/abs/1101.2451&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Relation between uncertainty and the quantum harmonic oscillator&lt;br /&gt;
&lt;a href="http://hyperphysics.phy-astr.gsu.edu/hbase/quantum/hosc4.html"&gt;http://hyperphysics.phy-astr.gsu.edu/hbase/quantum/hosc4.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.eng.fsu.edu/~dommelen/quantum/style_a/nt_uprl.html"&gt;https://www.eng.fsu.edu/~dommelen/quantum/style_a/nt_uprl.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://hitoshi.berkeley.edu/221a/coherentstate.pdf"&gt;http://hitoshi.berkeley.edu/221a/coherentstate.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Schrodinger equation and quantum harmonic oscillator&lt;br /&gt;
&lt;a href="http://homepage.univie.ac.at/reinhold.bertlmann/pdfs/T2_Skript_Ch_5.pdf"&gt;http://homepage.univie.ac.at/reinhold.bertlmann/pdfs/T2_Skript_Ch_5.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Schrodinger equation and wave equation&lt;br /&gt;
&lt;a href="http://physics.stackexchange.com/questions/75363/how-is-the-schroedinger-equation-a-wave-equation"&gt;http://physics.stackexchange.com/questions/75363/how-is-the-schroedinger-equation-a-wave-equation&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.tcm.phy.cam.ac.uk/~bds10/aqp/handout_foundations.pdf"&gt;http://www.tcm.phy.cam.ac.uk/~bds10/aqp/handout_foundations.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2017-07-03T22:56:01.042Z</blogger:created>
    <published>2017-07-03T23:06:00.006Z</published>
    <updated>2021-08-21T00:54:27.451Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/07/finding-edges-for-physics-derivation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-98692537328587925</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Python dependencies visualization using pydeps</title>
    <content type='html'>&lt;p&gt;To see what Python modules are available on my system I can run&lt;/p&gt;&lt;pre&gt;pydoc3 modules&lt;/pre&gt;
&lt;p&gt;One of the modules is pandas. Here's a script that just loads pandas module:&lt;/p&gt;&lt;pre&gt;cat load_pandas.py 
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
import pandas as pd 
&lt;/pre&gt;
&lt;p&gt;When the script is run nothing happens
&lt;/p&gt;&lt;pre&gt;python3 load_pandas.py&lt;/pre&gt;
I have &lt;code&gt;pydeps&lt;/code&gt; installed:
&lt;pre&gt;pydeps --version
pydeps v1.12.17&lt;/pre&gt;
&lt;p&gt;Output of analysis by pydeps:&lt;/p&gt;&lt;pre&gt;pydeps -o myfile.png --show-dot -T png --noshow load_pandas.py 

digraph G {
    concentrate = true;

    rankdir = TB;
    node [style=filled,fillcolor="#ffffff",fontcolor="#000000",fontname=Helvetica,fontsize=10];

    load_pandas_py [fillcolor="#a65959",fontcolor="#ffffff",label="load_pandas.py"];
    pandas [fillcolor="#039595",fontcolor="#ffffff"];
    pandas__config [fillcolor="#24d0d0",label="pandas._config"];
    pandas__version [fillcolor="#47c2c2",label="pandas\.\n_version"];
    pandas__version_meson [fillcolor="#47c2c2",label="pandas\.\n_version_meson"];
    pandas_api [fillcolor="#3db8b8",label="pandas.api"];
    pandas_arrays [fillcolor="#46a4a4",label="pandas.arrays"];
    pandas_compat [fillcolor="#17d3d3",label="pandas.compat"];
    pandas_compat__optional [fillcolor="#31c4c4",label="pandas\.\ncompat\.\n_optional"];
    pandas_compat_pyarrow [fillcolor="#3db8b8",label="pandas\.\ncompat\.\npyarrow"];
    pandas_core [fillcolor="#10f9f9",label="pandas.core"];
    pandas_core_api [fillcolor="#3a8888",fontcolor="#ffffff",label="pandas\.\ncore\.\napi"];
    pandas_core_computation [fillcolor="#3bcece",label="pandas\.\ncore\.\ncomputation"];
    pandas_core_computation_api [fillcolor="#46a4a4",label="pandas\.\ncore\.\ncomputation\.\napi"];
    pandas_core_config_init [fillcolor="#3a8888",fontcolor="#ffffff",label="pandas\.\ncore\.\nconfig_init"];
    pandas_core_dtypes [fillcolor="#2fdbdb",label="pandas\.\ncore\.\ndtypes"];
    pandas_core_dtypes_dtypes [fillcolor="#339999",fontcolor="#ffffff",label="pandas\.\ncore\.\ndtypes\.\ndtypes"];
    pandas_core_reshape [fillcolor="#47c2c2",label="pandas\.\ncore\.\nreshape"];
    pandas_core_reshape_api [fillcolor="#46a4a4",label="pandas\.\ncore\.\nreshape\.\napi"];
    pandas_errors [fillcolor="#3ab0b0",label="pandas.errors"];
    pandas_io [fillcolor="#0bdfdf",label="pandas.io"];
    pandas_io_api [fillcolor="#46a4a4",label="pandas.io.api"];
    pandas_io_json [fillcolor="#23c8c8",label="pandas.io.json"];
    pandas_io_json__normalize [fillcolor="#4cb3b3",label="pandas\.\nio\.\njson\.\n_normalize"];
    pandas_plotting [fillcolor="#31c4c4",label="pandas\.\nplotting"];
    pandas_testing [fillcolor="#4cb3b3",label="pandas.testing"];
    pandas_tseries [fillcolor="#23c8c8",label="pandas.tseries"];
    pandas_tseries_api [fillcolor="#46a4a4",label="pandas\.\ntseries\.\napi"];
    pandas_tseries_offsets [fillcolor="#26d9d9",label="pandas\.\ntseries\.\noffsets"];
    pandas_util [fillcolor="#05e5e5",label="pandas.util"];
    pandas_util__print_versions [fillcolor="#409696",fontcolor="#ffffff",label="pandas\.\nutil\.\n_print_versions"];
    pandas_util__tester [fillcolor="#46a4a4",label="pandas\.\nutil\.\n_tester"];
    pandas -&amp;gt; load_pandas_py [fillcolor="#039595",minlen="2"];
    pandas__config -&amp;gt; pandas [fillcolor="#24d0d0"];
    pandas__config -&amp;gt; pandas_core_config_init [fillcolor="#24d0d0",minlen="2"];
    pandas__config -&amp;gt; pandas_errors [fillcolor="#24d0d0"];
    pandas__version -&amp;gt; pandas [fillcolor="#47c2c2"];
    pandas__version -&amp;gt; pandas_util__print_versions [fillcolor="#47c2c2",minlen="2"];
    pandas__version_meson -&amp;gt; pandas [fillcolor="#47c2c2"];
    pandas__version_meson -&amp;gt; pandas_util__print_versions [fillcolor="#47c2c2",minlen="2"];
    pandas_api -&amp;gt; pandas [fillcolor="#3db8b8"];
    pandas_arrays -&amp;gt; pandas [fillcolor="#46a4a4"];
    pandas_compat -&amp;gt; pandas [fillcolor="#17d3d3"];
    pandas_compat -&amp;gt; pandas_core_dtypes_dtypes [fillcolor="#17d3d3",minlen="3"];
    pandas_compat -&amp;gt; pandas_util__print_versions [fillcolor="#17d3d3",minlen="2"];
    pandas_compat -&amp;gt; pandas_util__tester [fillcolor="#17d3d3",minlen="2"];
    pandas_compat__optional -&amp;gt; pandas [fillcolor="#31c4c4",minlen="2"];
    pandas_compat__optional -&amp;gt; pandas_util__print_versions [fillcolor="#31c4c4",minlen="2"];
    pandas_compat__optional -&amp;gt; pandas_util__tester [fillcolor="#31c4c4",minlen="2"];
    pandas_compat_pyarrow -&amp;gt; pandas [fillcolor="#3db8b8",minlen="2"];
    pandas_compat_pyarrow -&amp;gt; pandas_compat [fillcolor="#3db8b8",weight="2"];
    pandas_core -&amp;gt; pandas [fillcolor="#10f9f9"];
    pandas_core -&amp;gt; pandas_arrays [fillcolor="#10f9f9"];
    pandas_core -&amp;gt; pandas_util [fillcolor="#10f9f9"];
    pandas_core_api -&amp;gt; pandas [fillcolor="#3a8888",minlen="2"];
    pandas_core_computation -&amp;gt; pandas [fillcolor="#3bcece",minlen="2"];
    pandas_core_computation -&amp;gt; pandas_core_config_init [fillcolor="#3bcece",weight="2"];
    pandas_core_computation_api -&amp;gt; pandas [fillcolor="#46a4a4",minlen="3"];
    pandas_core_config_init -&amp;gt; pandas [fillcolor="#3a8888",minlen="2"];
    pandas_core_dtypes -&amp;gt; pandas [fillcolor="#2fdbdb",minlen="2"];
    pandas_core_dtypes -&amp;gt; pandas_core_api [fillcolor="#2fdbdb",weight="2"];
    pandas_core_dtypes -&amp;gt; pandas_core_config_init [fillcolor="#2fdbdb",weight="2"];
    pandas_core_dtypes_dtypes -&amp;gt; pandas [fillcolor="#339999",minlen="3"];
    pandas_core_dtypes_dtypes -&amp;gt; pandas_core_api [fillcolor="#339999",minlen="2",weight="2"];
    pandas_core_reshape -&amp;gt; pandas [fillcolor="#47c2c2",minlen="2"];
    pandas_core_reshape_api -&amp;gt; pandas [fillcolor="#46a4a4",minlen="3"];
    pandas_errors -&amp;gt; pandas [fillcolor="#3ab0b0"];
    pandas_errors -&amp;gt; pandas_core_dtypes_dtypes [fillcolor="#3ab0b0",minlen="3"];
    pandas_io -&amp;gt; pandas [fillcolor="#0bdfdf"];
    pandas_io -&amp;gt; pandas_core_api [fillcolor="#0bdfdf",minlen="2"];
    pandas_io -&amp;gt; pandas_core_config_init [fillcolor="#0bdfdf",minlen="2"];
    pandas_io_api -&amp;gt; pandas [fillcolor="#46a4a4",minlen="2"];
    pandas_io_json -&amp;gt; pandas [fillcolor="#23c8c8",minlen="2"];
    pandas_io_json -&amp;gt; pandas_io [fillcolor="#23c8c8",weight="2"];
    pandas_io_json -&amp;gt; pandas_io_api [fillcolor="#23c8c8",weight="2"];
    pandas_io_json__normalize -&amp;gt; pandas [fillcolor="#4cb3b3",minlen="3"];
    pandas_plotting -&amp;gt; pandas [fillcolor="#31c4c4"];
    pandas_plotting -&amp;gt; pandas_core_config_init [fillcolor="#31c4c4",minlen="2"];
    pandas_testing -&amp;gt; pandas [fillcolor="#4cb3b3"];
    pandas_tseries -&amp;gt; pandas [fillcolor="#23c8c8"];
    pandas_tseries -&amp;gt; pandas_core_api [fillcolor="#23c8c8",minlen="2"];
    pandas_tseries_api -&amp;gt; pandas [fillcolor="#46a4a4",minlen="2"];
    pandas_tseries_offsets -&amp;gt; pandas [fillcolor="#26d9d9",minlen="2"];
    pandas_tseries_offsets -&amp;gt; pandas_core_api [fillcolor="#26d9d9",minlen="2"];
    pandas_tseries_offsets -&amp;gt; pandas_tseries [fillcolor="#26d9d9",weight="2"];
    pandas_tseries_offsets -&amp;gt; pandas_tseries_api [fillcolor="#26d9d9",weight="2"];
    pandas_util -&amp;gt; pandas [fillcolor="#05e5e5"];
    pandas_util -&amp;gt; pandas_arrays [fillcolor="#05e5e5"];
    pandas_util -&amp;gt; pandas_compat__optional [fillcolor="#05e5e5",minlen="2"];
    pandas_util -&amp;gt; pandas_compat_pyarrow [fillcolor="#05e5e5",minlen="2"];
    pandas_util -&amp;gt; pandas_core_dtypes_dtypes [fillcolor="#05e5e5",minlen="3"];
    pandas_util -&amp;gt; pandas_errors [fillcolor="#05e5e5"];
    pandas_util__print_versions -&amp;gt; pandas [fillcolor="#409696",minlen="2"];
    pandas_util__tester -&amp;gt; pandas [fillcolor="#46a4a4",minlen="2"];
}
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2024-01-21T20:01:56.161Z</blogger:created>
    <published>2024-01-21T20:16:00Z</published>
    <updated>2024-01-21T20:16:15.112Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='python'/>
    <blogger:filename>/2024/01/python-dependencies-visualization-using.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-111136700584235598</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>what is using disk space on the web server?</title>
    <content type='html'>
&lt;p&gt;
https://stackoverflow.com/a/15142053/1164295
&lt;/p&gt;


&lt;pre&gt;$ du -cBM --max-depth=1 2&amp;gt; &amp;gt;(grep -v 'Permission denied') | sort -n 
0M	./dev
0M	./proc
0M	./sys
1M	./lost+found
1M	./media
1M	./mnt
1M	./root
1M	./srv
2M	./run
7M	./etc
11M	./opt
74M	./tmp
151M	./boot
1329M	./home
1497M	./snap
2535M	./usr
3820M	./var
9421M	.
9421M	total
&lt;/pre&gt;
Confusingly, that doesn't seem consistent with 
&lt;pre&gt;$ df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            474M     0  474M   0% /dev
tmpfs            99M  1.2M   97M   2% /run
/dev/vda1        25G   20G  4.4G  82% /
tmpfs           491M     0  491M   0% /dev/shm
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs           491M     0  491M   0% /sys/fs/cgroup
/dev/vda15      105M  9.2M   96M   9% /boot/efi
tmpfs            99M     0   99M   0% /run/user/0
tmpfs            99M     0   99M   0% /run/user/1000
/dev/loop4       68M   68M     0 100% /snap/lxd/22526
/dev/loop2       44M   44M     0 100% /snap/snapd/15177
/dev/loop3       56M   56M     0 100% /snap/core18/2344
/dev/loop5       68M   68M     0 100% /snap/lxd/22753
/dev/loop0       62M   62M     0 100% /snap/core20/1405
/dev/loop6       45M   45M     0 100% /snap/snapd/15534
/dev/loop7       62M   62M     0 100% /snap/core20/1434
overlay          25G   20G  4.4G  82% /var/lib/docker/overlay2/b1e93808993411941a56eeab3447a9620dabf64956633befd4f4997c00d3bfea/merged
shm              64M     0   64M   0% /var/lib/docker/containers/dd7ef352d6ba8fa022bde66cc083c81c868ecc492b41eb31725cbd3d44e41297/mounts/shm
overlay          25G   20G  4.4G  82% /var/lib/docker/overlay2/37c02acbf47a52998e26eb679988396a263c4b2bc723435a7e185d999adb3554/merged
shm              64M     0   64M   0% /var/lib/docker/containers/4ca979c1faea9fee6b29a1bcebbea5b1897aabcb8f5e6b4e3844b52a90f481e7/mounts/shm
/dev/loop8       56M   56M     0 100% /snap/core18/2409
&lt;/pre&gt;

&lt;h2&gt;Disk usage savings #1: decrease Journal&lt;/h2&gt;

https://askubuntu.com/a/1238221
and
https://unix.stackexchange.com/a/130802/431711
and https://wiki.archlinux.org/title/Systemd/Journal

&lt;pre&gt;cd /var/log/journal
&lt;/pre&gt;

&lt;pre&gt;sudo journalctl --vacuum-time=10d
&lt;/pre&gt;

&lt;h2&gt;Disk usage savings #2: remove unused Docker images&lt;/h2&gt;

&lt;pre&gt;docker images | grep "&amp;lt;none&amp;gt; &amp;lt;none&amp;gt;" | tr -s " " | cut -d' ' -f3 | xargs docker rmi
&lt;/pre&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-05-20T10:46:27.791Z</blogger:created>
    <published>2022-05-20T11:49:00.006Z</published>
    <updated>2022-05-20T11:49:33.107Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='disk'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='digitalocean'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='capacity'/>
    <blogger:filename>/2022/05/what-is-using-disk-space-on-web-server.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-154855595577220257</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>challenge tasks to be addressed within the Physics Derivation Graph</title>
    <content type='html'>There are a set of challenge tasks for the PDG. Each task is addressed by one or more scripts&lt;br /&gt;
&lt;br /&gt;
Below the scripts in&lt;br /&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/sandbox/file_per_expression/bin"&gt;https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/sandbox/file_per_expression/bin&lt;/a&gt;&lt;br /&gt;
are referenced&lt;br /&gt;
&lt;br /&gt;
tasks associated with generating content:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;given a set of latex expressions, generate associated PNGs for feeds&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;create_picture_per_feed_expression.py&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;given a set of latex expressions, generate associated PNGs for expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;create_picture_per_feed_expression.py&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;given a set of text, generate associated PNGs for inference rules (needed for derivation graph HTML?)&lt;/li&gt;
&lt;li&gt;find new uniq random index for feeds&lt;/li&gt;
&lt;li&gt;find new uniq random index (temp) for expression&lt;/li&gt;
&lt;li&gt;find new uniq random index (perm) for expression&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;br /&gt;
viz of content&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;from an existing set of connections for a single derivation, generate a static png of the graph&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;python create_picture_per_derivation.py "../derivations/name of derivation"&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;from an existing set of connections for a two or more derivations, generate a static png of each graph&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;bash create_picture_for_each_derivation.sh&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;from an existing set of connections for a two or more derivations, generate a static png of full graph&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;bash create_all_derivations.sh; bash create_picture_for_each_derivation.sh&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;or&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;bash create_all_derivations.sh; python create_picture_per_derivation.py "../derivations/all"&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
HTML viz of content&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;from an existing set of connections for a single derivation, generate an HTML presentation of the graph&lt;/li&gt;
&lt;li&gt;from an existing set of connections for a two or more derivations, generate an HTML presentation of each graph&lt;/li&gt;
&lt;li&gt;from an existing set of connections for a two or more derivations, generate an HTML presentation of full graph&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
entry of content&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;use terminal CLI to enter new derivation&lt;/li&gt;
&lt;li&gt;use web page to construct new derivation&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;br /&gt;
CAS&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;validate a single step of a derivation&lt;/li&gt;
&lt;li&gt;validate two consecutive steps in a derivation&lt;/li&gt;
&lt;li&gt;validate all steps in a single derivation&lt;/li&gt;
&lt;li&gt;validate all steps in all derivations&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2016-01-30T03:30:21.901Z</blogger:created>
    <published>2016-01-30T03:36:00.001Z</published>
    <updated>2016-01-30T03:36:39.675Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/01/challenge-tasks-to-be-addressed-within.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-198425572524713059</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>linear representation of a directed graph</title>
    <content type='html'>A derivation typically does not show all steps. The steps of a derivation are typically not linear.  &lt;br /&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi_Okxh7zDClnbodCHPw2og39v18BZziyLS4zsjYOAECGB0FEv1QW2bp9N6eSryKu0-aEuUa4CtJu1loxAOyb6I6eUXowDX_7EHdOW6PH9q38QRWjajU78Ucc8F7g-4Ta8jsjU99-Ywn5ZX/s1600/linearizing+a+graph.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="837" data-original-width="478" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi_Okxh7zDClnbodCHPw2og39v18BZziyLS4zsjYOAECGB0FEv1QW2bp9N6eSryKu0-aEuUa4CtJu1loxAOyb6I6eUXowDX_7EHdOW6PH9q38QRWjajU78Ucc8F7g-4Ta8jsjU99-Ywn5ZX/s640/linearizing+a+graph.png" width="363" /&gt;&lt;/a&gt;&amp;nbsp;&lt;/center&gt;
&lt;center&gt;
Figure 1: left side is a directed acyclic graph where some nodes are hidden and each node can be linearly ordered. In the center all nodes have been shown in a linear presentation. On the right, all nodes in a non-linear display.
&lt;/center&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-26T11:49:15.594Z</blogger:created>
    <published>2020-08-26T11:53:00.003Z</published>
    <updated>2020-09-20T19:44:04.696Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='visualization'/>
    <blogger:filename>/2020/08/linear-representation-of-directed-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-230308223517879109</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Translating between Physics Derivation Graph concepts and features in the Lean Theorem prover</title>
    <content type='html'>&lt;div&gt;In the blog post I try to figure out how all of those concepts map to features in Lean Theorem prover.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Concepts and relations of concepts in the Physics Derivation Graph&lt;/h3&gt;&lt;p&gt;In the Physics Derivation Graph a &lt;span style="background-color: #fcff01;"&gt;derivation&lt;/span&gt; is comprised of &lt;span style="background-color: #fcff01;"&gt;steps&lt;/span&gt;. Each step has one &lt;span style="background-color: #fcff01;"&gt;inference rule&lt;/span&gt;. Inference rules can have&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;zero or more &lt;span style="background-color: #fcff01;"&gt;input expressions&lt;/span&gt;&lt;/li&gt;&lt;li&gt;zero or more &lt;span style="background-color: #fcff01;"&gt;output expressions&lt;/span&gt;&lt;/li&gt;&lt;li&gt;zero or more &lt;span style="background-color: #fcff01;"&gt;feed values&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Each expression is comprised of a &lt;span style="background-color: #fcff01;"&gt;LHS&lt;/span&gt;, &lt;span style="background-color: #fcff01;"&gt;RHS&lt;/span&gt;, and &lt;span style="background-color: #fcff01;"&gt;relation&lt;/span&gt;. "Relation" can be =, &amp;gt;, &amp;lt;, &amp;lt;=, &amp;gt;=.&lt;/div&gt;&lt;div&gt;The LHS and RHS and Feed values are comprised of &lt;span style="background-color: #fcff01;"&gt;symbols&lt;/span&gt;&lt;span style="background-color: white;"&gt; (e.g., a, b, x, y)&lt;/span&gt;&amp;nbsp;and &lt;span style="background-color: #fcff01;"&gt;operators&lt;/span&gt; (e.g., *,+,/).&amp;nbsp;&lt;/div&gt;&lt;div&gt;Symbols are &lt;span style="background-color: #fcff01;"&gt;variables&lt;/span&gt; (e.g., a, b, x, y) or &lt;span style="background-color: #fcff01;"&gt;constants&lt;/span&gt; (\pi, e).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;How Physics Derivation Graph concepts map to Lean&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I think a PDG &lt;i&gt;input expression&lt;/i&gt; is a &lt;b&gt;proposition&lt;/b&gt; in Lean.&lt;/div&gt;&lt;div&gt;I think a PDG &lt;i&gt;step&lt;/i&gt; is a t&lt;b&gt;heorem&lt;/b&gt;&amp;nbsp;in Lean.&amp;nbsp;&lt;/div&gt;&lt;div&gt;Maybe the PDG &lt;i&gt;output expression&lt;/i&gt; is a &lt;b&gt;goal&lt;/b&gt; in Lean?&lt;/div&gt;&lt;div&gt;I think a PDG &lt;i&gt;inference rule&lt;/i&gt; is a &lt;b&gt;tactic&lt;/b&gt; in Lean. See&amp;nbsp;&lt;a href="https://leanprover.github.io/reference/tactics.html"&gt;https://leanprover.github.io/reference/tactics.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;"The type of a function that can inspect the proof state, modify it, and potentially return something of type A (or fail) is called tactic A.
  &lt;/blockquote&gt;
source: &lt;a href="https://leanprover-community.github.io/extras/tactic_writing.html"&gt;https://leanprover-community.github.io/extras/tactic_writing.html&lt;/a&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Equivalence of the PDG derivation step "add 2 to both sides of &lt;code&gt;a=b&lt;/code&gt;&amp;nbsp;to get &lt;code&gt;a+2=b+2&lt;/code&gt;" with using Lean for the proof "&lt;code&gt;(a=b) -&amp;gt; (a+2=b+2)&lt;/code&gt;"&lt;/h3&gt;
  &lt;div&gt;In the Physics Derivation Graph the expressions "&lt;code&gt;a=b&lt;/code&gt;" and "&lt;code&gt;a+2=b+2&lt;/code&gt;" are related by the inference rule "add __ to both sides".&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;In Lean, "&lt;code&gt;a=b&lt;/code&gt;" is a proposition. We have to specify that &lt;code&gt;a&lt;/code&gt; is Real and &lt;code&gt;b&lt;/code&gt; is Real. Then we can prove that&lt;/div&gt;
&lt;pre&gt;(a=b) -&amp;gt; (a+2=b+2)
&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Work in progress -- try something like&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://stackoverflow.com/questions/41946310/how-to-prove-a-b-%E2%86%92-a-1-b-1-in-lean"&gt;https://stackoverflow.com/questions/41946310/how-to-prove-a-b-%E2%86%92-a-1-b-1-in-lean&lt;/a&gt;&lt;/div&gt;&lt;div&gt;see also&lt;/div&gt;&lt;div&gt;&lt;a href="https://stackoverflow.com/questions/67199246/apply-function-in-goal-in-lean-proof"&gt;https://stackoverflow.com/questions/67199246/apply-function-in-goal-in-lean-proof&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://proofassistants.stackexchange.com/questions/2080/equality-of-two-functions"&gt;https://proofassistants.stackexchange.com/questions/2080/equality-of-two-functions&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://xenaproject.wordpress.com/2020/07/03/equality-specifications-and-implementations/"&gt;https://xenaproject.wordpress.com/2020/07/03/equality-specifications-and-implementations/&lt;/a&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-16T11:55:30.942Z</blogger:created>
    <published>2023-06-16T19:21:00.010Z</published>
    <updated>2023-06-19T01:19:47.049Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lean'/>
    <blogger:filename>/2023/06/translating-between-physics-derivation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-347012746992744110</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Neo4j on Ubuntu installation notes</title>
    <content type='html'>fresh install of Ubuntu 14.04 desktop amd64&lt;br /&gt;
&lt;br /&gt;
sudo apt-get install default-jre&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
http://py2neo.org/2.0/&lt;br /&gt;
&lt;br /&gt;
sudo pip install py2neo</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-19T17:54:33.924Z</blogger:created>
    <published>2015-09-19T18:19:00Z</published>
    <updated>2015-09-19T20:18:52.705Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/neo4j-on-ubuntu-installation-notes.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-417082744103156586</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>websites for learning TLA+</title>
    <content type='html'>&lt;h2 style="text-align: left;"&gt;Wikipedia&lt;/h2&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/TLA%2B"&gt;https://en.wikipedia.org/wiki/TLA%2B&lt;/a&gt;&lt;br /&gt;&lt;a href="https://news.ycombinator.com/item?id=9601770"&gt;https://news.ycombinator.com/item?id=9601770&lt;/a&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Lamport's homepage&lt;/h2&gt;&lt;p&gt;&lt;a href="https://lamport.azurewebsites.net/tla/tla.html"&gt;https://lamport.azurewebsites.net/tla/tla.html&lt;/a&gt;&lt;br /&gt;&lt;a href="https://lamport.azurewebsites.net/tla/learning.html"&gt;https://lamport.azurewebsites.net/tla/learning.html&lt;/a&gt;&lt;br /&gt;&lt;a href="https://lamport.azurewebsites.net/video/intro.html"&gt;https://lamport.azurewebsites.net/video/intro.html&lt;/a&gt;&lt;br /&gt;&lt;a href="https://news.ycombinator.com/item?id=13918648"&gt;https://news.ycombinator.com/item?id=13918648&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;video tutorial series&lt;/i&gt;:&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8&amp;amp;list=PLWAv2Etpa7AOAwkreYImYt0gIpOdWQevD"&gt;https://www.youtube.com/watch?v=p54W-XOIEF8&amp;amp;list=PLWAv2Etpa7AOAwkreYImYt0gIpOdWQevD&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;TLA+ Github&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/tlaplus/awesome-tlaplus"&gt;https://github.com/tlaplus/awesome-tlaplus&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/tlaplus/DrTLAPlus"&gt;https://github.com/tlaplus/DrTLAPlus&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/tlaplus/Examples"&gt;https://github.com/tlaplus/Examples&lt;/a&gt;&amp;nbsp;- includes DieHard4, DiningPhilosophers, Paxos,&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/dmilstein/channels"&gt;https://github.com/dmilstein/channels&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/tlaplus-workshops/ewd998"&gt;https://github.com/tlaplus-workshops/ewd998&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/Cjen1/tla_increment"&gt;https://github.com/Cjen1/tla_increment&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;LearnTLA.com - Hillel Wayne&lt;/h2&gt;&lt;p&gt;&lt;a href="https://learntla.com/"&gt;https://learntla.com/&lt;/a&gt;&lt;br /&gt;&lt;a href="https://news.ycombinator.com/item?id=19661329"&gt;https://news.ycombinator.com/item?id=19661329&lt;/a&gt;&lt;br /&gt;&lt;a href="https://news.ycombinator.com/item?id=33010645"&gt;https://news.ycombinator.com/item?id=33010645&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.hillelwayne.com/post/learntla/"&gt;https://www.hillelwayne.com/post/learntla/&lt;/a&gt;&amp;nbsp;-- announcement about revision to book; points to learntla.com&lt;br /&gt;&lt;a href="https://news.ycombinator.com/item?id=31952643"&gt;https://news.ycombinator.com/item?id=31952643&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://hillelwayne.com/talks/distributed-systems-tlaplus/"&gt;https://hillelwayne.com/talks/distributed-systems-tlaplus/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Hillel Wayne - Designing Distributed Systems with TLA+&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=ATobswwFwQA"&gt;https://www.youtube.com/watch?v=ATobswwFwQA&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Tackling Concurrency Bugs with TLA+ by Hillel Wayne&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=_9B__0S21y8"&gt;https://www.youtube.com/watch?v=_9B__0S21y8&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;toy example of money transfer in TLA+&lt;/li&gt;&lt;li&gt;three real-world cases from Hillel's employer of using TLA+ to check design before implementation&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;@pressron - Ron Pressler&lt;/h2&gt;&lt;p&gt;&lt;a href="https://pron.github.io/posts/tlaplus_part1"&gt;https://pron.github.io/posts/tlaplus_part1&lt;/a&gt;&lt;br /&gt;&lt;a href="https://pron.github.io/posts/tlaplus_part2"&gt;https://pron.github.io/posts/tlaplus_part2&lt;/a&gt;&lt;br /&gt;&lt;a href="https://pron.github.io/posts/tlaplus_part3"&gt;https://pron.github.io/posts/tlaplus_part3&lt;/a&gt;&lt;br /&gt;&lt;a href="https://pron.github.io/posts/tlaplus_part4"&gt;https://pron.github.io/posts/tlaplus_part4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://pron.github.io/posts/tlaplus-curryon-talk"&gt;https://pron.github.io/posts/tlaplus-curryon-talk&lt;/a&gt;&lt;br /&gt;Ron Pressler - The Practice and Theory of TLA+&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=15uy9Ga-14I"&gt;https://www.youtube.com/watch?v=15uy9Ga-14I&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;TLA+ in Docker in VSCode&lt;/h2&gt;&lt;p&gt;A gentle intro to TLA+&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=D_sh1nnX3zY"&gt;https://www.youtube.com/watch?v=D_sh1nnX3zY&lt;/a&gt;&lt;br /&gt;Demos a three-state system using VSCode&lt;/p&gt;&lt;p&gt;VSCode plug-in using Docker for TLA+:&lt;br /&gt;&lt;a href="https://github.com/kevinsullivan/TLAPlusDocker"&gt;https://github.com/kevinsullivan/TLAPlusDocker&lt;/a&gt;&lt;/p&gt;&lt;p&gt;My video on how to install TLA+ inside Docker as a plug-in for VSCode:&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=sLGY7_agg4E"&gt;https://www.youtube.com/watch?v=sLGY7_agg4E&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Questions and Answers&lt;/h2&gt;&lt;p&gt;&lt;a href="https://groups.google.com/g/tlaplus"&gt;https://groups.google.com/g/tlaplus&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/tla%2b"&gt;https://stackoverflow.com/questions/tagged/tla%2b&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.reddit.com/r/tlaplus"&gt;https://www.reddit.com/r/tlaplus&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Blog posts&lt;/h2&gt;&lt;p&gt;&lt;a href="https://elliotswart.github.io/pragmaticformalmodeling/"&gt;https://elliotswart.github.io/pragmaticformalmodeling/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://muratbuffalo.blogspot.com/2022/10/checking-statistical-properties-of.html"&gt;http://muratbuffalo.blogspot.com/2022/10/checking-statistical-properties-of.html&lt;/a&gt;&lt;br /&gt;&lt;a href="https://news.ycombinator.com/item?id=33077898"&gt;https://news.ycombinator.com/item?id=33077898&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.mydistributed.systems/2022/06/some-practical-tips-on-using-tla-and-p.html"&gt;https://www.mydistributed.systems/2022/06/some-practical-tips-on-using-tla-and-p.html&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;a href="https://thenewstack.io/tla-the-best-debugger-optimizer-youve-never-heard-of/"&gt;https://thenewstack.io/tla-the-best-debugger-optimizer-youve-never-heard-of/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/"&gt;https://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/&lt;/a&gt;&lt;br /&gt;Deep dive into practical use of TLA+ for real software. Links to github repo with Dockerfile&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Using TLA+ for fun and profit in the development of Elasticsearch - Yannick Welsch&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=qYDcbcOVurc"&gt;https://www.youtube.com/watch?v=qYDcbcOVurc&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;TLA+ Toolbox for Beginners&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=U2FAnyPygrA"&gt;https://www.youtube.com/watch?v=U2FAnyPygrA&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Modeling Virtual Machines and Interrupts in TLA+ &amp;amp; PlusCal - Valentin Schneider&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=hlLZi4wfBjs"&gt;https://www.youtube.com/watch?v=hlLZi4wfBjs&lt;/a&gt;&lt;br /&gt;use of TLA+ at ARM&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;TLA+ Tutorial 2021 at DISC 2021&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=NXLJoUKJnDQ"&gt;https://www.youtube.com/watch?v=NXLJoUKJnDQ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Debugging software designs using testable pseudo-code (Jay Parlar)&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=LAEXHua4MQQ"&gt;https://www.youtube.com/watch?v=LAEXHua4MQQ&lt;/a&gt;&lt;br /&gt;Alice and Bob money transfer model (from learntla.com)&lt;br /&gt;&lt;i&gt;utility&lt;/i&gt;: first motivating example for why TLA+ provides value to design process&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;A Beginner's Guide to TLA+ Exploring State Machines &amp;amp; Proving Correctness&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=H7yBYoY7ILc"&gt;https://www.youtube.com/watch?v=H7yBYoY7ILc&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;SREcon20 Americas - Weeks of Debugging Can Save You Hours of TLA+&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=wjsI0lTSjIo"&gt;https://www.youtube.com/watch?v=wjsI0lTSjIo&lt;/a&gt;&lt;br /&gt;Uses an example written in C that has a rare deadlock.&amp;nbsp;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-10-07T01:15:00.935Z</blogger:created>
    <published>2022-10-08T17:11:00.018Z</published>
    <updated>2022-10-16T12:28:38.409Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='TLA+'/>
    <blogger:filename>/2022/10/websites-for-learning-tla.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-508879724781508174</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>recurring tasks</title>
    <content type='html'>There are a few recurring tasks:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;blacken code to enforce formatting consistency&lt;/li&gt;
&lt;li&gt;manually inspect PDFs to verify output; these seem to be the most sensitive aspect of the presentation&lt;/li&gt;
&lt;li&gt;mypy to validate consistency&lt;/li&gt;
&lt;li&gt;sphinx to generate current documentation&lt;/li&gt;
&lt;li&gt;DigitalOcean renewal of $5/month&lt;/li&gt;
&lt;li&gt;Let's Encrypt certificate renewal - 90 days -&amp;nbsp;&lt;a href="https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https"&gt;https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;check site for broken links -&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/138"&gt;https://github.com/allofphysicsgraph/proofofconcept/issues/138&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;check Google index status -&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/159"&gt;https://github.com/allofphysicsgraph/proofofconcept/issues/159&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;validate SSL status -&amp;nbsp;&lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=derivationmap.net&amp;amp;latest"&gt;https://www.ssllabs.com/ssltest/analyze.html?d=derivationmap.net&amp;amp;latest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Each of these tasks take time, so including all of them as git commit hooks induces undesirable latency.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
Currently .git/hooks/pre-commit contains&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd v7_pickle_web_interface/flask&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker run --rm -v`pwd`:/scratch --entrypoint='' -w /scratch/ flask_ub make black&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I don't want to run mypy and sphinx every time because that would take a lot of my time.&lt;/div&gt;
&lt;div&gt;
I could run these two every tenth commit.&lt;br /&gt;
&lt;br /&gt;
To get a command to run every tenth commit, I could leverage the date and run a command if the date is modulo 10.&lt;br /&gt;
&lt;br /&gt;
GIT_AUTHOR_DATE='@1589048959 -0400'&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-09T15:51:38.314Z</blogger:created>
    <published>2020-05-09T15:54:00.002Z</published>
    <updated>2020-05-31T00:04:31.035Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/recurring-tasks.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-514097182631773876</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>options if Latex is the basis</title>
    <content type='html'>Latex is the representation of Math that everyone can agree is common across domains. There is also consensus that Latex is inadequate for formal math.&lt;br /&gt;
&lt;br /&gt;
Brainstorming possible methods of leveraging Latex,&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Having authors use semantic markup (e.g.,&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://kwarc.info/systems/sTeX/"&gt;sTeX&lt;/a&gt;) when creating documents.&lt;/li&gt;
&lt;li&gt;After documents have been created, perform bulk analysis (arXiv corpus) to extract semantics. After separating text from math in a given document, tasks are to (identify article text as theorems or claims or lemma) and (identify parts of expressions in math Latex using either a grammar or machine learning).&lt;/li&gt;
&lt;li&gt;After author has written document but before they share it, the author uses software to categorize sections of text and identify parts of expressions. (This requires an addition to existing workflows, creation of novel software, and reliance on novel grammars or ML algorithms.)&lt;/li&gt;
&lt;li&gt;Instead of authoring Latex in a text editor or GUI or OverLeaf, author the content in a CAS (e.g., Sage) and generate the .tex from the CAS. Here the CAS is serving as a Latex editor, constraining what's allowed by or required from an author. While CAS software can generate Latex output, using a CAS as a Latex editor isn't standard.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-29T01:25:48.691Z</blogger:created>
    <published>2020-07-29T01:27:00Z</published>
    <updated>2020-07-29T01:27:09.159Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='latex'/>
    <blogger:filename>/2020/07/options-if-latex-is-basis.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-577175506996132999</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>relation between Inference Rules in the Physics Derivation Graph and Proofs in Lean</title>
    <content type='html'>&lt;P&gt;In this post I explore the concept that each derivation can be phrased as a proof of the initial declaration and the final result. Also, each step in a derivation can be phrased as a proof.&lt;/P&gt;


&lt;h2 style="text-align: left;"&gt;Lean Proofs of Derivation Steps&lt;/h2&gt;

&lt;p&gt;As per &lt;a href="https://stackoverflow.com/questions/41946310/how-to-prove-a-b-%E2%86%92-a-1-b-1-in-lean"&gt;https://stackoverflow.com/questions/41946310/how-to-prove-a-b-%E2%86%92-a-1-b-1-in-lean&lt;/a&gt;&amp;nbsp;Lean can prove that 
&lt;/p&gt;&lt;pre&gt;(a=b) -&amp;gt; (a+1=b+1)
&lt;/pre&gt;
&lt;p&gt;In comparison, a PDG Inference Rule is more generic:
&lt;/p&gt;&lt;pre&gt;add __ to both sides of (LHS=RHS) to get (LHS+__=RHS+__)
&lt;/pre&gt;
&lt;p&gt;The PDG Inference Rule is generic because the types of LHS and RHS are undefined. Are they Real? Complex? Matrices?&lt;/p&gt;&lt;p&gt;The relevance of types for inference rules is because mixing types may not work. "Add 1 to both sides of (LHS=RHS)" won't work if LHS and RHS are 2x2 matrices.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;!--more--&gt;&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Example Step&lt;/h3&gt;

&lt;p&gt;To leverage Lean, a PDG derivation step involves&lt;/p&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;
Select the relevant PDG Inference Rule.&lt;/li&gt;&lt;li&gt;Prove the application of the inference rule specific to the expressions associated with the step&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;As an example, the derivation step 
  &lt;/p&gt;&lt;pre&gt;  (T = 1/f) -&amp;gt; (T f = 1)&lt;br /&gt;&lt;/pre&gt;
is a provable instance of the PDG Inference Rule
&lt;pre&gt;multiply both sides of (LHS=RHS) by __ to get (LHS*__=RHS*__)
&lt;/pre&gt;

&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;!--more--&gt;&lt;/span&gt;&lt;h3 style="text-align: left;"&gt;Generalizability for an Inference Rule&amp;nbsp;&lt;/h3&gt;&lt;p&gt;The proofs of each application of each inference rule follow a similar structure. Once I've shown&lt;/p&gt;
&lt;pre&gt;(a=b) -&amp;gt; (a*c=b*c) for all (a, b, c) in Complex
&lt;/pre&gt;
then I can later substitute 
&lt;pre&gt;a=LHS
b=RHS
c=__
&lt;/pre&gt;
&lt;p&gt;and re-run the same proof tactics. The proof tactics should be agnostic to the specific contents of &lt;code&gt;LHS&lt;/code&gt; and &lt;code&gt;RHS&lt;/code&gt; as long as &lt;code&gt;LHS&lt;/code&gt;, &lt;code&gt;RHS&lt;/code&gt;, and __ are Real or Complex.&lt;/p&gt;&lt;p&gt;If I've proven&lt;/p&gt;
&lt;pre&gt;(a=b) -&amp;gt; (a*c=b*c) for all (a, b, c) in Complex
&lt;/pre&gt;
then the proof tactics will the same for
&lt;pre&gt;(a+d=b*f) -&amp;gt; ((a+d)*c=(b*f)*c) for all (a, b, c, d, f) in Complex
&lt;/pre&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Lean Proofs of Derivations&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;What about more complicated derivations that have multiple predicates, like
&lt;/p&gt;&lt;pre&gt;A    B
\   /
 \ /  
  F   C
  \   /
   \ /
    D
&lt;/pre&gt;
where A and B and C are initial assumptions and D is the final expression in the derivation?&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In Lean the top-level summary would be
  &lt;/p&gt;&lt;pre&gt;  (A ^ B ^ C) -&amp;gt; D
  &lt;/pre&gt;
and the derivation steps expressed in Lean would be
&lt;pre&gt;(A ^ B) -&amp;gt; F
and 
(F ^ C) -&amp;gt; D
&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;

This decomposition also applies to derivations with branches and joins. A derivation like
&lt;pre&gt;A    B
\   /
 \ / 
  F
 / \
/   \
D   C 
|   |
E   |
\   /
 \ /
  G
&lt;/pre&gt;
expressed in Lean would be
&lt;pre&gt;(A ^ B) -&amp;gt; F
and 
F -&amp;gt; (D ^ C)
and
D -&amp;gt; E
and
(E ^ C) -&amp;gt; G
&lt;/pre&gt;
&lt;p&gt;with a top-level description in Lean being&lt;/p&gt;
&lt;pre&gt;(A ^ B) -&amp;gt; G
&lt;/pre&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-18T12:32:02.166Z</blogger:created>
    <published>2023-06-18T13:56:00.001Z</published>
    <updated>2023-12-25T00:49:08.862Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lean'/>
    <blogger:filename>/2023/06/relation-between-inference-rules-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-582627643635531261</id>
    <blogger:parent>tag:blogger.com,1999:blog-7761348728894775915.post-8270145323304784398</blogger:parent>
    <blogger:inReplyTo/>
    <blogger:type>COMMENT</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <content type='html'>See JSON for ChatGPT https://minimaxir.com/2023/12/chatgpt-structured-data/ and associated comments https://news.ycombinator.com/item?id=38782678</content>
    <blogger:created>2023-12-28T01:56:23.450Z</blogger:created>
    <published>2023-12-28T01:56:23.450Z</published>
    <updated>2023-12-28T01:56:23.450Z</updated>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-640802866413499232</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>MONTEREY PHOENIX grammar, keywords, and common patterns</title>
    <content type='html'>&lt;h2&gt;MONTEREY PHOENIX grammar&lt;/h2&gt;&lt;div&gt;In this table &lt;i&gt;A&lt;/i&gt; is an event and &lt;i&gt;B&lt;/i&gt; and &lt;i&gt;C&lt;/i&gt; are events in &lt;i&gt;A&lt;/i&gt;&lt;/div&gt;
&lt;table border="1"&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;description of pattern&lt;/th&gt;
    &lt;th&gt;grammar rule&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Ordered sequence of events (B followed by C)&lt;/td&gt; 
    &lt;td&gt;A: B C;&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Alternative events (B or C)&lt;/td&gt; 
    &lt;td&gt;A: ( B | C );&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Optional event (B or no event at all)&lt;/td&gt; 
    &lt;td&gt;A: [ B ];&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Ordered sequence of zero or more events B&lt;/td&gt; 
    &lt;td&gt;A: (* B *);&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Ordered sequence of one or more events B&lt;/td&gt; 
    &lt;td&gt;A: (+ B +);&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Unordered set of events B and C (B and C may happen concurrently)&lt;/td&gt; 
    &lt;td&gt;A: { B, C };&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Unordered set of zero or more events B&lt;/td&gt; 
    &lt;td&gt;A: {* B *};&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Unordered set of one or more events B&lt;/td&gt; 
    &lt;td&gt;A: {+ B +};&lt;/td&gt; 
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;table border="1"&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;description of pattern&lt;/th&gt;
    &lt;th&gt;grammar rule&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;name of model&lt;/td&gt; 
    &lt;td&gt;SCHEMA&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Identifies an actor&lt;/td&gt; 
    &lt;td&gt;ROOT&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;event precedence across swimlanes&lt;/td&gt; 
    &lt;td&gt;COORDINATE&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;if and only if&lt;/td&gt; 
    &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&amp;lt;!&amp;gt;&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a condition that each valid trace should satisfy&lt;/td&gt; 
    &lt;td&gt;ENSURE&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;FOREACH&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;BUILD&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;DISJ&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;MARK&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;ONFAIL&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;CHECK&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;AFTER&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;EXISTS&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;MAP&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;CLEAR&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;SHOW&lt;/td&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;message box that prints text&lt;/td&gt; 
    &lt;td&gt;SAY("hello world")&lt;/td&gt; 
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h2&gt;Common pattern: branching logic in swimlane&lt;/h2&gt;
&lt;pre&gt;ROOT Driver: enters_car (starts_car | exits_car);
starts_car:  move_forward
             stops_car
             exits_car;
&lt;/pre&gt;
  
&lt;h2&gt;Common pattern: dependency across swimlanes&lt;/h2&gt;
&lt;pre&gt;COORDINATE
$a: turn_steering_wheel_right FROM driver,
$b: right FROM front_tires
DO 
ADD $a PRECEDES $b; 
OD;
&lt;/pre&gt;

  &lt;h2&gt;Common pattern: shared events&lt;/h2&gt;
&lt;pre&gt;Driver, Car SHARE ALL move_forward, 
                      turn_left, 
                      turn_right;
&lt;/pre&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-12-19T00:26:35.339Z</blogger:created>
    <published>2022-12-19T01:18:00.002Z</published>
    <updated>2022-12-19T01:18:27.328Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='MONTEREY PHOENIX'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='formal methods'/>
    <blogger:filename>/2022/12/monterey-phoenix-grammar-keywords-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-694915165474607297</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>my plan for progress</title>
    <content type='html'>Although my previous post on &lt;a href="https://physicsderivationgraph.blogspot.com/2020/07/barriers-to-implementing-formalization.html"&gt;barriers to formalization of mathematics&lt;/a&gt; is pessimistic, the observations are reassuring to me. I'm not duplicating the work of others, and my evaluation of options are reasonable. Few others seem interested in the problems I care about, which means I'm not missing important collaborations.&lt;br /&gt;
&lt;br /&gt;
My approach of relying on Latex and focusing on Physics is not typical of this community.&lt;br /&gt;
I'm not targeting use by researchers since they want (minimal disruption to existing workflow) and (full formalization and rigor).&lt;br /&gt;
I'm not targeting use by students who seek support for homework problem solving and numerical computation.&lt;br /&gt;
I don't expect integration with any existing projects.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-29T00:54:14.642Z</blogger:created>
    <published>2020-07-29T01:25:00.002Z</published>
    <updated>2020-07-29T01:25:38.130Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/my-plan-for-progress.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-722842146181068661</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>building a docker image for the Physics Derivation Graph</title>
    <content type='html'>&lt;h3&gt;
Requirements&lt;/h3&gt;
&lt;div&gt;
In order to build the Physics Derivation Graph in a Docker image, the minimum functionality needed is&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Compile .tex files to .pdf and .png (LaTeX)&lt;/li&gt;
&lt;li&gt;Compile .gv files to .png (GraphViz)&lt;/li&gt;
&lt;li&gt;Run a webserver (eg flask or nginx or lighthttpd)&lt;/li&gt;
&lt;li&gt;Run .py scripts (Python 3)&lt;/li&gt;
&lt;li&gt;Read SQLite&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
In this post I explore whether Alpine is a sufficient OS. If not, Ubuntu is a candidate OS which supports the needed functionality.&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
Alpine-based&lt;/h3&gt;
The build will be executed from the "proofofconcept" folder because the contents of the Docker image depend on files in the v4_file_per_expression/ folder.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd proofofconcept&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mkdir sandbox/docker_images/python_alpine&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cat &amp;gt; sandbox/docker_images/python_alpine/Dockerfile &amp;lt;&amp;lt; EOF&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;FROM python:2.7-alpine&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;MAINTAINER My Name &amp;lt;my.email.address@gmail.com&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;LABEL distro_style="apk" distro="alpine" arch="x86_64" operatingsystem="linux"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN apk add --update --no-cache graphviz&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN apk add --update --no-cache texlive-full&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN apk add --update --no-cache texlive&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN pip install pyyaml&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN pip install sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN mkdir /derivations&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN mkdir /inference_rules&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ADD ./v4_file_per_expression/bin/interactive_user_prompt.py interactive_user_prompt.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ADD ./v4_file_per_expression/lib/lib_physics_graph.py /lib/lib_physics_graph.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ADD ./v4_file_per_expression/inference_rules/* /inference_rules/&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;#WORKDIR /bin&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CMD ["python", "interactive_user_prompt.py"]&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;EOF&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
The above Dockerfile fails due to "texlive" and "texlive-full" not existing for alpine.&lt;br /&gt;
&lt;br /&gt;
Now that the Dockerfile exists, we can build the image:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker build --tag python_alpine/example sandbox/docker_images/python_alpine/&lt;/span&gt;&lt;br /&gt;
and run it to get the interactive prompt:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker run -ti python_alpine/example&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;br /&gt;
&lt;h3&gt;
Ubuntu-based&lt;/h3&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd proofofconcept&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mkdir sandbox/docker_images/python_ubuntu&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cat &amp;gt; sandbox/docker_images/python_ubuntu/Dockerfile &amp;lt;&amp;lt; EOF&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;# 20180602&lt;/span&gt;&lt;/div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
FROM ubuntu:18.04&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
MAINTAINER My Name &amp;lt;my.email.address@gmail.com&amp;gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
RUN apt-get update \&lt;/div&gt;
&lt;div&gt;
&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; apt-get upgrade -y \&lt;/div&gt;
&lt;div&gt;
&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; apt-get install -y \&lt;/div&gt;
&lt;div&gt;
&amp;nbsp; &amp;nbsp; python-pip \&lt;/div&gt;
&lt;div&gt;
&amp;nbsp; &amp;nbsp; python2.7 \&lt;/div&gt;
&lt;div&gt;
&amp;nbsp; &amp;nbsp; graphviz&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
RUN pip install pyyaml&lt;/div&gt;
&lt;div&gt;
RUN pip install sympy&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
RUN mkdir /derivations&lt;/div&gt;
&lt;div&gt;
RUN mkdir /inference_rules&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
ADD ./v4_file_per_expression/bin/interactive_user_prompt.py interactive_user_prompt.py&lt;/div&gt;
&lt;div&gt;
ADD ./v4_file_per_expression/lib/lib_physics_graph.py /lib/lib_physics_graph.py&lt;/div&gt;
&lt;div&gt;
ADD ./v4_file_per_expression/inference_rules/* /inference_rules/&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
#WORKDIR /bin&lt;/div&gt;
&lt;div&gt;
#ENTRYPOINT ["/usr/bin/python2.7"]&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
CMD ["python", "interactive_user_prompt.py"]&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
EOF&lt;/div&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker build --tag python_ubuntu/example sandbox/docker_images/python_ubuntu/&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;
&lt;span style="font-family: inherit;"&gt;Stop and remove all images&lt;/span&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;span style="font-family: inherit;"&gt;Not unexpectedly, I ran out of disk space.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
docker stop $(docker ps -a -q)&lt;/div&gt;
&lt;div&gt;
docker rm $(docker ps -aq)&lt;/div&gt;
&lt;div&gt;
docker rmi -f $(docker images -q)&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2018-06-02T13:33:52.283Z</blogger:created>
    <published>2018-06-02T14:20:00.003Z</published>
    <updated>2019-05-25T15:22:42.719Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/06/building-docker-image-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-745835848625291920</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Evaluating definite integrals for humans versus SymPy breaks the Latex-to-SymPy mapping of steps</title>
    <content type='html'>&amp;nbsp;In the process of fixing expressions and steps in the PDG database, I encountered a novel challenge.&lt;br /&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
Currently every step in the PDG has a set of Latex expressions. These expressions are provided by the user, converted to SymPy, and then the step is validated using SymPy. There is a one-to-one mapping of "what the user sees" to "what the CAS checks."&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
In a derivation there is a sequence like&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&amp;nbsp; &amp;nbsp; &lt;span style="font-family: Courier New, Courier, monospace;"&gt;f = \int_a^b x dx&lt;/span&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;i&gt;inference rule&lt;/i&gt;: carry out definite integration&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&amp;nbsp; &amp;nbsp; &lt;span style="font-family: Courier New, Courier, monospace;"&gt;f = (x^2/2)|_a^b&lt;/span&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;i&gt;inference rule&lt;/i&gt;: simplify&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&amp;nbsp; &amp;nbsp; &lt;span style="font-family: Courier New, Courier, monospace;"&gt;f = 1/2 (b^2 - a^2)&lt;/span&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
It seems that SymPy doesn't support the middle expression and instead goes directly from the first to the last expression. That means there is an intermediary Latex expression that cannot be converted to Sympy, breaking the assumption of "what the human reads is one-to-one with what the CAS checks."&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div style="margin: 0px;"&gt;
Accounting for the mismatch between Latex steps and CAS steps would make the already-messy graph structure more complicated. Some steps that are included for human readability would not be able to be specified to the CAS, nor would those steps be checked.&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-04T19:47:55.940Z</blogger:created>
    <published>2020-09-04T19:48:00.002Z</published>
    <updated>2020-09-20T19:42:38.491Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <blogger:filename>/2020/09/evaluating-definite-integrals-for.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-752061356985599571</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Tools for project maintenance</title>
    <content type='html'>For documenting the code base:&lt;br /&gt;&lt;a href="https://github.com/sphinx-doc/sphinx"&gt;    https://github.com/sphinx-doc/sphinx&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
code formatting&lt;br /&gt;&lt;a href="https://github.com/psf/black"&gt;    https://github.com/psf/black&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Autodetect basic issues&lt;br /&gt;&lt;a href="https://github.com/PyCQA/prospector"&gt;    https://github.com/PyCQA/prospector&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
autopep8&lt;br /&gt;&lt;a href="https://github.com/hhatto/autopep8"&gt;    https://github.com/hhatto/autopep8&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Refactoring&lt;br /&gt;&lt;a href="https://github.com/PyCQA/redbaron"&gt;https://github.com/PyCQA/redbaron&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-26T01:48:55.907Z</blogger:created>
    <published>2020-02-26T01:49:00Z</published>
    <updated>2020-02-26T01:50:10.933Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/02/tools-for-project-maintenance.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-782453167664238630</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>TLA+ comparison with other formal verification software</title>
    <content type='html'>&lt;p style="text-align: left;"&gt;The scope of this post is limited to formal verification of algorithms and protocols.&amp;nbsp;&lt;/p&gt;&lt;p style="text-align: left;"&gt;To save docker images to my repo,&lt;/p&gt;&lt;p style="text-align: left;"&gt;&lt;span style="font-family: courier; font-size: x-small;"&gt;docker pull official/imagename&lt;br /&gt;docker image tag official/imagename:latest myusername/imagename:latest&lt;br /&gt;docker push myusername/imagename:latest&lt;/span&gt;&lt;/p&gt;&lt;p style="text-align: left;"&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;TLA+&lt;/h2&gt;&lt;div&gt;Check the correctness of a specification.&amp;nbsp;&lt;br /&gt;Not tied to a specific implementation or tests of an implementation.&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Jepsen&lt;/h2&gt;&lt;div&gt;&lt;a href="https://jepsen.io/"&gt;https://jepsen.io/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jepsen-io/jepsen"&gt;https://github.com/jepsen-io/jepsen&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;"Jepsen is a Clojure library. A test is a Clojure program which uses the Jepsen library to set up a distributed system, run a bunch of operations against that system, and verify that the history of those operations makes sense."&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For distributed systems, introduce {partitions, added resources, removed resources, delays, clock skew} and other noises, run operations, and then compare against expected results.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Stateright&lt;/h2&gt;&lt;div&gt;&lt;a href="https://github.com/stateright/stateright"&gt;https://github.com/stateright/stateright&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://docs.rs/stateright/latest/stateright/"&gt;https://docs.rs/stateright/latest/stateright/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;"Stateright is a Rust actor library that aims to solve this problem by providing an embedded model checker, a UI for exploring system behavior (demo), and a lightweight actor runtime. It also features a linearizability tester that can be run within the model checker for more exhaustive test coverage than similar solutions such as Jepsen."&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;F*&lt;/h2&gt;&lt;div&gt;&lt;a href="https://www.fstar-lang.org/"&gt;https://www.fstar-lang.org/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://hub.docker.com/r/fstarlang/fstar"&gt;https://hub.docker.com/r/fstarlang/fstar&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/FStarLang/FStar"&gt;https://github.com/FStarLang/FStar&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Can generate C, as well as parser/generators.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Not explicitly temporal (whereas TLA+ is explicitly about temporal actions), but F* could be used for temporal models.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Why3&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;https://why3.lri.fr/&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Z3&lt;/h2&gt;&lt;div&gt;written by the same developer as SMV after the developer moved to Microsoft&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/Z3Prover/z3"&gt;https://github.com/Z3Prover/z3&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://theory.stanford.edu/~nikolaj/programmingz3.html"&gt;https://theory.stanford.edu/~nikolaj/programmingz3.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;https://github.com/z3prover/z3/pkgs/container/z3&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Coq&lt;/h2&gt;&lt;div&gt;constructive dependent type theory&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Lean&lt;/h2&gt;&lt;div&gt;"Simple formally verified compiler in Lean" by Ericson (2021)&lt;/div&gt;&lt;div&gt;&lt;a href="https://uu.diva-portal.org/smash/get/diva2:1613286/FULLTEXT01.pdf"&gt;https://uu.diva-portal.org/smash/get/diva2:1613286/FULLTEXT01.pdf&amp;nbsp;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;SMV&lt;/h2&gt;&lt;div&gt;CMU's SMV --&amp;gt; Cadence SMV --&amp;gt; nuSMV&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;https://swmath.org/software/7795&lt;/div&gt;&lt;div&gt;http://mcmil.net/smv.html&lt;/div&gt;&lt;div&gt;https://www.cs.cmu.edu/~modelcheck/smv.html&lt;/div&gt;&lt;div&gt;https://sws.cs.ru.nl/publications/papers/biniam/smv/&lt;/div&gt;&lt;div&gt;https://web.cs.wpi.edu/~kfisler/Courses/525V/S02/Readings/smv-cadence.pdf&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;https://nusmv.fbk.eu/&lt;/div&gt;&lt;div&gt;https://en.wikipedia.org/wiki/NuSMV&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Isabelle/HOL&lt;/h2&gt;&lt;div&gt;simple type theory&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://lawrencecpaulson.github.io/2022/10/12/verifying-distributed-systems-isabelle.html"&gt;https://lawrencecpaulson.github.io/2022/10/12/verifying-distributed-systems-isabelle.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://news.ycombinator.com/item?id=33177980"&gt;https://news.ycombinator.com/item?id=33177980&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Alloy&lt;/h2&gt;&lt;div&gt;&lt;a href="https://alloytools.org/"&gt;https://alloytools.org/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Cryptol&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://cryptol.net/index.html"&gt;https://cryptol.net/index.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/GaloisInc/cryptol"&gt;https://github.com/GaloisInc/cryptol&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Spin and Promela&lt;/h2&gt;&lt;div&gt;&lt;a href="https://spinroot.com/spin/whatispin.html"&gt;https://spinroot.com/spin/whatispin.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://spinroot.com/spin/Man/index.html"&gt;https://spinroot.com/spin/Man/index.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://spinroot.com/spin/Man/Quick.html"&gt;https://spinroot.com/spin/Man/Quick.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://en.wikipedia.org/wiki/Promela"&gt;https://en.wikipedia.org/wiki/Promela&lt;/a&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;P&lt;/h2&gt;&lt;div&gt;&lt;a href="https://github.com/p-org/P"&gt;https://github.com/p-org/P&lt;/a&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Event B&lt;/h2&gt;&lt;div style="text-align: left;"&gt;"a modelling method for formalising and developing systems whose components can be modelled as discrete transition systems. An evolution of the (classical) B-method, Event-B is now centred around the general notion of events, which are also found in other formal methods such as Action Systems, TLA and UNITY."&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;An Introduction to the Event-B Modelling Method&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="https://www.southampton.ac.uk/~tsh2n14/publications/chapters/eventb-dbook13.pdf"&gt;https://www.southampton.ac.uk/~tsh2n14/publications/chapters/eventb-dbook13.pdf&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Translating B to TLA+ for Validation with TLC&lt;/h3&gt;&lt;p&gt;&lt;a href="https://www3.hhu.de/stups/downloads/pdf/HansenLeuschel_TLC4B_techreport.pdf"&gt;https://www3.hhu.de/stups/downloads/pdf/HansenLeuschel_TLC4B_techreport.pdf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.sciencedirect.com/science/article/pii/S0167642316300235"&gt;https://www.sciencedirect.com/science/article/pii/S0167642316300235&lt;/a&gt;&lt;/p&gt;&lt;p&gt;classical B for software development&lt;/p&gt;&lt;p&gt;&lt;a href="https://discuss.tlapl.us/msg03080.html"&gt;https://discuss.tlapl.us/msg03080.html&lt;/a&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-10-08T23:46:20.617Z</blogger:created>
    <published>2022-10-09T18:44:00.005Z</published>
    <updated>2022-10-14T13:48:00.494Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='TLA+'/>
    <blogger:filename>/2022/10/tla-comparison.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-824226262615997553</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Automated web interface testing</title>
    <content type='html'>&lt;a href="https://robotframework.org/"&gt;&lt;br class="Apple-interchange-newline" /&gt;https://robotframework.org/&lt;/a&gt;&amp;nbsp;is better than Selenium because it produce reports&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-31T02:26:21.458Z</blogger:created>
    <published>2019-12-31T02:26:00.002Z</published>
    <updated>2019-12-31T02:26:21.615Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/automated-web-interface-testing.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-858282249147849404</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>literature review for using arXiv as a corpus for analysis</title>
    <content type='html'>"Towards Machine-assisted Meta-Studies: The Hubble Constant"&lt;br /&gt;
&lt;a href="https://arxiv.org/pdf/1902.00027.pdf"&gt;https://arxiv.org/pdf/1902.00027.pdf&lt;/a&gt;&lt;br /&gt;
"an approach for automatic extraction of measured values from the astrophysical literature, using the Hubble constant for our pilot study. Our rules-based model – a classical technique in natural language processing – has successfully extracted 298 measurements of the Hubble constant, with uncertainties, from the 208,541 available arXiv astrophysics papers."&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
"Scienceography: the study of how science is written" (2013)&lt;br /&gt;
&lt;a href="https://arxiv.org/abs/1202.2638"&gt;https://arxiv.org/abs/1202.2638&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://arxiv.org/pdf/1202.2638.pdf"&gt;https://arxiv.org/pdf/1202.2638.pdf&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.488.6970&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.488.6970&amp;amp;rep=rep1&amp;amp;type=pdf&lt;/a&gt;&lt;br /&gt;
&lt;i&gt;Focused on characterization&lt;/i&gt;&lt;br /&gt;
separates out packages, comments, authors, figures in the .tex source&lt;br /&gt;
&lt;br /&gt;
"Transforming the arχiv to XML" (2008)&lt;br /&gt;
&lt;a href="https://link.springer.com/chapter/10.1007%2F978-3-540-85110-3_46"&gt;https://link.springer.com/chapter/10.1007%2F978-3-540-85110-3_46&lt;/a&gt;&lt;br /&gt;
&lt;b&gt;Kohlhase&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
"An Architecture for Recovering Meaning in a LATEX to OMDoc Conversion" (2009)&lt;br /&gt;
&lt;a href="https://pdfs.semanticscholar.org/6647/612d3b61102a589db63a7ad9ac243901a9d8.pdf"&gt;https://pdfs.semanticscholar.org/6647/612d3b61102a589db63a7ad9ac243901a9d8.pdf&lt;/a&gt;&lt;br /&gt;
&lt;b&gt;undergrad thesis; describes processing pipeline for arXiv to OMDoc using LatexML&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;Kohlhase's student&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
"Delineating Fields Using Mathematical Jargon"&lt;br /&gt;
&lt;a href="https://www.aclweb.org/anthology/W16-1508.pdf"&gt;https://www.aclweb.org/anthology/W16-1508.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
"On the Use of ArXiv as a Dataset" (2019)&lt;br /&gt;
&lt;a href="https://arxiv.org/abs/1905.00075"&gt;https://arxiv.org/abs/1905.00075&lt;/a&gt;&lt;br /&gt;
primarily characterization of arXiv&lt;br /&gt;
&lt;br /&gt;
"Plagiarism Detection in arXiv"&lt;br /&gt;
&lt;a href="https://arxiv.org/pdf/cs/0702012.pdf"&gt;https://arxiv.org/pdf/cs/0702012.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-31T02:35:21.957Z</blogger:created>
    <published>2020-05-31T02:44:00.001Z</published>
    <updated>2020-07-27T19:06:04.593Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/literature-review-for-using-arxiv-as.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-897936943423612181</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>static analysis of function dependency in Python</title>
    <content type='html'>With 1400 lines of Python, I wanted to find a way to visualize the static dependencies of functions internal to the script&lt;br /&gt;
https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v4_file_per_expression/bin/interactive_user_prompt.py&lt;br /&gt;
&lt;br /&gt;
I looked at &lt;a href="https://pycallgraph.readthedocs.io/en/master/"&gt;PyCallGraph&lt;/a&gt; but it only supports dynamic call graphs. In addition to &lt;a href="https://github.com/davidfraser/pyan"&gt;Pyan&lt;/a&gt; and &lt;a href="http://furius.ca/snakefood/"&gt;Snakefood&lt;/a&gt;, I found &lt;a href="http://blog.prashanthellina.com/generating-call-graphs-for-understanding-and-refactoring-python-code.html"&gt;a blog post&lt;/a&gt; that included &lt;a href="http://code.prashanthellina.com/code/construct_call_graph.py"&gt;an AST parser&lt;/a&gt; as a single file.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;python construct_call_graph.py -i ../../proofofconcept/v4_file_per_expression/bin/interactive_user_prompt.py &amp;gt; graph.dot&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
add "&lt;span style="font-family: Courier New, Courier, monospace;"&gt;overlap=false;&lt;/span&gt;" in the graph.dot file&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;neato -Tpng graph.dot -o graph.png&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;which yields&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhMstGDyFfWBoLsKLRFp0eMjY4o3n5yM7tPCyQy7FdGDfY-Ygo7a-xDgAMk4N7shAeexuECSi0ULZreFknD_GYuimkeZBnwjERzmWR6HsAf8-z8hs5XjbCqyxExzJWUjMTqNUH9bIoSCX0g/s1600/graph.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1378" data-original-width="1600" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhMstGDyFfWBoLsKLRFp0eMjY4o3n5yM7tPCyQy7FdGDfY-Ygo7a-xDgAMk4N7shAeexuECSi0ULZreFknD_GYuimkeZBnwjERzmWR6HsAf8-z8hs5XjbCqyxExzJWUjMTqNUH9bIoSCX0g/s1600/graph.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-04T18:34:17.211Z</blogger:created>
    <published>2018-07-04T18:40:00.002Z</published>
    <updated>2018-07-04T18:40:36.148Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/static-analysis-of-function-dependency.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1022312528752834768</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>notes on status and near-term plans</title>
    <content type='html'>&lt;p&gt;status updates after ~30 hours of work over the course of 1 weekend.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;made good progress with text input to web UI for Neo4j property graph back-end.&lt;/li&gt;&lt;li&gt;new user workflow: instead of user providing expressions during specification of step, now expressions are separate. (&lt;i&gt;Not clear how well this will work for actually use&lt;/i&gt;.)&lt;/li&gt;&lt;li&gt;new schema: see&amp;nbsp;&lt;a href="https://physicsderivationgraph.blogspot.com/2024/05/distinguishing-scalars-vectors-and.html"&gt;https://physicsderivationgraph.blogspot.com/2024/05/distinguishing-scalars-vectors-and.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm happy with the rewrite of the back-end since it makes the design more robust and flexible.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;I've learned enough Cypher to feel comfortable continuing with this path. I'm also somewhat confident (with no basis in experience) that switching to a different property graph is feasible without having to rewrite the front-end and controller).&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Developer workflow&lt;/h2&gt;&lt;div&gt;My "how do I develop the code" steps have evolved to include Black and mypy.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
After making changes to the code I format using Black and then use type hinting:
&lt;pre&gt;make black_out
docker run --rm -v`pwd`:/scratch --entrypoint='' -w /scratch/ property_graph_webserver mypy --check-untyped-defs webserver/app.py
&lt;/pre&gt;

To launch the web UI,
&lt;pre&gt;make black_out; docker ps | grep property | cut -d' ' -f1 | xargs docker kill; date; make up
&lt;/pre&gt;

&lt;p&gt;I added Selenium tests to speed up the UI validation.

&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;Near-term plans&lt;/h2&gt;&lt;div&gt;There's a lot to do, so in roughly priority order (from most important near-term to will-get-to-later)&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Convert Latex expressions to Sympy
&lt;/li&gt;&lt;li&gt;Check the dimensionality and consistency of expressions using sympy
&lt;/li&gt;&lt;li&gt;Provide feedback to user on invalid inputs using dimensionality checks and symbol consistency
&lt;/li&gt;&lt;li&gt;Check steps using SymPy. Currently in the v7 code base the file "validate_steps_sympy.py" takes Latex as input, converts to SymPy, then validates step. I think the step validation should be done using pure SymPy? (rather than taking Latex as input).&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Lean: Explorer how to include lean derivations per step. Can I get lean to run on my computer?

&lt;/p&gt;&lt;p&gt;Add API support to enable curl interactions. &lt;br /&gt;
This would improve command line testability of workflows 

&lt;/p&gt;&lt;p&gt;Write more selenium tests. &lt;br /&gt;
This assumes the web UI is stable.&lt;/p&gt;&lt;p&gt;Make the HTML tables sortable (as already exists on &lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;)

&lt;/p&gt;&lt;p&gt;Support rendering latex in HTML  (as already exists on &lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;)

&lt;/p&gt;&lt;p&gt;Migrating existing content into the new back end

&lt;/p&gt;&lt;p&gt;Convert latex strings into PNG files for visualization (as already exists on&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;Render derivations as PDF (as already exists on&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2024-05-20T00:25:43.994Z</blogger:created>
    <published>2024-05-20T00:42:00Z</published>
    <updated>2024-05-24T20:48:18.829Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='planning'/>
    <blogger:filename>/2024/05/notes-on-status-and-near-term-plans.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1084228279994130035</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>software for numerical calculations of derived expressions versus implementation of an algorithm</title>
    <content type='html'>&lt;p&gt;Suppose I have a Python program that takes "angle" and "initial speed" as arguments and calculates where a ball shot from a cannon lands. The program could be described using the function&lt;/p&gt;
&lt;pre&gt;f(\theta, s) = d&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;\theta&lt;/code&gt; is the angle, &lt;code&gt;s&lt;/code&gt; is the speed, and &lt;code&gt;d&lt;/code&gt; is the distance from the cannon where the ball lands. The function could be expressed using a variety of languages like Python, C, Lean, etc.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;f(\theta, s) = d&lt;/code&gt; is derived from the &lt;a href="https://en.wikipedia.org/wiki/Equations_of_motion"&gt;equations of motion&lt;/a&gt; (like &lt;a href="https://derivationmap.net/review_derivation/201726/"&gt;https://derivationmap.net/review_derivation/201726/&lt;/a&gt;) and each step is verified using Lean (as described in &lt;a href="https://physicsderivationgraph.blogspot.com/2023/06/relation-between-inference-rules-in.html"&gt;this post&lt;/a&gt;), then we can use Lean to calculate &lt;code&gt;d&lt;/code&gt; from &lt;code&gt;\theta&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt;. The difference would be that there's more explanation of where the result came from. Rather than just "here the equation to use," including the derivation step and proof of each step makes the assumptions explicit and the implementation correct.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;All software programs can be described as functions that take arguments and return results. That doesn't mean that all functions are derived. As an example of software that is a function but isn't derived, consider the &lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm"&gt;A* routing algorithm&lt;/a&gt;. An algorithm outlines a sequence of steps for accomplishing a function. 
  
&lt;/p&gt;&lt;p&gt;While all programs could be written in Lean (because each program is a function), not all functions are derived mathematically. As a trivial example, printing "hello world" is not a derived function. In contrast, the first example in this post, the distance a projectile flies, is derived from the &lt;a href="https://en.wikipedia.org/wiki/Equations_of_motion"&gt;equations of motion&lt;/a&gt;. &lt;i&gt;What distinguishes "hello world" and A* routing from the cannon ball trajectory?&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The distinction is that the cannon ball example is a numerical simulation of a tangible scenario, whereas "hello world" is not describing physically-constrained reality.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For numerical simulations, Lean can formally verify the derivation and the formula used for analytical calculation. Keeping both aspects in Lean results in a clear chain of custody.&amp;nbsp;&lt;/p&gt;&lt;p&gt;For algorithms (e.g., A* routing, "hello world"), the verification is to show that the implementation is consistent with the requirements. Here languages like Dafny and F* are relevant.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;More on F*&lt;/i&gt;:
  &lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/F*_(programming_language)"&gt;https://en.wikipedia.org/wiki/F*_(programming_language)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/research/project/the-f-project/"&gt;https://www.microsoft.com/en-us/research/project/the-f-project/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/FStarLang/FStar"&gt;https://github.com/FStarLang/FStar&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://www.fstar-lang.org/"&gt;https://www.fstar-lang.org/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://fstarlang.github.io/"&gt;https://fstarlang.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i&gt;More on Dafny&lt;/i&gt;:
  &lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dafny"&gt;https://en.wikipedia.org/wiki/Dafny&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2008/12/dafny_krml203.pdf"&gt;https://www.microsoft.com/en-us/research/wp-content/uploads/2008/12/dafny_krml203.pdf&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://homepage.cs.uiowa.edu/~tinelli/classes/181/Fall15/Papers/Lein13.pdf"&gt;https://homepage.cs.uiowa.edu/~tinelli/classes/181/Fall15/Papers/Lein13.pdf&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://dafny.org/"&gt;https://dafny.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Floats in Lean&lt;/h3&gt;&lt;div&gt;&lt;a href="https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/floats.20vs.2E.20reals"&gt;https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/floats.20vs.2E.20reals&lt;/a&gt;&lt;/div&gt;&lt;div&gt;float is not a ring.&lt;/div&gt;&lt;div&gt;Nor is there an injection; inf is not a real&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/verified-optimization/CvxLean/blob/main/CvxLean/Tactic/Solver/Float/RealToFloat.lean"&gt;https://github.com/verified-optimization/CvxLean/blob/main/CvxLean/Tactic/Solver/Float/RealToFloat.lean&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Real.20to.20float.20translation"&gt;https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Real.20to.20float.20translation&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-18T14:02:35.965Z</blogger:created>
    <published>2023-06-18T14:38:00.001Z</published>
    <updated>2023-06-19T12:50:43.371Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lean'/>
    <blogger:filename>/2023/06/software-for-numerical-calculations-of.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1111095023950091092</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Searchable Latex, semantic enrichment, and reconciling variables in arxiv</title>
    <content type='html'>Inspired by &lt;a href="http://searchonmath.com"&gt;searchonmath.com&lt;/a&gt; I spent time attempting to recreate and then extend the effort. 
&lt;ol&gt;
&lt;li&gt; Analyzing .tex from arxiv is hard due to "minor" issues like encoding and misspelling and mal-formed latex and expansion of macros. (LaTeXML may help with macro expansion?)
&lt;/li&gt;&lt;li&gt; Once the math (e.g. $x$) and expressions are separated from the text, I don't have a good way of separating variables within expressions. (I think this is where grammar explorations are helpful. LaTeXML may also be able to do this, but I haven't gotten it working yet.)
&lt;/li&gt;&lt;li&gt; Once variables are tokenized within expressions, identifying the concept (e.g., name of constants) is burdensome. (Need manual annotation -- MioGatto -- or NLP or both.)
&lt;/li&gt;&lt;li&gt; Reconcile variables across different .tex files in arxiv
&lt;/li&gt;&lt;li&gt; Create an interface providing semantically-enriched arxiv content that is indexed for search queries to users. (Something like &lt;a href="http://searchonmath.com"&gt;searchonmath.com&lt;/a&gt; but with semantic enrichment of variables.) 
&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Getting to 5 is still a long way from the feature set I'm trying to demonstrate with the Physics Derivation Graph!
To be specific, filling in missing derivation steps and checking the consistency of expressions and the correctness of derivation steps would be additional work.

&lt;/p&gt;&lt;p&gt;That leads me to the conclusion that I should focus my PDG efforts on building an exemplar destination rather than spend my time implementing steps 1-5. Both are relevant and take a lot of hard labor and creative work. 
My plans are to continue work on the Neo4j-based property graph.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-05-28T14:52:46.163Z</blogger:created>
    <published>2022-05-28T14:58:00.004Z</published>
    <updated>2022-05-28T21:15:01.812Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/05/searchable-latex-semantic-enrichment.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1111387348633697078</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>proposal for analysis of math used in a subdomain of Physics based on the arXiv corpus</title>
    <content type='html'>What type of math is used in the High-Energy Physics (HEP) corpus available from arXiv?&lt;br /&gt;
Example categories include&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;geometry&lt;/li&gt;
&lt;li&gt;trigonometry&lt;/li&gt;
&lt;li&gt;integration&lt;/li&gt;
&lt;li&gt;differential equations&lt;/li&gt;
&lt;li&gt;sets&lt;/li&gt;
&lt;li&gt;linear algebra&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Motives for asking this question:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;if I read a randomly selected paper in HEP, what math should I have fluency in?&lt;/li&gt;
&lt;li&gt;are there papers in HEP that use math which is unusual compared to the majority? For example, is there only one paper that uses geometry?&lt;/li&gt;
&lt;li&gt;what is the diversity of math per author? (For multi-author papers, tag each author with all the math categories.)&lt;/li&gt;
&lt;li&gt;what is the diversity of math per paper? (How many types of math appear in a given paper?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-31T12:46:32.777Z</blogger:created>
    <published>2020-05-31T12:50:00.002Z</published>
    <updated>2020-05-31T12:50:53.446Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/proposal-for-analysis-of-math-used-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1118732652361212133</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>tracing Python in JSON-based workflow is untenable </title>
    <content type='html'>&lt;p&gt;I added&lt;/p&gt;
&lt;pre&gt;
def mytrace(frame, event, arg):
    if event == "call":
        print("call", frame.f_code.co_name, frame.f_locals)
    elif event == "return":
        print("return", frame.f_code.co_name, arg)
    return mytrace

sys.settrace(mytrace)
&lt;/pre&gt;
&lt;P&gt;to &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v7_pickle_web_interface/flask/controller.py"&gt;https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v7_pickle_web_interface/flask/controller.py&lt;/a&gt; but the output wasn't that useful since I'm passing the entire database as JSON. The full JSON shows up in almost every argument and return value, making the output of the trace unreadable.
  

&lt;P&gt;When I switch to the Neo4j/Cypher-based approach, the trace might be more usable.</content>
    <blogger:metaDescription/>
    <blogger:created>2023-05-27T18:37:37.869Z</blogger:created>
    <published>2023-05-27T18:41:00.001Z</published>
    <updated>2023-05-27T18:41:04.818Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='python'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='trace'/>
    <blogger:filename>/2023/05/tracing-python-in-json-based-workflow.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1126537357289512822</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>why I'm excited about the Physics Derivation Graph</title>
    <content type='html'>A few months ago I realized that rather than try to figure out what the best storage format was (MathML, Latex, Sympy, etc) and what database should store that representation (CSV, SQL, XML, etc), the "easy" solution was to simply &lt;a href="https://physicsderivationgraph.blogspot.com/2020/02/significant-changes-to-physics.html"&gt;store strings in dictionaries as a Python Pickle&lt;/a&gt;. No translation needed -- simply save the internal representation to disk and read it in as a Python variable.&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Then I had an insight about &lt;a href="https://physicsderivationgraph.blogspot.com/2019/12/sql-vs-csv-for-data-storage.html"&gt;how the front-end was supposed to work&lt;/a&gt; using the Model-View-Controller (MVC) approach. Now I felt comfortable about both the back-end and front-end aspects of the PDG! I had &lt;a href="https://physicsderivationgraph.blogspot.com/2020/02/todo-list.html"&gt;a backlog of features&lt;/a&gt;&amp;nbsp;which were now easy and intuitive to implement. However, that didn't result in the excitement and motivation I now feel.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
In the process of reviewing my hand-written notes from graduate school, I realized I now have actual hope of converting the notes to an electronic format. My reinvigorated interest in implementing the Physics Derivation graph is because I now have the relevant aspects figured out and see a well-defined end point.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
That shifted my view of what I should be working on in the PDG code. Rather than working on arbitrary features, I am now focused on addressing aspects that are blocking me from converting my paper notes into PDG content.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-03-08T22:24:26.020Z</blogger:created>
    <published>2020-03-08T22:38:00Z</published>
    <updated>2020-03-08T22:38:07.012Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='motivation'/>
    <blogger:filename>/2020/03/why-im-excited-about-physics-derivation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1151238943727240737</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>milestones on the path to a live website</title>
    <content type='html'>For the past few weeks I've always has "just a few more things" prior to me making the Physics Derivation Graph website live. As I progress, I keep adding more tasks that are necessary. This post is an effort to at least measure the scope creep.&lt;br /&gt;
&lt;br /&gt;
For me to feel comfortable with making the website live, the ordered list of tasks is&lt;br /&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;input multiple novel derivations to ensure the workflow is sensical, bug-free, and efficient&lt;/li&gt;
&lt;li&gt;aggregate logs from Nginx, gunicorn, flask&lt;/li&gt;
&lt;li&gt;implement sign-in capability&lt;/li&gt;
&lt;li&gt;perform security checks and web form fuzzing&lt;/li&gt;
&lt;li&gt;buy a domain&lt;/li&gt;
&lt;li&gt;sign in with Google&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
I don't have a timeline for these milestones.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Update&lt;/i&gt; &lt;b&gt;20200512&lt;/b&gt;: all these steps are completed&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-18T21:32:35.242Z</blogger:created>
    <published>2020-04-18T21:36:00Z</published>
    <updated>2020-05-13T01:23:51.090Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/milestones-on-path-to-live-website.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1170804336688217463</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Coulomb's law can be used to derive Gauss's law, and vice versa</title>
    <content type='html'>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Coulomb%27s_law"&gt;https://en.wikipedia.org/wiki/Coulomb%27s_law&lt;/a&gt;
says, "Coulomb's law can be used to derive Gauss's law, and vice versa."
&lt;a href="https://en.wikipedia.org/wiki/Gauss%27s_law#Relation_to_Coulomb's_law"&gt;https://en.wikipedia.org/wiki/Gauss%27s_law#Relation_to_Coulomb's_law

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.learnatnoon.com/s/in/deduce-coulombs-law-from-gauss-law/85530/"&gt;https://www.learnatnoon.com/s/in/deduce-coulombs-law-from-gauss-law/85530/

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.watelectronics.com/gauss-law-formula-derivation"&gt;https://www.watelectronics.com/gauss-law-formula-derivation

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://socratic.org/questions/can-coulomb-s-law-be-used-to-derive-gauss-s-law-how"&gt;https://socratic.org/questions/can-coulomb-s-law-be-used-to-derive-gauss-s-law-how&lt;/a&gt;

and videos

&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=htjxMwHKuyI"&gt;https://www.youtube.com/watch?v=htjxMwHKuyI

&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ZVnQR6tlU4c"&gt;https://www.youtube.com/watch?v=ZVnQR6tlU4c&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-16T10:42:49.810Z</blogger:created>
    <published>2023-06-16T10:53:00.001Z</published>
    <updated>2023-06-16T10:53:18.570Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1173879329385042547</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Derivations, CAS, Lean, and Assumptions in Physics</title>
    <content type='html'>&lt;p&gt;Initially the Physics Derivation Graph documented expressions as Latex. Then SymPy was added to support validation of steps (is the step self-consistent) and dimensionality (is the expression self-consistent?).&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Recently I learned that Lean could be used to prove each step in a derivation. The difference between a Computer Algebra System (e.g., SymPy) and Lean is whether "&lt;span style="font-family: courier;"&gt;a = b&amp;nbsp; --&amp;gt; a/b = 1&lt;/span&gt;" is a valid step -- it isn't when &lt;span style="font-family: courier;"&gt;b&lt;/span&gt; is zero. Lean catches that; SymPy does not.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;While Lean proofs sound like the last possible refinement, there are two additional complications to account for not addressed by Lean.&amp;nbsp;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;&lt;i&gt;Challenge&lt;/i&gt;: Bounded ranges of applicability&lt;/h2&gt;

&lt;p&gt;In classical mechanics the relation between momentum, mass, and velocity is "&lt;span style="font-family: courier;"&gt;p = m v&lt;/span&gt;". That hold when "&lt;span style="font-family: courier;"&gt;v &amp;lt;&amp;lt; c&lt;/span&gt;". Near the speed of light we need to switch to relativistic mass,&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: courier;"&gt;m = m_{rest} / sqrt{1-((v^2)/(c^2))}&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The boundary between "&lt;span style="font-family: courier;"&gt;v &amp;lt;&amp;lt; c&lt;/span&gt;" and "&lt;span style="font-family: courier;"&gt;v ~ c&lt;/span&gt;" is usually set by the context being considered.&amp;nbsp;&lt;/p&gt;&lt;p&gt;One response for users of Lean would be to always use the "correct" relativistic equation, even when "&lt;span style="font-family: courier;"&gt;v &amp;lt;&amp;lt; c&lt;/span&gt;."&amp;nbsp; A more conventional approach used by Physicists is to use&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: courier;"&gt;p = m v, where v &amp;lt;&amp;lt; c&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;then drop the "&lt;span style="font-family: courier;"&gt;v &amp;lt;&amp;lt; c&lt;/span&gt;" clause and rely on context.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;&lt;i&gt;Challenge&lt;/i&gt;:&amp;nbsp;Real versus Float versus experimental characterization&lt;/h2&gt;

&lt;p&gt;Lean forces you to characterize numbers as Real or Integer or Complex. This presents a problem for numerical simulations that have something like a 64 bit float representation.&lt;/p&gt;&lt;p&gt;In thermodynamics we assume the number of particles involved is sufficiently large that we focus on the behavior of the ensemble rather than individual particles. The imprecision of floats is not correct, but neither is the infinite precision assumed by Real numbers.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Example applications of Lean proofs needing bounds on values&lt;/h2&gt;&lt;p&gt;Math doesn't have convenient ways of indicating "finite precision, as set by the Plank scale."&amp;nbsp; The differential element used in calculus cannot actually go to zero, but we use that concept because it works at the scales we are used to.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Physicists make simplifying assumptions that sometimes ignore reality (e.g., assuming continuous media when particles are discrete). Then again the assumption that particles are discrete is also a convenient fiction that ignores the wavefunction of quantum mechanics.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Lean can be used to prove derivations in classical mechanics, but to be explicit about the bounds of those proofs we'd also need to indicate "v &amp;lt;&amp;lt; c" and "assume &lt;a href="https://en.wikipedia.org/wiki/Euclidean_space"&gt;space is Euclidean&lt;/a&gt;."&amp;nbsp;&lt;/p&gt;&lt;p&gt;For molecular dynamics, another constraint to account for is "temperature &amp;lt;&amp;lt; 1E10 Kelvin" or whatever temperature the atoms breaks down into plasma.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Distinguishing the context of (classical mechanics from quantum) and (classical from relativistic) and (conventional gas versus plasma) seems important so that we know when a claim proven in Lean is applicable.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2024-03-09T18:36:43.783Z</blogger:created>
    <published>2024-03-09T19:53:00Z</published>
    <updated>2024-03-09T19:53:19.885Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lean'/>
    <blogger:filename>/2024/03/derivations-cas-lean-and-assumptions-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1186605927574065343</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>todo list for February 2020 (completed!)</title>
    <content type='html'>Current status: I have an interactive web interface using Docker and Flask that I'm reasonably happy with. In this post I outline tasks that need to be done prior to wider exposure.&lt;br /&gt;
&lt;br /&gt;
Functionality&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;list all&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strike&gt;operators&lt;/strike&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;in which derivation is each used?&lt;/li&gt;
&lt;li&gt;popularity: how many references are there to this operator?&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strike&gt;symbols&lt;/strike&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;in which derivation is each used?&lt;/li&gt;
&lt;li&gt;popularity:&amp;nbsp;how many references are there to this symbol?&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;derivations&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;popularity:&amp;nbsp;include stats -- number of steps, number of inf rules, number of expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strike&gt;expressions&lt;/strike&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;popularity:&amp;nbsp;list which derivations use which expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strike&gt;inference rules&lt;/strike&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;include number of inputs, outputs&lt;/li&gt;
&lt;li&gt;popularity:&amp;nbsp;which derivations use each inference rule?&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;li&gt;show a complete derivation&lt;/li&gt;
&lt;li&gt;edit&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;an inference rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;how to address all the places that inference rule gets used?&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;a derivation&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;edit a step&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;how to address dangling steps?&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;li&gt;an expression&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;where else is that expression used?&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;br /&gt;
functionality&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Latex to AST&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;suggest related expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Web interface&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;download pkl file&lt;/li&gt;
&lt;li&gt;upload pkl file&lt;/li&gt;
&lt;li&gt;export derivation PNG&lt;/li&gt;
&lt;li&gt;export derivation to PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;CAS integration&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;validate a single step of a derivation&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
Rendering&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;use d3.js instead of graphviz&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
visualize trace of flow&lt;br /&gt;
convert trace of flow to Selenium script&lt;br /&gt;
generate PDG website&lt;br /&gt;
&lt;br /&gt;
host on DigitalOcean droplet&lt;br /&gt;
account management&lt;br /&gt;
&lt;br /&gt;
Previous task list:&lt;br /&gt;
&lt;a href="https://physicsderivationgraph.blogspot.com/2018/07/snapshot-of-milestones-for-physics.html"&gt;https://physicsderivationgraph.blogspot.com/2018/07/snapshot-of-milestones-for-physics.html&lt;/a&gt;&lt;br /&gt;
see also&lt;br /&gt;
&lt;a href="https://physicsderivationgraph.blogspot.com/2017/06/not-getting-caught-in-details.html"&gt;https://physicsderivationgraph.blogspot.com/2017/06/not-getting-caught-in-details.html&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-10T01:54:48.785Z</blogger:created>
    <published>2020-02-10T02:09:00Z</published>
    <updated>2020-05-27T01:29:30.521Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='todo'/>
    <blogger:filename>/2020/02/todo-list.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1202704817522544300</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>more checks to perform in the Physics Derivation Graph</title>
    <content type='html'>Up until now I've only considered a single check throughout the Physics Derivation Graph: the validation of a derivation step. This validation is made by verifying that changes to the per-expression ASTs are consistent with the inference rule and feeds.&lt;br /&gt;
&lt;br /&gt;
There are other checks that can be performed.&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Symbolic consistency within an expression&lt;/b&gt;. For a given latex symbol in an expression, there can be only one numeric ID.&amp;nbsp;This could manifest within one side of an expression or across both sides.&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;If there are multiple instances of "a" on the LHS, are they all the same numeric ID?&lt;/li&gt;
&lt;li&gt;Is the symbol "a" used on the LHS the same "a" used on the RHS? For example, in the expression "a + b = a * 2", both "a" symbols must have the same numeric ID.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;b&gt;Symbolic consistency within a step.&lt;/b&gt; A step involving more than one expression must have consistent symbols. For example, given "a + b" and the inference rule "add X to both sides" where the feed is 2, the output is "a + 2 = b + 2". Is the "a" in "a + b" the same as the "a" in "a + 2 = b + 2"? Changes of variable are feasible but must be explicit&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Symbolic consistency within a derivation.&lt;/b&gt; A a given latex symbol has multiple numeric IDs in a derivation, is the change documented in an explicit inference rule or do the two cases not intersect? For example, the symbol "c" could appear as both a constant and a variable in the same derivation, but not in the same step.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Dimensional analysis.&lt;/b&gt; Variables can be dimensional. The dimensions must be consistent within an expression. As an example, adding acceleration and velocity is not allowed. See&amp;nbsp;&lt;a href="https://docs.sympy.org/latest/modules/physics/units/dimensions.html"&gt;https://docs.sympy.org/latest/modules/physics/units/dimensions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Unit consistency.&lt;/b&gt; Constants have a unit and a value. The units must be consistent when applied in an expression As an example, adding "meters per second" and "miles per hour" is not allowed even though both are speeds.&amp;nbsp; See&amp;nbsp;&lt;a href="https://docs.sympy.org/latest/modules/physics/units/unitsystem.html"&gt;https://docs.sympy.org/latest/modules/physics/units/unitsystem.html&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://docs.sympy.org/latest/modules/physics/units/examples.html#equation-with-quantities"&gt;https://docs.sympy.org/latest/modules/physics/units/examples.html#equation-with-quantities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Sympy has some of these features built in; see&amp;nbsp;&lt;a href="https://docs.sympy.org/latest/modules/physics/units/quantities.html"&gt;https://docs.sympy.org/latest/modules/physics/units/quantities.html&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
and&amp;nbsp;&lt;a href="https://docs.sympy.org/latest/modules/physics/mechanics/advanced.html"&gt;https://docs.sympy.org/latest/modules/physics/mechanics/advanced.html&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-01T11:03:18.934Z</blogger:created>
    <published>2020-05-01T11:16:00.002Z</published>
    <updated>2020-05-01T15:41:22.038Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/four-checks-to-perform-in-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1282805979188692318</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>a differnet approach to generating content for the Physics Derivation Graph</title>
    <content type='html'>I've been focused on creating the interface for the Physics Derivation Graph to enable manual entry of content. An alternative method to create content would be parsing large databases like &lt;a href="https://dumps.wikimedia.org/"&gt;Wikipedia&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
The first step would be to extract pages that contain derivations. Pages with a section title containing "derivation" and containing at least three mathematical expressions in that section would be a useful set. Suppose there are a thousand pages containing derivations which contain text+Latex.&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Side note&lt;/i&gt;:&amp;nbsp;Wikipedia "text is available under the Creative Commons Attribution-ShareAlike License."&lt;br /&gt;
&lt;br /&gt;
Given 1000 pages of text+Latex there are two nested challenges:&lt;br /&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;Between any two adjacent expressions in your data set, there are likely a bunch of missing steps.&lt;/li&gt;
&lt;li&gt;Suppose all the expressions were present. Even in that situation, the inference rules are missing. Filling in these is a big challenge.&lt;/li&gt;
&lt;/ol&gt;
&lt;br /&gt;
&lt;div&gt;
To address these challenges, text analysis would be useful. Suppose the sequence is&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;text1&lt;/li&gt;
&lt;li&gt;expression1&lt;/li&gt;
&lt;li&gt;text2&lt;/li&gt;
&lt;li&gt;expression2&lt;/li&gt;
&lt;li&gt;text3&lt;/li&gt;
&lt;li&gt;expression3&lt;/li&gt;
&lt;li&gt;text4&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
There are a few distinct categories of text to analyze:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;s1 = the last two sentences in "text1" proceeding "expression1"&lt;/li&gt;
&lt;li&gt;s(i) = if text2 and text3 are short (ie a few sentences), then they are&amp;nbsp;potential inference rules&lt;/li&gt;
&lt;li&gt;s(j) = if text2 and text3 are longer than a few sentences, then probably the two sentences following an expression and the two sentences proceeding an expression are relevant&lt;/li&gt;
&lt;li&gt;sf = the first two sentences of the "text4" which is text after the last expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
We now have 1000 instances of "s1" sentences. In this "s1" data set, what's the most common word? What's the most common two word phrase? What's the most common three word phrase? If there are things that look like inference rules, that would be interesting. I doubt that "declare initial expression" will appear, but some consistency would be validating.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Similarly, run the same word and phrase frequency analysis for the 1000 "sf" sentences. Also apply to each of "s(i)" and "s(j)."&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-21T00:18:32.330Z</blogger:created>
    <published>2018-07-21T00:41:00Z</published>
    <updated>2018-07-21T00:41:48.603Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/a-differnet-approach-to-generating.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1303412344340887426</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>converting the old derivations into the new folder structure</title>
    <content type='html'>&lt;i&gt;Context&lt;/i&gt;: this post documents a one-time fix that converts old derivations to the new convention.&lt;br /&gt;
&lt;br /&gt;
In the "version 4" implementation of the Physics Derivation Graph, there are two directories that contain Latex and PNG files of expressions and feeds:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;in the directory of the derivation, ie "proofofconcept/v4_file_per_expression/derivations/frequency period relation"&lt;/li&gt;
&lt;li&gt;in the directory containing all expressions, ie "proofofconcept/v4_file_per_expression/expressions"&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
One reason for this redundancy is to enable modification of the derivation content with disrupting the complete graph. Also, deconflicting expression index collisions doesn't need to be carried out until the derivation is verified. Lastly, I don't have an automatic method for deconflicting expression indices.&lt;br /&gt;
&lt;br /&gt;
As of today (20180618), there are the derivations which were manually created don't follow the convention of having Latex and PNG in the folder of the specific derivation. These older derivations only have the Latex and PNG in the second directory.&lt;br /&gt;
&lt;br /&gt;
In order to enable editing of existing derivations, I needed to copy expressions and feeds from the shared folder into each derivation. To do this, I started in a specific derivation folder and copied only the relevant LaTeX and PNG into the folder.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;pwd&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;proofofconcept/v4_file_per_expression/derivations/derivation of Schrodinger Eq&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;while IFS='' read -r line || [[ -n "$line" ]]; do cp ../../feeds/${line}* .; done &amp;lt; feeds.csv&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;while IFS='' read -r line || [[ -n "$line" ]]; do cp ../../expressions/${line}* .; done &amp;lt; &amp;lt;(&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;cat expression_identifiers.csv | cut -d',' -f2)&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-06-19T02:28:53.015Z</blogger:created>
    <published>2018-06-19T02:49:00.001Z</published>
    <updated>2018-06-19T12:02:27.009Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/06/converting-old-derivations-into-new.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1314753217212745705</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>editing Physics Derivation Graph on AWS EC2 Ubuntu</title>
    <content type='html'>&lt;div style="color: #222222; font-family: arial, sans-serif; font-size: small;"&gt;
I wanted to play around with EC2, and AWS offers limited compute for 1 year for free.&amp;nbsp;&lt;/div&gt;
&lt;div style="color: #222222; font-family: arial, sans-serif; font-size: small;"&gt;
&lt;span style="background-color: white;"&gt;Start here: https://aws.amazon.com/free/faqs/?ft=nf&lt;/span&gt;&lt;/div&gt;
&lt;br style="color: #222222; font-family: arial, sans-serif; font-size: small;" /&gt;
&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot; , sans-serif; font-size: x-small;"&gt;I turned on alerts for billing to prevent charges.&lt;/span&gt;&lt;br /&gt;
&lt;br style="color: #222222; font-family: arial, sans-serif; font-size: small;" /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ chmod 600 filename.pem&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ ssh -i filename.pem ubuntu@&amp;lt;IP address&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;h3&gt;
&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot; , sans-serif; font-size: x-small;"&gt;PDG on AWS&lt;/span&gt;&lt;/h3&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ sudo apt-get install git&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ git config --global user.name "&amp;lt;my name&amp;gt;"&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ git config --global user.email &amp;lt;my email address&amp;gt;&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ git config --list&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ ssh-keygen -t rsa -b 4096 -C "&amp;lt;my email address"&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot; , sans-serif; font-size: x-small;"&gt;go to https://github.com/settings/keys&lt;/span&gt;&lt;br /&gt;
&lt;br style="color: #222222; font-family: arial, sans-serif; font-size: small;" /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ ssh-add -l&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;Could not open a connection to your authentication agent.&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ eval "$(ssh-agent -s)"&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;Agent pid 2690&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ ssh-add -l&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;The agent has no identities.&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ ssh-add ~/.ssh/id_rsa&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;Identity added: /home/ubuntu/.ssh/id_rsa (/home/ubuntu/.ssh/id_rsa)&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;$ ssh-add -l&lt;/span&gt;&lt;br style="color: #222222; font-size: small;" /&gt;&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;4096 64:84:9f:91:c7:8c:7d:14:98:2a:db:05:6d:39:c8:0f /home/ubuntu/.ssh/id_rsa (RSA)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot; , sans-serif; font-size: x-small;"&gt;Validate setup:&lt;/span&gt;&lt;br /&gt;
&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ ssh -T git@github.com&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;br style="color: #222222; font-family: arial, sans-serif; font-size: small;" /&gt;
&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot; , sans-serif; font-size: x-small;"&gt;On the page&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept"&gt;https://github.com/allofphysicsgraph/proofofconcept&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot; , sans-serif; font-size: x-small;"&gt;switch from HTTPS to SSH to find the address&lt;/span&gt;&lt;br /&gt;
&lt;span style="background-color: white; color: #222222; font-size: x-small;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;git clone git@github.com:allofphysicsgraph/proofofconcept.git&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;div&gt;
&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot; , sans-serif; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2017-02-11T17:52:53.263Z</blogger:created>
    <published>2017-02-11T17:55:00Z</published>
    <updated>2017-02-11T20:23:53.310Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='AWS EC2'/>
    <blogger:filename>/2017/02/editing-physics-derivation-graph-on-aws.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1318987337649853578</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>insertions and deletions in git versus time</title>
    <content type='html'>I wanted to plot the changes in the code base with more detail than is shown on&lt;br /&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/graphs/contributors"&gt;https://github.com/allofphysicsgraph/proofofconcept/graphs/contributors&lt;/a&gt;&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjI23BcYjQaCbVBOUU7pRj3vh_WG-pQIwSOfrITXOyp0Ei2py56z9NhcB9-OnobV18u-oxBmChQlZPn-GlIm2MlI85VAzf9bXEZKlwGOypTsbSDqJXcWWJcfAP-PbytNjsSNRuF3ARwaCUw/s1600/Screen+Shot+2020-04-13+at+7.36.28+AM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="264" data-original-width="450" height="187" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjI23BcYjQaCbVBOUU7pRj3vh_WG-pQIwSOfrITXOyp0Ei2py56z9NhcB9-OnobV18u-oxBmChQlZPn-GlIm2MlI85VAzf9bXEZKlwGOypTsbSDqJXcWWJcfAP-PbytNjsSNRuF3ARwaCUw/s320/Screen+Shot+2020-04-13+at+7.36.28+AM.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
My first attempt was to use git log and grab the hash and date:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ git --no-pager log &lt;a href="https://git-scm.com/docs/pretty-formats"&gt;--pretty=format:"%H %ad"&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;....&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;6cf2a0255e4e8ac5db4eabf086f119717e650306 Sun Jan 4 11:23:28 2015 -0500&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;db738d9b246a9592c9b5dc89407d7b2587df5b6f Fri Jan 2 09:06:13 2015 -0500&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;282a80b8b346294ef1c986d7c98f02daa3b2283d Fri Jan 2 08:58:41 2015 -0500&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;....&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
I'll save that for later,&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ git --no-pager log --pretty=format:"%H %ad" &amp;gt; hash_and_dat.log&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Those two columns (hash, date) are necessary but not sufficient -- I also need the number of lines changed.&lt;br /&gt;
&lt;br /&gt;
I saw that "&lt;a href="https://git-scm.com/docs/git-show"&gt;git show&lt;/a&gt;" produces the specific changes per commit, so I could combine that with grep&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ git show 46d4649074e34019b336d13838564db90790eba6 | grep -v ^+++ | grep ^+ | wc -l&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;130&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ git show 46d4649074e34019b336d13838564db90790eba6 | grep -v ^--- | grep ^- | wc -l&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 20&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
It would be better to put the two numbers on the same line, something like&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ removed=`git show 46d4649074e34019b336d13838564db90790eba6 | grep -v ^--- | grep ^- | wc -l`; added=`git show 46d4649074e34019b336d13838564db90790eba6 | grep -v ^+++ | grep ^+ | wc -l`; echo $removed $added&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;20 130&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Then I stumbled onto &lt;a href="https://stackoverflow.com/a/53127502/1164295"&gt;https://stackoverflow.com/a/53127502/1164295&lt;/a&gt; which has almost what I wanted.&amp;nbsp;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: inherit;"&gt;I ran into a problem,&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;git diff --shortstat d2d48dcde6e04306d79f2270cdefbb846b0c6a4b | sed -E 's/[^[:digit:][:space:]]//g'&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;warning: inexact rename detection was skipped due to too many files.&lt;/span&gt;&lt;/div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
&lt;/span&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;warning: you may want to set your diff.renameLimit variable to at least 2154 and retry the command.&lt;/span&gt;&lt;/div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
&lt;div&gt;
91015&lt;/div&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
I found the fix on&amp;nbsp;https://stackoverflow.com/a/28064699/1164295 and ran&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;git config&amp;nbsp; diff.renameLimit 2154&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I made some alterations since I care about both the additions and removals&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ git diff --shortstat d2d48dcde6e04306d79f2270cdefbb846b0c6a4b | sed -E 's/[^[:digit:][:space:]]//g' | awk '{print $2 " " $3}' 66283 19430&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Which can be written as a function,&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ function gcount() {&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; git diff --shortstat $1 | sed -E 's/[^[:digit:][:space:]]//g' | awk '{ print $2 " " $3 }'&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Then I ran this loop:&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ git log --pretty=format:"%H %ad" | while read hash&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;do&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; this_hash=`echo $hash | cut -f1`&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; this_date=`echo $hash | cut -d' ' -f3-`&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; echo "$(gcount $this_hash)" $this_date&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;done &amp;gt; insertions_deletions_date.log&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-13T11:14:40.506Z</blogger:created>
    <published>2020-04-13T13:05:00.002Z</published>
    <updated>2020-04-13T13:06:12.560Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/insertions-and-deletions-in-git-versus.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1328771712549950502</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>parsing latex using Sympy - what works and what does not</title>
    <content type='html'>&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;# python&lt;br /&gt;Python 3.6.9 (default, Apr 18 2020, 01:56:04)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('a = b')&lt;br /&gt;Eq(a, b)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('\\frac{\\partial}{\\partial t} \\psi( r,t)')&lt;br /&gt;Derivative(\psi(r, t), t)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('\\int_{a}^{b} f(x) dx')&lt;br /&gt;Integral(f(x), (x, a, b))&lt;/span&gt;&lt;br /&gt;To can check that the Sympy expression gets converted to Latex correctly:&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy import *&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; sympy.latex(parse_latex('\\int_{a}^{b} f(x) dx'))&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;vectors do not get parsed correctly&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('\\vec{a} = \\vec{g} t')&lt;/span&gt;&lt;br /&gt;see https://docs.sympy.org/latest/modules/vector/index.html&lt;br /&gt;Similarly,&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('\\hat{x} + \\hat{y}')&lt;/span&gt;&lt;br /&gt;The "hat" is typically used for unit vectors. These are referenced in&lt;br /&gt;https://docs.sympy.org/latest/modules/physics/vector/vectors.html&lt;br /&gt;but I don't see a Sympy-specific notation for unit vectors.&lt;br /&gt;&lt;br /&gt;bra-ket notation does not raise an exception but is not interpreted correctly&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('\\langle \\alpha | = 1')&lt;/span&gt;&lt;br /&gt;see https://docs.sympy.org/latest/modules/physics/quantum/state.html&lt;br /&gt;&lt;br /&gt;The following triggers an exception&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('\\mathcal{H} = 5')&lt;/span&gt;&lt;br /&gt;For a discussion of that symbol in Latex, see https://tex.stackexchange.com/questions/429749/two-different-mathcalh&lt;br /&gt;https://docs.sympy.org/latest/modules/physics/quantum/hilbert.html&lt;br /&gt;&lt;br /&gt;Complex conjugation notation is not interpreted correctly:&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('Z Z^* = 5')&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-06-25T01:25:32.716Z</blogger:created>
    <published>2020-06-25T01:28:00.002Z</published>
    <updated>2020-06-25T01:28:40.909Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/06/parsing-latex-using-sympy-what-works.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1396435214276330716</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>building content for the Physics Derivation Graph</title>
    <content type='html'>Update 20190728: this content has been copied to &lt;a href="https://physicsderivationgraph.blogspot.com/2017/07/finding-edges-for-physics-derivation.html"&gt;this page&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
I've decided to focus on building content for the Physics Derivation Graph. Since I don't think it's reasonable to enter all the mathematical physics content manually on my own, in this post I'll define some bounds.&lt;br /&gt;
&lt;br /&gt;
There are expressions, domains, and notations that need to be included to demonstrate the comprehensive nature of the project and the capability of the framework.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;table border="2" cellpadding="1" cellspacing="1"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Expressions&lt;/th&gt;&lt;th&gt;Domains&lt;/th&gt;&lt;th&gt;Notation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation"&gt;Schrodinger's equation&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Quantum&lt;/td&gt;&lt;td&gt;Dirac/bra-ket&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;br /&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;integration&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Maxwell's equations&lt;/td&gt;&lt;td&gt;Electromagnetics&lt;/td&gt;&lt;td&gt;differentiation&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;contravariant/covariant&lt;/td&gt;&lt;td&gt;Electrodynamics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations"&gt;Navier Stokes&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Fluid Mechanics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;mass-energy relation&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;Special Relativity&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;Thermodynamics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Uncertainty relation&lt;/td&gt;&lt;td&gt;Quantum Mechanics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;energy conservation&lt;/td&gt;&lt;td&gt;classical mechanics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;string theory&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;wave equation&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;statistical mechanics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;aerodynamics&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;a href="http://ocw.mit.edu/courses/nuclear-engineering/22-51-quantum-theory-of-radiation-interactions-fall-2012/lecture-notes/MIT22_51F12_Ch9.pdf"&gt;simple harmonic oscillator&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;!--
&lt;tr&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
--&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;div&gt;
Other comprehensive lists of "things to know" in Physics&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://www.staff.science.uu.nl/~gadda001/goodtheorist/"&gt;https://www.staff.science.uu.nl/~gadda001/goodtheorist/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://news.ycombinator.com/item?id=10714048"&gt;https://news.ycombinator.com/item?id=10714048&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://www.physics.uoguelph.ca/poisson/research/notes.html"&gt;http://www.physics.uoguelph.ca/poisson/research/notes.html&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://www.physics.uoguelph.ca/poisson/research/mech.pdf"&gt;https://www.physics.uoguelph.ca/poisson/research/mech.pdf&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://theoreticalminimum.com/courses"&gt;http://theoreticalminimum.com/courses&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/wiki/All-Branches-of-Physics"&gt;https://github.com/allofphysicsgraph/proofofconcept/wiki/All-Branches-of-Physics&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-12-12T02:37:12.125Z</blogger:created>
    <published>2015-12-12T02:59:00.003Z</published>
    <updated>2019-07-28T20:17:09.076Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/12/building-content-for-physics-derivation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1423312715403629684</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Flask and Docker</title>
    <content type='html'>I wanted to improve the portability of the &lt;a href="https://allofphysicsgraph.github.io/proofofconcept/site/derivations.html"&gt;Physics Derivation Graph&lt;/a&gt;, and I recognized the value of &lt;a href="https://physicsderivationgraph.blogspot.com/2018/06/building-docker-image-for-physics.html"&gt;putting the code in a Docker image&lt;/a&gt;. As a Docker image, anyone would be able to get started with editing and contributing quickly rather than resolving software dependencies.&lt;br /&gt;
&lt;br /&gt;
In addition to improving portability, I also recognize a command-line interface is not sufficient for most users. With the code in a Docker image, another useful change would be to run a webserver in the container. The web server could both display the current state and be the interface for making edits to the content.&lt;br /&gt;
&lt;br /&gt;
I have heard of nginx but not used it. Another option is&amp;nbsp;lighttpd; I haven't used that either. While either of these two options would be sufficient for running static HTML content or something interactive (eg PHP or cgi), my backend code is currently Python. Therefore, I think Flask is a reasonable choice for presenting a web interface and enabling edits to the database.&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Update&lt;/i&gt; &lt;b&gt;20200512&lt;/b&gt;: good explanation of the relevance of Nginx:&amp;nbsp;&lt;a href="https://rushter.com/blog/gunicorn-and-low-and-slow-attacks/"&gt;https://rushter.com/blog/gunicorn-and-low-and-slow-attacks/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Update &lt;/i&gt;&lt;b&gt;20190602&lt;/b&gt;&lt;i&gt;:&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd&lt;/span&gt; to your local copy of&lt;br /&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/sandbox/docker_images/flask_ubuntu"&gt;https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/sandbox/docker_images/flask_ubuntu&lt;/a&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker build -t flask_ub:latest .&lt;/span&gt;&lt;br /&gt;
To run interactively and manually, use&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker run -it --publish 5000:5000 --mount type=bind,source="$(pwd)",target=/another --entrypoint /bin/bash flask_ub&lt;/span&gt;&lt;br /&gt;
and then run&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;python3 app/controller.py&lt;/span&gt;&lt;br /&gt;
inside the Docker container.&amp;nbsp; To run interactively automatically, use&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker run -it --publish 5000:5000 flask_ub&lt;/span&gt;&lt;br /&gt;
In either case, navigate your browser to &lt;a href="http://localhost:5000/"&gt;http://localhost:5000&lt;/a&gt; to use the interface.</content>
    <blogger:metaDescription/>
    <blogger:created>2019-05-25T15:23:34.684Z</blogger:created>
    <published>2019-05-25T15:35:00Z</published>
    <updated>2020-05-13T01:25:04.629Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='nginx'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='html'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='flask'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='docker'/>
    <blogger:filename>/2019/05/flask-and-docker.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1431273669391022636</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>similar projects</title>
    <content type='html'>&lt;br /&gt;
Map of Mathematics by topic&lt;br /&gt;
&lt;a href="https://www.quantamagazine.org/the-map-of-mathematics-20200213/"&gt;https://www.quantamagazine.org/the-map-of-mathematics-20200213/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://news.ycombinator.com/item?id=22328516"&gt;https://news.ycombinator.com/item?id=22328516&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-17T18:13:47.321Z</blogger:created>
    <published>2020-02-17T18:14:00.001Z</published>
    <updated>2020-02-17T18:14:42.353Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/02/similar-projects.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1454947996170767343</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>analyzing the text of Wikipedia posts</title>
    <content type='html'>&lt;div&gt;
In a previous post, an &lt;a href="https://physicsderivationgraph.blogspot.com/2018/07/a-differnet-approach-to-generating.html"&gt;outline for analyzing Wikipedia content&lt;/a&gt; was described. In this post, I document a few initial observations about the data collected from Wikipedia.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Searching for "derivation" as a section marker means searching for "=== Derivation ===". There are other meanings to derivation, so sometimes the results include non-mathematical content like "=== Derivation and other names ===". To filter out irrelevant content, only sections with mathematical expressions (ie ":&amp;amp;lt;math&amp;amp;gt;") are relevant.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
In addition to the text, there are potentially relevant images like&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
https://en.wikipedia.org/wiki/File:Derivation_of_acoustic_wave_equation.png&lt;/div&gt;
&lt;div&gt;
which has dimensions 813 × 570 pixels. Pictures with "derivation" in the name and dimensions greater than 300 x 300 might be relevant.&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
In the "derivation" section, lines that start with ":&amp;amp;lt;math&amp;amp;gt;" in the text are expressions. The closing bracket "&amp;amp;lt;/math&amp;amp;gt;" may occur on a following line.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-21T01:50:47.716Z</blogger:created>
    <published>2018-07-21T01:59:00.002Z</published>
    <updated>2018-07-21T01:59:40.160Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/analyzing-text-of-wikipedia-posts.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1476878198038265052</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>histogram of expression lengths in bash</title>
    <content type='html'>Reading the JSON as text does not work since there are multiple entries that have the key "latex"
&lt;br /&gt;
&lt;pre&gt; cat data.json | grep "            \"latex\":"
&lt;/pre&gt;
&lt;br /&gt;
So I decided to read JSON into Python on command line&lt;br /&gt;
&lt;a href="https://www.cambus.net/parsing-json-from-command-line-using-python/"&gt;https://www.cambus.net/parsing-json-from-command-line-using-python/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
That worked but I learned that handling for loops in command line requires extra work&lt;br /&gt;
&lt;a href="https://stackoverflow.com/questions/2043453/executing-multi-line-statements-in-the-one-line-command-line"&gt;https://stackoverflow.com/questions/2043453/executing-multi-line-statements-in-the-one-line-command-line&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Once I knew the length of the values, I added a leading zero&lt;br /&gt;
&lt;a href="https://stackoverflow.com/questions/21620602/add-leading-zero-python"&gt;https://stackoverflow.com/questions/21620602/add-leading-zero-python&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Then I used cut to eliminate the last digit (so the histogram bin size is 10).&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;pre&gt;cat data.json |\&lt;/pre&gt;
&lt;pre&gt;   python -c "exec(\"import sys, json; expr=json.load(sys.stdin)['expressions'];\nfor i,d in expr.items(): print(str(len(d['latex'])).zfill(3))\")" |\&lt;/pre&gt;
&lt;pre&gt;   sort -n |\&lt;/pre&gt;
&lt;pre&gt;   cut -c1-2 |\&lt;/pre&gt;
&lt;pre&gt;   uniq -c
 127 00
  63 01
  75 02
  54 03
  34 04
  28 05
  17 06
  18 07
  14 08
  15 09
  11 10
  10 11
   6 12
   5 13
   2 14
   1 15
   1 16
   1 18
   1 20
   2 23
   1 27
&lt;/pre&gt;
&lt;br /&gt;
The longest expressions&lt;br /&gt;
&lt;pre&gt;cat data.json |\&lt;/pre&gt;
&lt;pre&gt;   python -c "exec(\"import sys, json; expr=json.load(sys.stdin)['expressions'];\nfor i,d in expr.items(): print(len(d['latex']))\")" |\&lt;/pre&gt;
&lt;pre&gt;   sort -n |\&lt;/pre&gt;
&lt;pre&gt;   tail -n 5
186
201
231
233
271
&lt;/pre&gt;
&lt;br /&gt;
The shortest expressions&lt;br /&gt;
&lt;pre&gt;cat data.json |\&lt;/pre&gt;
&lt;pre&gt;   python -c "exec(\"import sys, json; expr=json.load(sys.stdin)['expressions'];\nfor i,d in expr.items(): print(len(d['latex']))\")" |\&lt;/pre&gt;
&lt;pre&gt;   sort -n |\&lt;/pre&gt;
&lt;pre&gt;   head -n 5
1
1
1
1
1
&lt;/pre&gt;
&lt;br /&gt;
&lt;br /&gt;
Similarly, we can get the popularity of inference rules&lt;br /&gt;
&lt;pre&gt;cat data.json |\&lt;/pre&gt;
&lt;pre&gt;   grep "inf rule" |\&lt;/pre&gt;
&lt;pre&gt;   sed 's/"inf rule": //' |\&lt;/pre&gt;
&lt;pre&gt;   tr -s " " |\&lt;/pre&gt;
&lt;pre&gt;   sort |\&lt;/pre&gt;
&lt;pre&gt;   uniq -c |\&lt;/pre&gt;
&lt;pre&gt;   sort -n |\&lt;/pre&gt;
&lt;pre&gt;   tail -n 10
  11  "substitute X for Y",
  12  "declare identity",
  13  "subtract X from both sides",
  14  "declare variable replacement",
  20  "declare final expr",
  21  "divide both sides by",
  21  "substitute LHS of expr 1 into expr 2",
  31  "simplify",
  31  "substitute RHS of expr 1 into expr 2",
  54  "declare initial expr",

&lt;/pre&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-10T11:51:44.871Z</blogger:created>
    <published>2020-05-10T11:59:00.001Z</published>
    <updated>2020-05-10T12:06:23.383Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/histogram-of-equation-lengths-in-bash.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1498138943865171086</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>old undated project goals</title>
    <content type='html'>&lt;p&gt;This page content is from two migrations, most recently&amp;nbsp;&lt;a href="https://sites.google.com/site/physicsderivationgraph/goals"&gt;https://sites.google.com/site/physicsderivationgraph/goals&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I don't know the original date of this post&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Objectives&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 20px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create a framework capable of describing all mathematics needed for physics derivations. I use Latex as the syntax in the framework because &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/LaTeX" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Latex&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; is how I think of equations. However, Latex is insufficient for processing by &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Computer_algebra_system" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;computer algebra systems&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. Status: proof of concept exists&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create machine-readable databases which use the above framework to capture the mathematical derivations in physics. To hold the content of the databases I'm using custom &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/XML" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;XML&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. Status: proof of concept exists&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create graphical representation of relations content in the databases. I'm using &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Graphviz" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;GraphViz&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; to render the visualization. Status: proof of concept works&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Use a &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Computer_algebra_system" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;computer algebra system&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; to verify the relations in the databases. I'm using SymPy as the CAS (see also &lt;/span&gt;&lt;a href="https://en.m.wikipedia.org/wiki/List_of_computer_algebra_systems" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;a list of candidates&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;). Status: proof of concept works.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create a &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Web_browser" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;web browser&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;-based viewing of the generated graph. &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/HTML5" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;HTML5&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; seems capable. Status: investigated, not started&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create a &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Web_browser" style="text-decoration-line: none;"&gt;&lt;span style="color: #006580; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;web browser&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;-based graph input tool. Status: not started&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The above workflow applies to both CLI and web-based GUI. Implementing a web-based GUI is its own learning curve, so separate the above workflow diagram into two sets of tasks. The following applies to both web-based GUI and CLI.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 9pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Tasks&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 20px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;user adds content to internal data structure (user --&amp;gt; IDS)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;write content to external database from internal data structure (IDS --&amp;gt; DB)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;read content from external database into internal data structure (IDS &amp;lt;-- DB)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;render internal data structure as visual graph (IDS --&amp;gt; graph)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: square; margin-left: 7.5pt; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 4.5pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;check internal data structure content using CAS (IDS --&amp;gt; CAS)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 9pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Currently (20140527) what I'm actually doing is (user --&amp;gt; DB) and (DB --&amp;gt; graph)&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 9pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Rant 1: historical progress&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 9pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;How we do math and physics has undergone some historical transitions in how the process is carried out.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 9pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Initially research was done by individuals by paper and pen, then communicated via letters and later journals. &amp;lt;claim&amp;gt;Mechanical computers were initially used for computation of known capability, rather than enabling novel research. &amp;lt;/claim&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 9pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In the past 50 years, electronic computers have enabled numeric and symbolic computation. High performance computers at large scale allow for research at unprecedented pace. Results in article form are still communicated via printed journals, and more recently, electronically. Sharing data and algorithms in electronic format is the current revolution.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.6667; margin-bottom: 0pt; margin-top: 9pt;"&gt;&lt;span style="color: #212121; font-family: Lato; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The tools we use have expanded from paper and pen to Computer Algebra Systems, databases, and programming languages. &lt;/span&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-02-09T02:23:52.047Z</blogger:created>
    <published>2022-02-09T02:26:00.004Z</published>
    <updated>2022-02-09T02:27:30.627Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='migrated_from_physicsderivationgraph'/>
    <blogger:filename>/2022/02/old-undated-project-goals.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1503422522391043064</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>finding cranks using the Physics Derivation Graph</title>
    <content type='html'>One of the applications of the Physics Derivation Graph would be to detect cranks. Existing methods include &lt;a href="http://math.ucr.edu/home/baez/crackpot.html"&gt;crackpot scoring&lt;/a&gt;, proposed by John Baez. Gerard 't Hooft provides &lt;a href="https://www.staff.science.uu.nl/~hooft101/theoristbad.html"&gt;an outline and description of bad theorists&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
There's plenty of content which smells of crackpots, ie &lt;a href="http://atomicprecision.com/OmniaOpera/omnia-opera-655.pdf"&gt;http://atomicprecision.com/OmniaOpera/omnia-opera-655.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
The Physics Derivation Graph enables a more rigorous approach for identifying both mathematical steps and assumptions.</content>
    <blogger:metaDescription/>
    <blogger:created>2017-07-04T15:12:06.477Z</blogger:created>
    <published>2017-07-06T00:36:00.001Z</published>
    <updated>2017-07-06T00:41:25.190Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/07/finding-cranks-using-physics-derivation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1584534437498220656</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>quantum bra ket Dirac notation in Sympy</title>
    <content type='html'>Quantum mechanics notation is supported in SymPy, but not for parsing Latex input.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.__version__&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;'1.5.1'&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex("\\langle a |"))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"Mul(Symbol('a'), Symbol('langle'))"&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
That isn't what I intended.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.quantum.state import Ket, Bra&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.latex(Bra('a'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;'{\\left\\langle a\\right|}'&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
SymPy can produce Latex; can it then parse that?&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex("{\\left\\langle a\\right|}"))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; ...&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; File "/usr/local/lib/python3.6/dist-packages/sympy/parsing/latex/_parse_latex_antlr.py", line 57, in syntaxError&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; raise LaTeXParsingError(err)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;sympy.parsing.latex.errors.LaTeXParsingError: I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;{\left\langle a\right|}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;~~~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I've opened a ticket&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://github.com/sympy/sympy/issues/19854"&gt;https://github.com/sympy/sympy/issues/19854&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
A good amount of Dirac notation is supported in Sympy:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.quantum import Operator, Dagger&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.latex(Bra('a')*Dagger(Operator('A'))*Ket('b'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;{\left\langle a\right|} A^{\dagger} {\left|b\right\rangle }&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.latex(sympy.Symbol('alpha')*Bra('pdg1')*Ket('pdg2'))&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;'\\alpha {\\left\\langle pdg_{1}\\right|} {\\left|pdg_{2}\\right\\rangle }'&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-29T13:00:48.162Z</blogger:created>
    <published>2020-07-29T13:21:00.004Z</published>
    <updated>2020-07-29T13:41:51.801Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/quantum-bra-ket-dirac-notation-in-sympy.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1645260066628753943</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>visualize success and then deliver the minimum viable product</title>
    <content type='html'>Today I applied two principles and made tremendous progress. First, I thought about what success meant for the Physics Derivation Graph. The central claim is that mathematical physics can be represented as a single graph. My insight was that I should simply focus on that. The second principle was determining the&amp;nbsp;minimum viable product to&amp;nbsp;achieve&amp;nbsp;that vision of success.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
The outcome is a hyperlinked SVG of concepts and topics:&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://allofphysicsgraph.github.io/proofofconcept/site/sandbox/topic_and_concept_graph.svg"&gt;http://allofphysicsgraph.github.io/proofofconcept/site/sandbox/topic_and_concept_graph.svg&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
This is a map of topics (ie Quantum Mechanics) and concepts (ie Schrodinger's Equation) in Physics.&lt;br /&gt;
&lt;br /&gt;
I've drawn edges between concepts where there exists a paper detailing the mathematical connection&lt;br /&gt;
&lt;br /&gt;
In the SVG, edges which are bold can be clicked to see the referenced URL&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
There's an equivalent PNG, but the hyperlinks aren't active:&lt;br /&gt;
&lt;a href="http://allofphysicsgraph.github.io/proofofconcept/site/sandbox/topic_and_concept_graph.png"&gt;http://allofphysicsgraph.github.io/proofofconcept/site/sandbox/topic_and_concept_graph.png&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
The point of this graph is that&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;the major topics in Physics are present&lt;/li&gt;
&lt;li&gt;the major topics are linked to associated concepts&lt;/li&gt;
&lt;li&gt;there are mathematical links between the concepts&lt;/li&gt;
&lt;/ol&gt;
The remaining work is to
&lt;br /&gt;
4) fill in with additional concepts so that there is a path from any blue box (topic) to any other blue box through only red ellipses (concepts). Then the claim will be validated in theory.&amp;nbsp;
&lt;br /&gt;
5) After that, go back and fill in the actual math using expressions and inference rules.&amp;nbsp;
&lt;br /&gt;
&lt;br /&gt;
6) Verify correctness of steps using a CAS&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;break Latex expressions into constituent symbols and operators (&lt;a href="https://www.cs.rit.edu/~rlaz/files/mathSurvey.pdf"&gt;ref 1&lt;/a&gt;, &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.198.8849&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;ref 2&lt;/a&gt;, &lt;a href="http://tex.stackexchange.com/questions/4223/what-parsers-for-latex-mathematics-exist-outside-of-the-tex-engines"&gt;ref 3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Then I'm done!&lt;/i&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
The PDG isn't "complete" in accounting for all of Physics, but I didn't expect to go that far. Showing complete coverage of topics is sufficient.
</content>
    <blogger:metaDescription/>
    <blogger:created>2016-05-28T01:15:22.926Z</blogger:created>
    <published>2016-05-28T01:19:00.002Z</published>
    <updated>2020-02-10T02:13:08.116Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/05/visualize-success-and-then-deliver.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1671349709390987896</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>visualization of step validation; 271 steps to address</title>
    <content type='html'>I created a page listing all the steps from every derivation. The utility is that I can summarize how many steps are valid (180 out of 638, or 28%), how many are declarations and assumptions (179+8, or 29%), and how many fail or are not checked -- the remaining 40%.&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjIaVBQl-ttV-zCIw567SC2-pu0zRIzvXV4_6DPcSaO9x5c6aKKqZeTF1ZmOvyZxQh3SKlN5cx75UnrvAkhY_4Zwtz2KM2YxnPTRsbE5Nq1v-6aPBeCX2WEt_At7z0-F6fTPcsCgD4BOpql/s1600/Screen+Shot+2020-08-29+at+11.21.53+PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="275" data-original-width="1006" height="174" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjIaVBQl-ttV-zCIw567SC2-pu0zRIzvXV4_6DPcSaO9x5c6aKKqZeTF1ZmOvyZxQh3SKlN5cx75UnrvAkhY_4Zwtz2KM2YxnPTRsbE5Nq1v-6aPBeCX2WEt_At7z0-F6fTPcsCgD4BOpql/s640/Screen+Shot+2020-08-29+at+11.21.53+PM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;br /&gt;
My plan is to work on addressing the&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;638-(180+179+8)=&lt;b&gt;271&lt;/b&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
failed or unchecked expressions.&lt;br /&gt;
&lt;br /&gt;
I expect SymPy doesn't support all the inference rules, so I need a way to categorize that issue.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-30T03:16:52.700Z</blogger:created>
    <published>2020-08-30T03:22:00.005Z</published>
    <updated>2020-09-20T19:44:04.696Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='visualization'/>
    <blogger:filename>/2020/08/i-created-page-listing-all-steps-from.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1714980898751149424</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>use the inputs and inference rule to generate the output</title>
    <content type='html'>&lt;p&gt;Instead of expecting the user to provide the inputs and outputs and inference rule, supplying the inputs and inference rule is sufficient to generate the output. This output is necessarily consistent with the inputs and inference rule.&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy import *
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Define an inference rule&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
def mult_both_sides_by(expr, feed):&lt;br /&gt;&amp;nbsp; &amp;nbsp; return Equality(expr.lhs*feed, expr.rhs*feed, evaluate=False)&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; expr = parse_latex('a = b')&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; feed = parse_latex('f')&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; mult_both_sides_by(expr, feed)&lt;br /&gt;
Eq(a*f, b*f)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;This generalizes to include the relation&lt;/p&gt;&lt;p&gt;

&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
def mult_both_sides_by(expr, feed, relation):&lt;br /&gt;&amp;nbsp; &amp;nbsp; return relation(expr.lhs*feed, expr.rhs*feed, evaluate=False)&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; mult_both_sides_by(expr, feed, Equality)&lt;br /&gt;
Eq(a*f, b*f)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Other relations are available; see https://docs.sympy.org/latest/modules/core.html&lt;br /&gt;&lt;span style="font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; mult_both_sides_by(expr, feed, Le)&lt;br /&gt;
a*f &amp;lt;= b*f&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-20T22:46:11.897Z</blogger:created>
    <published>2020-09-20T22:51:00Z</published>
    <updated>2020-09-20T22:51:04.779Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/09/use-inputs-and-inference-rule-to.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1741787516758023866</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>LatexML for converting Latex math to Content MathML</title>
    <content type='html'>Rather than &lt;a href="https://github.com/allofphysicsgraph/latexml"&gt;creating a Dockerfile&lt;/a&gt;, here's a one-liner:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker run -it --rm phusion/baseimage:0.11 /bin/bash -c "apt update &amp;amp;&amp;amp; apt install -y latexml libtext-unidecode-perl &amp;amp;&amp;amp; latexmlmath --cmml=- A \\cdot B"&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
The downside is that if you got the command wrong, the complete build process is necessary.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Here are two examples of LatexML converting Latex math into Content MathML:&lt;br /&gt;
&lt;br /&gt;
First, the quadratic formula (which features some ambiguity)&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;latexmlmath --cmml=- \\frac{b\\pm\\sqrt{b^2-4ac}}{2a}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;math xmlns="http://www.w3.org/1998/Math/MathML" alttext="\frac{b\pm\sqrt{b^{2}-4ac}}{2a}" display="block"&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;divide/&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;csymbol cd="latexml"&amp;gt;plus-or-minus&amp;lt;/csymbol&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;𝑏&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;root/&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;minus/&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;csymbol cd="ambiguous"&amp;gt;superscript&amp;lt;/csymbol&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;𝑏&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;cn type="integer"&amp;gt;2&amp;lt;/cn&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;times/&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;cn type="integer"&amp;gt;4&amp;lt;/cn&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;𝑎&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;𝑐&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;times/&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;cn type="integer"&amp;gt;2&amp;lt;/cn&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;𝑎&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/math&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
The following Latex math is ambiguous, so LatexML is not able to do much.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;latexmlmath --cmml=- A \\cdot B&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;math xmlns="http://www.w3.org/1998/Math/MathML" alttext="A\cdot B" display="block"&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;⋅&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;𝐴&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;ci&amp;gt;𝐵&amp;lt;/ci&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;/apply&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/math&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-28T00:29:57.228Z</blogger:created>
    <published>2020-07-28T00:45:00.001Z</published>
    <updated>2020-08-09T18:53:45.653Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/latexml-for-converting-latex-math-to.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1757625425990549980</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>significant changes to the Physics Derivation Graph</title>
    <content type='html'>This weekend I initiated a significant rewrite of the Physics Derivation Graph.&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;I revised the data structures, the level of details present in the data structure, and how the data structure is accessed.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;I also better understand the model-view-controller paradigm; this led to a better workflow.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;I improved the logging used in the Python code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Improved Data Structures&lt;/h3&gt;
&lt;div&gt;
I've investigated many different file formats (XML, CSV, plain text, SQL), each of which impose different constraints on the data structure, as well as imposing a translation between the file format and the representation internal to Python. I recently arrived at the insight that I could avoid both file format choices and the associated translation work by using Python's serialization -- the &lt;a href="https://docs.python.org/3/library/pickle.html"&gt;pickles module&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
In addition to eliminating work associated with translation, it freed my cognitive focus. This second aspect was vital as it led to improved mental agility in analyzing other options. Once I didn't have to worry about choosing the best file format, I could identify what work would lead to rapid progress.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The first big change was having a single data structure (the dictionary "dat") which had all the other data structures (expressions, inference rules, derivations) as keys. Each of those was initially a list of dictionaries, but this proved to be cumbersome in implementing data access. I realized I could leverage the unique identifiers present in the Physics Derivation Graph as keys. That lead to a dictionary (top level "dat") of dictionaries (expressions, inference rules, derivations) of dictionaries (each expression, each inference rule, each derivation, respectively). While this may sound messy, accessing specific elements of the PDG is now much easier.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Motivated by a conversation about how the PDG will integrate with a Computer algebra system, I decided to include a few additional keys in the top level data structure.

Enabling validation of steps requires supporting a computer algebra system (CAS). To enable an arbitrary choice of CAS, I need to support abstract syntax trees (ASTs). To enable an AST, I need to define symbols and operators.  To enable symbols, I need units and measures. To summarize, I now track the following:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;derivations&lt;/li&gt;
&lt;li&gt;expressions&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;latex&lt;/li&gt;
&lt;li&gt;AST&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;inference rules&lt;/li&gt;
&lt;li&gt;symbols&lt;/li&gt;
&lt;li&gt;operators&lt;/li&gt;
&lt;li&gt;units&lt;/li&gt;
&lt;li&gt;measures&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
Improved understanding of the model-view-controller paradigm&lt;/h3&gt;
&lt;div&gt;
Previously I had web form actions that led to a follow-on page. While technically possible, this turned out to be a bad decision. The problems are in tracking state (which variables get passed between pages) and poor visibility on the state changes. I updated the web forms to pass their action back to the "controller.py" which maintains both the variable passing and flow control (which page calls another page).&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
By adhering to the model-view-controller paradigm, troubleshooting and implementation were made much easier. This ease resulted in faster implementation of ideas.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
Improved logging in Python&lt;/h3&gt;
&lt;div&gt;
I use print statements throughout my code to help in troubleshooting. There are different categories of print statements: trace, debug, error. These are now present in (almost) every print statement. I've also included the name of the file (either "compute" or "controller") in print statements, as well as the function the print statement is in. These changes help track the state of the application.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-02T19:37:45.428Z</blogger:created>
    <published>2020-02-02T19:58:00.003Z</published>
    <updated>2020-02-02T19:58:53.627Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='mvc'/>
    <blogger:filename>/2020/02/significant-changes-to-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1760366943609437275</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>abstract syntax trees and inference rules</title>
    <content type='html'>The Physics Derivation Graph is composed of inference rules and mathematical expressions. Inference rules describe how to get from one expression to another.&lt;br /&gt;
&lt;br /&gt;
In this post I first show that expressions can be represented as abstract syntax trees. Then I show that inference rules are effectively transformations applied to abstract syntax trees.&lt;br /&gt;
&lt;br /&gt;
&lt;div&gt;
First I'll illustrate that every expression in the Physics Derivation Graph can be represented as an &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;abstract syntax tree&lt;/a&gt;. For example, the expression&lt;/div&gt;
&lt;div&gt;
a+b = c&lt;/div&gt;
&lt;div&gt;
would be represented as&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhwvSD8B5aUYVdVMqiogytLrkLfGgIeoM-xFAzDzhXquD7jnCR53YFQ6zsNAvjq5CSETzX_NfkLiVQz-UinGFWmKELezEq8M47ut-Zjnzko8ImR0Iv8vHp3-7txJKyWkLBV5J3ZYfp6z5sh/s1600/abstract+syntax+tree+for+a%252Bb%253Dc.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="164" data-original-width="157" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhwvSD8B5aUYVdVMqiogytLrkLfGgIeoM-xFAzDzhXquD7jnCR53YFQ6zsNAvjq5CSETzX_NfkLiVQz-UinGFWmKELezEq8M47ut-Zjnzko8ImR0Iv8vHp3-7txJKyWkLBV5J3ZYfp6z5sh/s1600/abstract+syntax+tree+for+a%252Bb%253Dc.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
An example of an inference rules in the Physics Derivation Graph is, "add 2 to both sides of the expression." In this example the value 2 is a "feed" to the inference rule and the inference rule operates against a single expression.&lt;br /&gt;
&lt;br /&gt;
Writing the inference rule as a function,&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;output_expression&amp;gt; = add_x_to_both_sides( &amp;lt;feed value&amp;gt;, &amp;lt;input_expression&amp;gt; )&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Applying the inference rule "add 2 to both sides of the expression" yields&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgAd8EE2aTEbo-V0KHliOjjR4DWW4NhkDk2vDEam_zdOePYqzlt8wM7C598OCYG5VcLTzhtWTfLN_8YKFYwMAmY9JhiqVt7w36xPYp_-xpnw5CgUGiRSI4daeYYONfRjb5VEt6MWlp636-4/s1600/abstract+syntax+tree+for+a%252Bb%252B2%253Dc%252B2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="232" data-original-width="215" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgAd8EE2aTEbo-V0KHliOjjR4DWW4NhkDk2vDEam_zdOePYqzlt8wM7C598OCYG5VcLTzhtWTfLN_8YKFYwMAmY9JhiqVt7w36xPYp_-xpnw5CgUGiRSI4daeYYONfRjb5VEt6MWlp636-4/s1600/abstract+syntax+tree+for+a%252Bb%252B2%253Dc%252B2.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
The "add __ to both sides of the expression" inference rule essentially means transform input&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
LHS = RHS&lt;/div&gt;
&lt;div&gt;
to&lt;/div&gt;
&lt;div&gt;
LHS&amp;nbsp;+ __ = RHS&amp;nbsp;+ __&lt;/div&gt;
&lt;div&gt;
or, in terms of transforming an abstract syntax tree,&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEipR7fdi02LNKPfq0jpIcCo2EalV6rfSb9_isCj_EZmshgyUxKYBUyAPU5Y4HptNl7RP5SLmCX7y0BljGAlG5Z_snkK3wknIKnBZTF5qJPQ7DpJYbnRxOHe3-hIaUQPQxYThI7XWNsSM2mB/s1600/abstract+syntax+tree+for+add+__+to+both+sides.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="200" data-original-width="435" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEipR7fdi02LNKPfq0jpIcCo2EalV6rfSb9_isCj_EZmshgyUxKYBUyAPU5Y4HptNl7RP5SLmCX7y0BljGAlG5Z_snkK3wknIKnBZTF5qJPQ7DpJYbnRxOHe3-hIaUQPQxYThI7XWNsSM2mB/s1600/abstract+syntax+tree+for+add+__+to+both+sides.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;i&gt;Claim&lt;/i&gt;: every inference rule can be written as a transform from one abstract syntax tree to another.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2017-05-29T19:50:35.203Z</blogger:created>
    <published>2017-05-29T20:37:00Z</published>
    <updated>2019-07-15T19:52:02.374Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/05/abstract-syntax-trees-and-inference.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1801281530761571617</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Learning Lean</title>
    <content type='html'>&lt;H2&gt;When to &lt;pre&gt;--run&lt;/pre&gt;&lt;/h2&gt;

&lt;p&gt;I don't understand why I get an error with &lt;code&gt;--run&lt;/code&gt; but no error without &lt;code&gt;--run&lt;/code&gt;:
&lt;/p&gt;&lt;pre&gt;$ &lt;b&gt;cat check_append.lean&lt;/b&gt; 
#check (++)

$ &lt;b&gt;lean --run check_append.lean&lt;/b&gt; 
append : ?M_1 -&amp;gt; ?M_1 -&amp;gt; ?M_1
&amp;lt;unknown&amp;gt;:1:1: error: unknown declaration 'main'

$ &lt;b&gt;lean check_append.lean&lt;/b&gt; 
append : ?M_1 -&amp;gt; ?M_1 -&amp;gt; ?M_1
&lt;/pre&gt;

&lt;H2&gt;What are all the tactics?&lt;/h2&gt;
&lt;P&gt;  https://brandonrozek.com/blog/leantactics/&lt;BR&gt;
https://www.ma.imperial.ac.uk/~buzzard/lean_together/source/tactics/guide.html&lt;/P&gt;
&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-17T22:10:56.123Z</blogger:created>
    <published>2023-06-17T23:51:00Z</published>
    <updated>2023-06-17T23:51:17.174Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1802961908652524674</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Physics of Minecraft derivation - the graph is unwieldy </title>
    <content type='html'>There's &lt;a href="https://www.youtube.com/watch?v=aE9_YAXao3I"&gt;a video on the&amp;nbsp;Physics of Minecraft&lt;/a&gt;&amp;nbsp;which measures the gravitation in Minecraft. I wanted to see how well the &lt;a href="https://en.wikipedia.org/wiki/Projectile_motion"&gt;projectile motion&lt;/a&gt;&amp;nbsp;is described in the Physics Derivation Graph.&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhWVu_wManriTj1v-4QNdbQimhebnIEf3oXK_3cUOrQY7MStmg_ybtzcZZY25NvCOzs6stkDUVdQaTNangu9WdlN0HA8FxkZxoNuiQYTxU4uaqhXUuyXUcOl2NLzTMz8LINJWMLC7nmGazS/s1600/Screen+Shot+2018-07-16+at+9.26.55+PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="370" data-original-width="649" height="364" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhWVu_wManriTj1v-4QNdbQimhebnIEf3oXK_3cUOrQY7MStmg_ybtzcZZY25NvCOzs6stkDUVdQaTNangu9WdlN0HA8FxkZxoNuiQYTxU4uaqhXUuyXUcOl2NLzTMz8LINJWMLC7nmGazS/s640/Screen+Shot+2018-07-16+at+9.26.55+PM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
Screenshot from 0:35 in &lt;a href="https://www.youtube.com/watch?v=aE9_YAXao3I"&gt;the video&lt;/a&gt;. Useful &lt;a href="https://news.ycombinator.com/item?id=3543039"&gt;commentary is on news.ycombinator&lt;/a&gt;. The &lt;a href="https://www.wired.com/2012/02/minecraft-physics/"&gt;post on Wired.com&lt;/a&gt; was basic.&lt;/div&gt;
&lt;br /&gt;
On paper, the derivation was 4 expressions and two lines of text. The Physics Derivation Graph yields a cumbersome 7 expressions and a total of 25 nodes (feeds, expressions, and inference rules).&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi8ZC8jVxqK_ka_KE99hriWIeTprmNGbUmGWrhCxcctn64rZJzfbj2_dxMQVAxXuV84w5UT19aM9xpIm7OyzeukhH5oI-BsVkn0PtTtq_ImnhPS7SK0twZDEWEj0hlCnBvngzYc_ICTglTS/s1600/out.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1600" data-original-width="997" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi8ZC8jVxqK_ka_KE99hriWIeTprmNGbUmGWrhCxcctn64rZJzfbj2_dxMQVAxXuV84w5UT19aM9xpIm7OyzeukhH5oI-BsVkn0PtTtq_ImnhPS7SK0twZDEWEj0hlCnBvngzYc_ICTglTS/s640/out.png" width="398" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
Current output from the Physics Derivation&lt;/div&gt;
&lt;br /&gt;
The reason the graph is large is because the "subXforY" is used three times. Analysis of the midpoint is really three concurrent substitutions: at y=y_mid, v_horizontal=0 and t=t_midpoint. Concurrent substitutions are not supported, so three steps are required.&lt;br /&gt;
&lt;br /&gt;
Also, the current implementation lacks &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/48"&gt;support for comments&lt;/a&gt;.</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-17T01:25:45.894Z</blogger:created>
    <published>2018-07-17T01:53:00.003Z</published>
    <updated>2018-07-17T02:46:03.919Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/physics-of-minecraft-derivation-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1833947020759949778</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>priorities for transitioning from a minimum viable product to a alpha version</title>
    <content type='html'>What are the necessary aspects for creating the Physics Derivation Graph, and in what order?&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;database structure&lt;/li&gt;
&lt;li&gt;MVC implementation&lt;/li&gt;
&lt;li&gt;features&lt;/li&gt;
&lt;li&gt;ease of use, intuitiveness&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Poka-yoke"&gt;https://en.wikipedia.org/wiki/Poka-yoke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;latency&lt;/li&gt;
&lt;li&gt;presentation&lt;/li&gt;
&lt;/ol&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-24T18:50:47.976Z</blogger:created>
    <published>2020-04-24T21:43:00.003Z</published>
    <updated>2020-05-27T01:30:16.854Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/priorities-for-transitioning-from.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1842403775527587304</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>OpenModelica jargon dictionary</title>
    <content type='html'>&lt;P&gt;FMI = Functional Mock-up Interface&lt;/P&gt;
&lt;P&gt;FMU = Functional Mockup Unit&lt;/P&gt;
&lt;P&gt;.mo or .mop = Modelica model file&lt;/P&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-03-26T22:47:48.039Z</blogger:created>
    <published>2023-03-26T23:02:00Z</published>
    <updated>2023-03-26T23:02:01.307Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='modelica'/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1858010650927201329</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>3D visualization of graphs is beneficial</title>
    <content type='html'>Currently the Physics Derivation Graph has 2D graphs.&lt;br /&gt;
&lt;br /&gt;
3D visualization of graphs is useful:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;3D is important for larger graphs because of the extra spacing enabled compared to 2D&lt;/li&gt;
&lt;li&gt;visualization helps identify mistakes in the data structure&lt;/li&gt;
&lt;li&gt;statically placed 3D graphs are useful and can be navigate in the browser (VR is unnecessary)&lt;/li&gt;
&lt;li&gt;interactive rotation of perspective matters to making spacing of nodes visually accessible for human pattern detection&lt;/li&gt;
&lt;li&gt;coloring, weights, filtering edges, filtering nodes, and filtering types makes the viz less noisy&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-28T16:32:28.721Z</blogger:created>
    <published>2020-07-28T16:42:00.003Z</published>
    <updated>2020-07-28T16:42:21.497Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/3d-visualization-of-graphs-is-beneficial.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1962617829532220202</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>prioritization of tasks: who is the audience? Answer: me in the role of a user</title>
    <content type='html'>The Physics Derivation Graph has a backlog of tasks, including bugs and feature requests.&lt;br /&gt;
Having an objective would facilitate prioritization of the tasks.&lt;br /&gt;
&lt;br /&gt;
I grappled with two candidate objectives:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;The Physics Derivation Graph is a vanity project. I am the sole user and I don't expect any other users for the project&lt;/li&gt;
&lt;li&gt;The Physics Derivation Graph is intended for use by other contributors.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
These two objectives lead to different prioritizations. For example, resolving the login capability is vital for the second objective and not for the first. In the first objective, I would be better off just running a local Docker image and posting static content to the website.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I realized I could unify these two objectives as&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;I want to use the Physics Derivation Graph website as a "typical" user.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
I don't care whether there are other users at this point, but I do want to use the website as though I were a user.&lt;br /&gt;
&lt;br /&gt;
This objective is written as a story in which value is provided to the user. Here I am the user and the value is documenting derivations on the web.&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-30T14:37:36.356Z</blogger:created>
    <published>2020-04-30T14:44:00.001Z</published>
    <updated>2020-05-27T01:28:35.897Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/prioritization-of-tasks.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-1976067290961774017</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>avoiding the need for logins in the Physics Derivation Graph website</title>
    <content type='html'>Now that the PDG interface is a webpage, and users (not just developers) are the audience, there is a question of whether users of the website need accounts.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
User accounts&lt;/h3&gt;
Having an account would enable persistence of data specific to one user.&lt;br /&gt;
Downsides:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Password management and security&lt;/li&gt;
&lt;li&gt;user account shenanigans&lt;/li&gt;
&lt;li&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h3&gt;
No users accounts&lt;/h3&gt;
Live use without an account, modeled after services like&amp;nbsp;&lt;a href="https://repl.it/"&gt;https://repl.it/&lt;/a&gt;&amp;nbsp; and&amp;nbsp;&lt;a href="https://www.onlinecharttool.com/graph"&gt;https://www.onlinecharttool.com/graph&lt;/a&gt;, enable users to explore the capabilities without need for registering and creating a password.&lt;br /&gt;
&lt;br /&gt;
Data could be uploaded and download&lt;br /&gt;
&lt;h3&gt;
Source code&lt;/h3&gt;
&lt;div&gt;
Historically the Physics Derivation Graph was developed on the command line using bash and Python. This implied a single user.&lt;br /&gt;
The source code was available, so other developers could pull a local copy to make edits.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
API calls&lt;/h3&gt;
&lt;div&gt;
This would allow interfaces to be developed that are independent of the backend.&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-03-14T01:11:15.077Z</blogger:created>
    <published>2020-03-14T01:19:00.002Z</published>
    <updated>2020-03-14T01:19:30.728Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/03/avoiding-need-for-logins-in-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2022062033711058374</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>new droplet for Ubuntu 24 LTS</title>
    <content type='html'>My upgrade from Ubuntu 20 to 22 resulted in an inability to SSH to the server; see &lt;a href="https://physicsderivationgraph.blogspot.com/2024/09/unable-to-ssh-into-vps-after-upgrade-of.html"&gt;https://physicsderivationgraph.blogspot.com/2024/09/unable-to-ssh-into-vps-after-upgrade-of.html
&lt;/a&gt;&lt;br /&gt;I decided to get a new droplet and start from scratch with Ubuntu 24 LTS. 

Logged in as root via the web console,
&lt;pre&gt;adduser pdg
usermod -aG sudo pdg&lt;/pre&gt;

&lt;pre&gt;ufw allow OpenSSH
ufw enable&lt;/pre&gt;

Then I was able to SSH from my laptop to the VPS as "pdg"

&lt;pre&gt;sudo ufw allow 443
sudo ufw allow 80
&lt;/pre&gt;

&lt;p&gt;edit &lt;code&gt;~/.bashrc&lt;/code&gt; to include
&lt;/p&gt;&lt;pre&gt;alias ..='cd ..'&lt;/pre&gt;


&lt;p&gt;Install Docker
&lt;/p&gt;&lt;pre&gt;sudo apt update
sudo apt upgrade
sudo apt install apt-transport-https curl
sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release &amp;amp;&amp;amp; echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl is-active docker
&lt;/pre&gt;
as per &lt;a href="https://linuxiac.com/how-to-install-docker-on-ubuntu-24-04-lts/"&gt;https://linuxiac.com/how-to-install-docker-on-ubuntu-24-04-lts/

&lt;/a&gt;&lt;p&gt;To clone the github repos over SSH requires keys.
&lt;/p&gt;&lt;pre&gt;ssh-keygen&lt;/pre&gt;
and upload the newly generated public key to &lt;a href="https://github.com/settings/keys"&gt;https://github.com/settings/keys

&lt;/a&gt;&lt;p&gt;Ubuntu 24 LTS doesn't come with make by default, so
&lt;/p&gt;&lt;pre&gt;sudo apt install make&lt;/pre&gt;

&lt;p&gt;By default the user &lt;code&gt;pdg&lt;/code&gt; can't launch Docker, so
&lt;/p&gt;&lt;pre&gt;sudo usermod -a -G docker $USER
  newgrp docker&lt;/pre&gt;
as per &lt;a href="https://stackoverflow.com/a/48450294"&gt;https://stackoverflow.com/a/48450294&lt;/a&gt;

&lt;p&gt;Certs need to be loaded; see &lt;a href="https://physicsderivationgraph.blogspot.com/2021/10/periodic-renewal-of-https-letsencrypt.html"&gt;https://physicsderivationgraph.blogspot.com/2021/10/periodic-renewal-of-https-letsencrypt.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;sudo apt -y install certbot&lt;/pre&gt;

&lt;P&gt;Certbot requires a running webservice on port 80 to create new certificates.

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;


&lt;p&gt;Reference: &lt;br /&gt;&lt;a href="https://physicsderivationgraph.blogspot.com/2020/10/upgrading-ubuntu-1804-to-2004-on.html"&gt;https://physicsderivationgraph.blogspot.com/2020/10/upgrading-ubuntu-1804-to-2004-on.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2024-09-02T17:42:23.878Z</blogger:created>
    <published>2024-09-02T18:14:00Z</published>
    <updated>2024-09-03T00:28:30.950Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2024/09/new-droplet-for-ubuntu-24-lts.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2051746218375952689</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>prioritizing work for the Physics Derivation Graph</title>
    <content type='html'>Now that the website works, there are three candidate categories of work:&lt;br /&gt;
&lt;div dir="auto"&gt;
&lt;ul&gt;
&lt;li&gt;Presentation -- how does the site look, e.g., tables, use of color. images,&lt;/li&gt;
&lt;li&gt;Functionality -- what features exist, e.g. step validation, manipulating the graphs, form entry&lt;/li&gt;
&lt;li&gt;Content -- what derivations, symbols, expressions are present&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div dir="auto"&gt;
Of these three, content is most important with functionality being second. Functionality enables the workflow.&lt;/div&gt;
&lt;div dir="auto"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div dir="auto"&gt;
Within the category of "content," there are three sub-categories:&lt;/div&gt;
&lt;div dir="auto"&gt;
&lt;ul&gt;
&lt;li&gt;Derivations&lt;/li&gt;
&lt;li&gt;Abstract syntax trees -- how symbols and operators relate within an expression&lt;/li&gt;
&lt;li&gt;Inference rules&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div dir="auto"&gt;
Of those three, the derivations are the highest priority. Inference rules enable derivations.&amp;nbsp;&lt;/div&gt;
&lt;br /&gt;
&lt;div dir="auto"&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;div dir="auto"&gt;
The parsing of expressions in support of step validation is nice to have but not vital.&lt;/div&gt;
&lt;div dir="auto"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div dir="auto"&gt;
Within the topic of derivations, there is a plethora of candidates to invest in. Priorities are&lt;/div&gt;
&lt;div dir="auto"&gt;
&lt;ul&gt;
&lt;li&gt;subject scope diversity -- span all topics in Physics&lt;/li&gt;
&lt;li&gt;simplicity -- not too many steps, easy math&lt;/li&gt;
&lt;li&gt;interconnectedness with other topics&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-21T11:39:32.478Z</blogger:created>
    <published>2020-05-21T11:48:00Z</published>
    <updated>2020-05-21T11:48:29.952Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='planning'/>
    <blogger:filename>/2020/05/prioritizing-work-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2081975260750290805</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>reference resources for derivation candidates - textbooks</title>
    <content type='html'>&lt;p&gt;&lt;a href="https://aimath.org/textbooks/approved-textbooks/"&gt;https://aimath.org/textbooks/approved-textbooks/&lt;/a&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-02-09T02:28:04.525Z</blogger:created>
    <published>2022-02-09T10:59:00.004Z</published>
    <updated>2022-02-09T10:59:54.311Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2113223311848805876</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>detecting crackpots</title>
    <content type='html'>Finding derivations which relate famous equations can lead to paths worn by crackpots. Well known equations like F=m*a and E=m*c^2 serve as good targets for non-experts. With sufficient math, laypersons have a difficult time distinguishing crackpots from legitimate experts.&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
&lt;span style="font-family: 'Times New Roman', serif; font-size: 16px; text-align: center;"&gt;Joseph A. Rybczyk&lt;/span&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;span style="font-family: 'Times New Roman', serif; font-size: 16px; text-align: center;"&gt;I was looking for the relation between E=m*c^2 and F=m*a&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: 'Times New Roman', serif; font-size: 16px; text-align: center;"&gt;I found this page&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="text-align: center;"&gt;&lt;span style="font-family: Times New Roman, serif;"&gt;http://www.mrelativity.net/relationshipef/the_relationship_between_e_and_f_p1.htm&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="text-align: center;"&gt;&lt;span style="font-family: Times New Roman, serif;"&gt;Clue number 1: a private domain name --&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: 'Times New Roman', serif; text-align: center;"&gt;mrelativity.net&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: 'Times New Roman', serif; text-align: center;"&gt;Clue number 2: other papers &lt;a href="http://mrelativity.net/Einstein'sThreeMistakesinSpecialRelativityRevealed/Einstein%E2%80%99s%20Three%20Mistakes%20in%20Special%20Relativity%20Revealed.pdf"&gt;attacking relativity&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: 'Times New Roman', serif; text-align: center;"&gt;Clue number 3: lack of Latex&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: 'Times New Roman', serif; text-align: center;"&gt;Clue number 4: unfamiliar jargon -- "&lt;/span&gt;&lt;span style="font-family: Times New Roman, serif;"&gt;Internal Energy of a Particle"&lt;/span&gt;&lt;span style="font-family: 'Times New Roman', serif; text-align: center;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2016-05-28T18:04:31.561Z</blogger:created>
    <published>2016-05-28T18:10:00.001Z</published>
    <updated>2016-05-28T18:10:03.905Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/05/detecting-crackpots.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2158167763511057911</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>observations on the conversion of the backend from JSON to property graph (Neo4j)</title>
    <content type='html'>&lt;p&gt;The JSON backend for the Physics Derivation Graph&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;is concise -- only the fields necessary are present&amp;nbsp;&lt;/li&gt;&lt;li&gt;is easily readable -- plain text and not much nesting&lt;/li&gt;&lt;li&gt;requires significant investment to construct queries&lt;/li&gt;&lt;li&gt;is static in terms of dependencies; unlikely to degrade or require maintenance&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The property graph (in Neo4j) backend&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;supports user-provided queries&lt;/li&gt;&lt;li&gt;adds maintenance risk of keeping up with changes to Cypher and Neo4j&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-05-04T00:45:36.151Z</blogger:created>
    <published>2022-05-04T00:52:00.005Z</published>
    <updated>2022-05-04T00:52:24.849Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='neo4j'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='trade-offs'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='JSON'/>
    <blogger:filename>/2022/05/observations-on-conversion-of-backend.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2212504351014406961</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>consolidating content from Physics Derivation Graph websites</title>
    <content type='html'>&lt;p&gt;This post outlines the current resources associated with the project, and serves as a reminder to the author for what actions need to be taken.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;&amp;nbsp;-- primary website with content&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept"&gt;https://github.com/allofphysicsgraph/proofofconcept&lt;/a&gt;&amp;nbsp;-- website for source code&lt;/p&gt;&lt;p&gt;&lt;a href="https://physicsderivationgraph.blogspot.com/"&gt;https://physicsderivationgraph.blogspot.com/&lt;/a&gt;&amp;nbsp;-- blog containing ideas and design decisions&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://allofphysicsgraph.github.io/"&gt;https://allofphysicsgraph.github.io/&lt;/a&gt;&amp;nbsp;redirects to&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4 style="text-align: left;"&gt;TODO&lt;/h4&gt;&lt;p&gt;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/wiki"&gt;https://github.com/allofphysicsgraph/proofofconcept/wiki&lt;/a&gt;&amp;nbsp;-- unorganized wiki; should be consolidated with&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Specifically,&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/wiki/similar-projects"&gt;https://github.com/allofphysicsgraph/proofofconcept/wiki/similar-projects&lt;/a&gt; needs to be merged into&amp;nbsp;&lt;a href="https://derivationmap.net/other_projects"&gt;https://derivationmap.net/other_projects&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://sites.google.com/site/physicsderivationgraph/home"&gt;https://sites.google.com/site/physicsderivationgraph/home&lt;/a&gt;&amp;nbsp;-- old website, not maintained; should be consolidated with this blog.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-04-20T02:32:59.017Z</blogger:created>
    <published>2021-08-08T17:39:00.001Z</published>
    <updated>2021-08-08T17:39:18.331Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/08/consolidating-content-from-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2253321001238769883</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>use of the Physics Derivation Graph is driven by incentives for individuals</title>
    <content type='html'>&lt;div&gt;Semantic tagging of documents has the potential of enriching the reader's experience because content is easier to search. The burden of work is on the document author to provide the right tags. Worse, the document author has to find tags that are common to uses in other documents -- consistency of tags is necessary for search. This extra work of 1) tagging and 2) using consistent tags are reasons semantic enrichment hasn't become mainstream.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The Physics Derivation Graph faces a similar challenge. If the Physics Derivation Graph relies on using appropriately annotated symbols (effectively equivalent to a subset of semantic tags), then the PDG has the same burdens of work on individual authors.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The incentive for the individual researcher authoring a paper to use the Physics Derivation Graph is when there's integration with a computer algebra system that can check the correctness of steps. Then the author benefits from immediate feedback before sharing with others for review.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Annotating symbols probably isn't sufficient to motivate the work, but integration with a computer algebra system could provide incentive. Currently, the use of a computer algebra system requires detailed steps to be specified by the author.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are ways to partially automate both symbol annotation and specifying steps. For symbol annotation, the computer could guess from context which symbols are being used. In a similar reliance on context, the user could provide leaps in specifying a derivation that the computer then tries to fill in with the detailed steps.&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-04T21:34:48.264Z</blogger:created>
    <published>2023-06-04T22:36:00.002Z</published>
    <updated>2023-06-04T22:36:47.602Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='cas'/>
    <blogger:filename>/2023/06/use-of-physics-derivation-graph-is.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2263940999232199826</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>plan for parsing math latex expressions from arxiv</title>
    <content type='html'>The arxiv content is available through AWS S3:&amp;nbsp;&lt;a href="https://arxiv.org/help/bulk_data_s3"&gt;https://arxiv.org/help/bulk_data_s3&lt;/a&gt;&lt;br /&gt;
As an alternative to S3, arxiv points to a subset that's available without going through AWS:&amp;nbsp;&lt;a href="https://www.cs.cornell.edu/projects/kddcup/datasets.html"&gt;https://www.cs.cornell.edu/projects/kddcup/datasets.html&lt;/a&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;
The value of having a large number of expressions in Latex is that we could use the expressions to predict what a user wants to enter, decreasing the amount of manual entry required. Also, if a derivation contains similar expressions to what exists in the arxiv content, we could investigate whether the derivation is related to the arxiv paper.&lt;/div&gt;
&lt;br /&gt;
&lt;h3&gt;
Steps for working with arxiv data&lt;/h3&gt;
Download papers (in .tex format) for a given domain.&lt;br /&gt;
&lt;br /&gt;
For each tex file, separate the text content from the math from the latex commands.&lt;br /&gt;
&lt;i&gt;Task&lt;/i&gt;: identify all latex commands.&lt;br /&gt;
&lt;i&gt;Task&lt;/i&gt;: identify latex commands that alter the math latex content (e.g., \newcommand)&lt;br /&gt;
&lt;br /&gt;
Before attempting to parse the math latex content, remove all presentation-related artifacts&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;replace '\left(' with '('&lt;/li&gt;
&lt;li&gt;replace '\right)' with ')'&lt;/li&gt;
&lt;li&gt;replace '\ ' with ' '&lt;/li&gt;
&lt;li&gt;replace '\,' with ' '&lt;/li&gt;
&lt;li&gt;replace '\quad' with ' '&lt;/li&gt;
&lt;li&gt;replace '\qquad' with ' '&lt;/li&gt;
&lt;/ul&gt;
&lt;i&gt;Task&lt;/i&gt;: identify all non-math commands used in math latex.&lt;br /&gt;
&lt;br /&gt;
Sources to help with parsing math latex:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;within the math latex string to parse, what can be deduced about the expected context?&lt;/li&gt;
&lt;li&gt;given other math expressions in the same paper, what would be consistent?&lt;/li&gt;
&lt;li&gt;given the text in a paper surrounding the math expressions, what would be expected based on keywords?&lt;/li&gt;
&lt;li&gt;given other papers in the same domain or based on citations, what would be likely?&lt;/li&gt;
&lt;li&gt;what is statistically likely give the corpus of all articles?&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Use the Trie data structure to determine what the valid characters in the grammar should be. (Probably be some subset of ASCII with some Unicode chars.)&amp;nbsp;&lt;/li&gt;
&lt;li&gt;What are the tokens/symbols of the language?&lt;/li&gt;
&lt;li&gt;What are the common sequences of tokens?&lt;/li&gt;
&lt;li&gt;&lt;div dir="auto"&gt;
What are the appropriate labels for the tokens?&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div dir="auto"&gt;
Instead of listing 10 different relational operators each time, create a group of relational operators and reference the group.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div dir="auto"&gt;
What are some logical grouping of symbols?&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
Parsing a LaTeX expression should return candidate SymPy expressions with a probability. In case of unambiguous matching, only one expression should match (p=1). In the case of ambiguous matching, two or more SymPy expressions some probability (p_1 + p_2 = 1).&lt;br /&gt;
&lt;br /&gt;
That is, in some sense, the same process a human goes through to decode the intended meaning of any given math expression in a scientific paper. We are looking to encode that process as a Python program.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-26T21:36:51.986Z</blogger:created>
    <published>2020-05-26T21:37:00.004Z</published>
    <updated>2020-05-31T02:23:41.049Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/parsing-math-latex-expressions.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2276380571962825344</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>SUVAT lookup table</title>
    <content type='html'>&lt;a href="https://en.wikipedia.org/wiki/Equations_of_motion#Constant_translational_acceleration_in_a_straight_line"&gt;https://en.wikipedia.org/wiki/Equations_of_motion#Constant_translational_acceleration_in_a_straight_line&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
The derivation of the 5 equations of motion&lt;br /&gt;
&lt;a href="https://www.khanacademy.org/science/physics/one-dimensional-motion/kinematic-formulas/a/what-are-the-kinematic-formulas"&gt;https://www.khanacademy.org/science/physics/one-dimensional-motion/kinematic-formulas/a/what-are-the-kinematic-formulas&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://physicsforidiots.com/physics/dynamics/"&gt;http://physicsforidiots.com/physics/dynamics/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://github.com/byebrid/SUVAT-XUVAT-Equation-Solver"&gt;https://github.com/byebrid/SUVAT-XUVAT-Equation-Solver&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://redd.it/7rw6hi"&gt;https://redd.it/7rw6hi&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-08-01T00:55:35.014Z</blogger:created>
    <published>2018-08-01T02:16:00Z</published>
    <updated>2018-08-01T02:16:13.677Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/suvat-lookup-table.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2299101220876258389</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>lesson learned for model-view-controller: form workflows</title>
    <content type='html'>&lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;Model-view-controller&lt;/a&gt;&amp;nbsp;(MVC) is a way to separate presentation from the backend computation and data transformation.&lt;br /&gt;
&lt;br /&gt;
For my application, "model" = compute.py; "view" = a collection of webpages; "controller" = controller.py&lt;br /&gt;
&lt;br /&gt;
MVC nuances with Flask and WTForms --&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;The business logic workflow is captured exclusively in controller.py&lt;/li&gt;
&lt;li&gt;Upon form submission the workflow should return back to controller.py rather than linking to next page. The controller.py uses redirect(url_for()) to transition between pages.&lt;/li&gt;
&lt;li&gt;Form data extraction occurs in the controller; manipulations to the form data are made in compute.py (the model).&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-31T02:20:07.681Z</blogger:created>
    <published>2019-12-31T02:21:00Z</published>
    <updated>2020-04-11T02:40:11.730Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/lesson-learned-for-model-view.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2335698282230384467</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Python code validation</title>
    <content type='html'>&lt;a href="https://sourcegraph.com/"&gt;https://sourcegraph.com&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://github.com/yinwang0/pysonar2"&gt;https://github.com/yinwang0/pysonar2&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://yinwang0.wordpress.com/2010/09/12/pysonar/"&gt;https://yinwang0.wordpress.com/2010/09/12/pysonar/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://pychecker.sourceforge.net/"&gt;http://pychecker.sourceforge.net/&lt;/a&gt;&lt;br /&gt;
not that useful for working code:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ &lt;b&gt;python bin/generate_new_random_index.py&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expression permanent index: 3135868900&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expression temporary index: 3901417&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;feed temporary index &amp;nbsp; &amp;nbsp; &amp;nbsp;: 4031120&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;inf rule temporary index &amp;nbsp;: 2688703&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ &lt;b&gt;pychecker bin/generate_new_random_index.py&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Processing module generate_new_random_index (bin/generate_new_random_index.py)...&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expression permanent index: 1210104125&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expression temporary index: 7904139&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;feed temporary index &amp;nbsp; &amp;nbsp; &amp;nbsp;: 7185822&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;inf rule temporary index &amp;nbsp;: 2695903&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Warnings...&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;bin/generate_new_random_index.py:15: Imported module (random) not used&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2016-06-09T14:37:42.548Z</blogger:created>
    <published>2016-06-09T14:38:00.003Z</published>
    <updated>2016-06-09T14:45:40.088Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/06/python-code-validation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2370314664182840029</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>table or property graph?</title>
    <content type='html'>Currently in v7 I'm using JSON to store a dictionary of nested dictionaries and lists. That design is somewhat fragile in that 1) it doesn't allow atomic operations like a database; 2) it is an approximation for a property graph.&lt;br /&gt;
&lt;br /&gt;
Because what I care about is nodes and edges with attributes, my data structure and code is essentially a DSL property graph. I previously recognized this (see v5) but didn't go very deep because I wasn't satisfied by Neo4j's rendering of nodes in a web interface. Now that I've built a web interface, I am wondering whether a property graph would be a better backend.&lt;br /&gt;
&lt;br /&gt;
Neo4j is open source (&lt;a href="https://github.com/neo4j/neo4j"&gt;https://github.com/neo4j/neo4j&lt;/a&gt;) so I shouldn't be any more reluctant to use it than I would be with SQLite3 (&lt;a href="https://sqlite.org/src/doc/trunk/README.md"&gt;https://sqlite.org/src/doc/trunk/README.md&lt;/a&gt;).&lt;br /&gt;
&lt;br /&gt;
I've been thinking that the next iteration (v8) would be table based. The blocker for that approach is my lack of knowledge of SQL queries needed to replace the current functions that use nested dictionaries. If I were to use a property graph in v8, I'd need to learn Cypher.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-23T12:44:15.477Z</blogger:created>
    <published>2020-04-23T12:51:00.001Z</published>
    <updated>2020-04-23T12:51:03.589Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/table-or-property-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2389518436335438868</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>technology the Physics Derivation Graph builds on</title>
    <content type='html'>The Physics Derivation Graph builds on prior technologies. In practice, the need was identified, created from scratch, then found to have been already done similarly by other people.&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://equationmap.com/"&gt;EquationMap&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Gellish"&gt;Gellish&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/G%C3%B6del_numbering"&gt;Godel numbering&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2016-09-01T13:25:05.608Z</blogger:created>
    <published>2016-09-01T13:31:00.002Z</published>
    <updated>2016-09-01T13:31:24.025Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/09/technology-physics-derivation-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2391901521840926405</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>degrees of formalization in math</title>
    <content type='html'>&lt;div&gt;&lt;i&gt;Update 2021-07-30&lt;/i&gt;: this concept is &lt;a href="https://www.cs.ru.nl/~freek/factor/"&gt;the&amp;nbsp;de Bruijn factor&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;There are many different views of formalization for mathematics. They are not all competing in the same scope. There are different degrees of formalization. Three analogies for this are&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;spectrum of formalization, from informal (e.g., Latex) to increasing formality, like CAS and then to Proof assistants.&lt;/li&gt;
&lt;li&gt;"levels of zoom" as in visualization, like Google Maps but for Math&lt;/li&gt;
&lt;li&gt;compiling "high level concepts" (e.g., Latex) to controlled natural language to proofs&lt;/li&gt;
&lt;/ul&gt;
The idea of "zooming visualization" is relevant to the user experience -- a reader should be able to select the level of granularity.&lt;br /&gt;
&lt;br /&gt;
The idea of "compiling" is about making implicit concepts explicit. Also, compiling to different architectures is similar to formalizing in different logics and axioms. Unlike the visualization concept, there is not one underlying basis to specify formalization in.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
What are the degrees of formalization in math?&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;verbal (hallway chats, post-conference dinners, coffee breaks)&lt;/li&gt;
&lt;li&gt;white board or chalk board&lt;/li&gt;
&lt;li&gt;physical paper + pen or pencil&lt;/li&gt;
&lt;li&gt;&lt;i&gt;typesetting&lt;/i&gt;: Latex or equivalents like Markdown or&amp;nbsp;&lt;a href="https://pretextbook.org/"&gt;pretextbook.org&lt;/a&gt;&amp;nbsp;(XML based) or &lt;a href="https://pandoc.org/"&gt;pandoc&lt;/a&gt;; Powerpoint; &lt;a href="https://rmarkdown.rstudio.com/"&gt;Rmd&lt;/a&gt;, reStructuredText, MyST, &lt;a href="https://jupyterbook.org/intro.html"&gt;jupyterbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;semantic enrichment/decoration: sTeX, OMDoc; PDG inference rules; &lt;a href="http://lamport.azurewebsites.net/latex/pf2.pdf"&gt;pf2 package&lt;/a&gt;&amp;nbsp;(&lt;a href="https://lamport.azurewebsites.net/latex/latex.html"&gt;sty&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;controlled natural languages (e.g., Naproche)&lt;/li&gt;
&lt;li&gt;CAS verification of inference rules (e.g. Sage, SymPy)&lt;/li&gt;
&lt;li&gt;formal verification in a selected target logic and axioms (e.g., Lean, Isabella, COQ)&lt;/li&gt;
&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;References&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://arxiv.org/pdf/2005.12876.pdf"&gt;https://arxiv.org/pdf/2005.12876.pdf&lt;/a&gt; and&amp;nbsp;&lt;a href="https://easychair.org/smart-slide/slide/1rfW#"&gt;https://easychair.org/smart-slide/slide/1rfW#&lt;/a&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;from &lt;a href="https://physicsderivationgraph.blogspot.com/2020/07/notes-from-cicm-2020-13th-conference-on.html"&gt;https://physicsderivationgraph.blogspot.com/2020/07/notes-from-cicm-2020-13th-conference-on.html&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-30T13:54:51.679Z</blogger:created>
    <published>2020-07-30T14:22:00.002Z</published>
    <updated>2021-08-01T14:43:21.350Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/degrees-of-formalization-in-math.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2399612970474076701</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>limiting my effort to just Latex for expressions</title>
    <content type='html'>The core of the Physics Derivation graph is the relation between expressions. I've considered how much additional knowledge could be captured by &lt;a href="https://physicsderivationgraph.blogspot.com/2017/05/abstract-syntax-trees-and-inference.html"&gt;storing expressions as Abstract Syntax Trees&lt;/a&gt;. While this would add a lot of work and therefore take more time, there's potentially a lot of value in having a more robust representation. Additionally, there's the challenge that &lt;a href="https://physicsderivationgraph.blogspot.com/2017/06/representing-inference-rules-as-both.html"&gt;I don't know how to represent all expressions in Physics using Abstract Syntax Trees&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
Rather than store each expression as an AST, I'm going to limit my effort to just storing expressions using Latex. As a consequence, &lt;b&gt;the validity of inference rules applied to expressions not be able to be checked&lt;/b&gt;. If someone comes up with a representation more useful than Latex (ie ASTs, MathML, etc), then a conversion will need to be performed.&lt;br /&gt;
&lt;br /&gt;
The second reason the choice of Latex is significant because &lt;b&gt;it limits how far down in the hierarchy that can be enumerated&lt;/b&gt;. Specifically, in the context of these layers&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Physics derivation graph&lt;/li&gt;
&lt;li&gt;Derivation&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Step&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Expressions, inference rules&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Symbol, operators&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
the Physics Derivation Graph with Latex will not be able to explore systematically the symbols and operators used.</content>
    <blogger:metaDescription/>
    <blogger:created>2018-05-04T01:36:35.760Z</blogger:created>
    <published>2018-05-04T01:47:00.001Z</published>
    <updated>2018-05-04T01:54:26.872Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/05/limiting-my-effort-to-just-latex-for.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2409163426999637878</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Minimum viable product for the Physics Derivation Graph</title>
    <content type='html'>I've been looking for &lt;a href="https://physicsderivationgraph.blogspot.com/2017/06/realizing-my-value-for-physics.html"&gt;ways to pare down the tasks&lt;/a&gt; that I face in building the&amp;nbsp;Physics Derivation Graph. Defining a&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Minimum_viable_product"&gt;minimum viable product&lt;/a&gt; for delivery would help prioritize what I work on.&lt;br /&gt;
&lt;br /&gt;
Although the &lt;a href="https://d3js.org/"&gt;d3js&lt;/a&gt;-based interactive graphs are neat, they don't provide much value. The static &lt;a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics"&gt;PNG&lt;/a&gt;s of derivations are not as sexy, but they are easier to navigate. The PNGs are the minimum viable product.&lt;br /&gt;
&lt;br /&gt;
As far as storage formating, I think the &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/v4_file_per_expression"&gt;"file per expression" approach&lt;/a&gt; is still the best option, compared to CSV, XML, and MathML.&lt;br /&gt;
&lt;br /&gt;
Thus, the MVP needs to be able to generate PNGs of a graph from derivations stored in the "file per expression" method.&lt;br /&gt;
&lt;br /&gt;
Generating a file per expression is a tedious task that both limits scalability and could introduce errors if done manually. The command-line based&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v3_CSV/bin/interactive_user_prompt.py"&gt;interactive user prompt&lt;/a&gt; is a useful tool that addresses both concerns.&lt;br /&gt;
&lt;br /&gt;
The interactive user prompt is a potential time sink. Minimum functionality is user should be able to enter a new derivation and write results to file.&lt;br /&gt;
Do not include ability to edit existing derivations, or to link existing derivations by deconflicting expressions with different identifiers.&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Task 1&lt;/i&gt;: generate graph PNG from file per expressions&lt;br /&gt;
&lt;i&gt;Task 2&lt;/i&gt;: generate file per expression from interactive prompt&lt;br /&gt;
&lt;i&gt;Task 3&lt;/i&gt;: convert from interactive command-line prompt to web-based prompt</content>
    <blogger:metaDescription/>
    <blogger:created>2017-07-09T00:44:17.906Z</blogger:created>
    <published>2017-07-09T00:57:00.003Z</published>
    <updated>2017-08-06T21:18:37.600Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/07/minimum-viable-product-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2441346569271804458</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>barriers to implementing formalization in mathematics</title>
    <content type='html'>Inspired by reading the&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/QED_manifesto"&gt;QED manifesto&lt;/a&gt;&amp;nbsp;and responses like&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://people.eecs.berkeley.edu/~fateman/papers/openmathcrit.pdf"&gt;"A Critique of OpenMath and Thoughts on Encoding Mathematics"&amp;nbsp;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.ru.nl/F.Wiedijk/pubs/qed2.pdf"&gt;"The QED manifesto revisited"&lt;/a&gt;&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
I attended a conference on formalization of mathematics. The challenges to progress appear to include the following&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;The diversity of topics (both depth and breadth) is huge.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;The variable level of formalization (from natural language to Latex to Constrained Natural Languages to Computer Algebra Systems to Proof assistants.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Addressing all the requirements (readability, conciseness, preciseness) is infeasible with current techniques, so selecting any potential solution is suboptimal. Investing resources (time, attention, compute, creativity) in a suboptimal solution is an opportunity cost.&lt;/li&gt;
&lt;li&gt;There is more brain power than staffing. Good ideas don't get implemented because hiring software programmers isn't accessible&lt;/li&gt;
&lt;li&gt;The staffing that is available is graduate students. These are neither domain experts nor experienced programmers&lt;/li&gt;
&lt;li&gt;The degree of automation for projects varies. What is considered hard or scalable depends on who is doing the work.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Design decisions are driven by the specific problems being solved. A "universal" and comprehensive approach incurs inefficiency in any given domain.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;The degree of software development best practices varies (linting, continuous integration/continuous deployment, use of version control)&lt;/li&gt;
&lt;li&gt;The diversity of implementation choices (Python, Haskell, Coq, C, C++)&lt;/li&gt;
&lt;li&gt;Inventing novel domain specific languages is easy for this community, further mudding the options&lt;/li&gt;
&lt;li&gt;Standard (basic) math is not exciting to build a product around&lt;/li&gt;
&lt;li&gt;Maintenance of software and databases is not exciting research&lt;/li&gt;
&lt;li&gt;There are a variety of databases which hold proofs:&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib"&gt;https://github.com/leanprover-community/mathlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.isa-afp.org/topics.html"&gt;https://www.isa-afp.org/topics.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mizar.org/library/"&gt;http://www.mizar.org/library/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dlmf.nist.gov/"&gt;https://dlmf.nist.gov/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Anyone can post code (e.g., github); also there is no requirement to post source code&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;There is no standardization on what level of quality is acceptable&lt;/li&gt;
&lt;li&gt;There is no review process&lt;/li&gt;
&lt;li&gt;Linking of code to papers to presentations is unusual&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Licensing of code and results varies -- open source, closed source, unspecified&lt;/li&gt;
&lt;li&gt;Who the audience should be is unclear -- advancing research or sharing with advanced peers or on-boarding graduate students or&amp;nbsp; teaching undergraduates?&lt;/li&gt;
&lt;li&gt;Specific goal (beyond QED manifesto) is not agreed upon; there are no milestones.&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;use cases are undefined&lt;/li&gt;
&lt;li&gt;well-defined challenge thresholds are needed&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;A survey and detailed comparison of various options is not readily available?&lt;/li&gt;
&lt;li&gt;Translation between representations is usually lossy since scopes are not one-to-one&lt;/li&gt;
&lt;li&gt;There is no authority, formal or informal. There is no designated leader&lt;/li&gt;
&lt;li&gt;There is no governance structure. Decision making is ad hoc and social&lt;/li&gt;
&lt;li&gt;Incentives for participants include&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Publishing papers&lt;/li&gt;
&lt;li&gt;Advancing knowledge&lt;/li&gt;
&lt;li&gt;Building reputation&lt;/li&gt;
&lt;li&gt;Forming alliances&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
As a consequence of the above issues, the selection function becomes who can produce the most creative idea and get it implemented in order to compete for attention.&lt;br /&gt;
&lt;br /&gt;
Top-down direction of effort isn't required, but the consequence of bottom-up coordination is that there duplicated effort and investment in translation between faction required.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
The above list gets oversimplified into observations like "no barrier exists other than someone sitting down and doing the work."&lt;br /&gt;
There are a couple implicit assumptions there:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;the ill-defined approach in my mind is the best and right method&lt;/li&gt;
&lt;li&gt;that someone is not me. Probably a graduate student since the work is trivial&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Speed does not seem to be an issue. There is not a compute bottleneck.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-28T13:57:29.758Z</blogger:created>
    <published>2020-07-28T14:21:00.003Z</published>
    <updated>2020-07-29T00:53:29.770Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/barriers-to-implementing-formalization.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2447979946554566022</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>roadmap for identifying mathematical variables in Latex documents</title>
    <content type='html'>&lt;p&gt;&lt;i&gt;Context&lt;/i&gt;: I think there's a graph of mathematical expressions in Physics. That graph has math expressions as nodes and the nodes are related by inference rules. The graph spans textbooks and journal articles. The scope of this post is limited to the graph within one document.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://physicsderivationgraph.blogspot.com/2021/05/what-would-create-tipping-point.html"&gt;determining consistency of mathematical content within one document&lt;/a&gt;, the first step is to identify mathematical variables and operators. In practice, variables commonly appear inline as &lt;code&gt;$a$&lt;/code&gt; or within an expression like&lt;/p&gt;
&lt;pre&gt;\begin{equation}
a = 2
\end{equation}&lt;/pre&gt;
&lt;p&gt;Another way variables appear in text is within \newcommand, like&lt;/p&gt;

&lt;pre&gt;\newcommand{\R}{\mathbb{R}}&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;\newcommand{\bb}[1]{\mathbb{#1}}
Other numerical systems have similar notations. 
The complex numbers \( \bb{C} \), the rational 
numbers \( \bb{Q} \) and the integer numbers \( \bb{Z} \).
&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://www.overleaf.com/learn/latex/Commands"&gt;&lt;i&gt;source&lt;/i&gt;&lt;/a&gt;

&lt;/p&gt;&lt;p&gt;For addressing the complexity of expanding newcommand &lt;a href="https://en.wikibooks.org/wiki/LaTeX/Macros"&gt;macros&lt;/a&gt;, see&amp;nbsp;&lt;a href="https://stackoverflow.com/questions/1509799/how-to-replace-latex-macros-with-their-definitions-using-latex"&gt;https://stackoverflow.com/questions/1509799/how-to-replace-latex-macros-with-their-definitions-using-latex&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Once variables and operators are identified, the next step would be to associate each symbol with the respective definition (e.g., wikipedia links) and &lt;a href="https://en.wikipedia.org/wiki/International_System_of_Quantities#Base_quantities"&gt;dimensions&lt;/a&gt; (e.g., length, time, charge).&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Options&lt;/h2&gt;&lt;p&gt;https://pypi.org/project/TexSoup/, https://texsoup.alvinwan.com/, https://github.com/alvinwan/TexSoup,&amp;nbsp;https://stackoverflow.com/users/4855984/alvin-wan&lt;/p&gt;&lt;p&gt;https://pylatexenc.readthedocs.io/en/latest/latexwalker/,&amp;nbsp;https://github.com/phfaist/pylatexenc/&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-07-12T00:24:33.827Z</blogger:created>
    <published>2021-07-12T01:03:00Z</published>
    <updated>2021-07-12T01:03:03.618Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/07/roadmap-for-identifying-mathematical.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2448207953081455705</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>timing page rendering with and without Sympy</title>
    <content type='html'>I noticed that page rendering for derivationmap.net is slow and wanted to time the rendering to see what timing "slow" actually meant.&lt;br /&gt;
&lt;br /&gt;
To summarize the results below, the first load of SUVAT with Sympy turned on took almost 30 seconds. In constrast, with Sympy turned off, the second load of the same derivation took 8 seconds.&lt;br /&gt;
--&amp;gt; That's a big difference in user experience.&lt;br /&gt;
30 seconds is also the threshold where Nginx times out waiting for the backend, so getting the time lower is important (or else the page won't show up).&lt;br /&gt;
&lt;br /&gt;
The more meaningful comparison is second load of SUVAT with and without Sympy. That change is 15 seconds to 8 seconds, a factor of 2x improvement.&lt;br /&gt;
The same 2x improvement also occurs for the other derivation (6.4 to 3.2 seconds).&lt;br /&gt;
--&amp;gt; That indicates there is value in caching Sympy validation results (though we probably won't recover the full 2x).&lt;br /&gt;
&lt;br /&gt;
The second takeaway is that 8 seconds for a page to load with Sympy is turned off is still too long.&lt;br /&gt;
The flask logs are not configured to enable profiling -- they merely indicate when an event started. Because I don't long when an event finished, I cannot create a &lt;a href="http://www.brendangregg.com/flamegraphs.html"&gt;flame graph&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
&lt;table border="1"&gt;
  &lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;derivation&lt;/th&gt;
    &lt;th&gt;which render&lt;/th&gt;
    &lt;th&gt;render time in seconds&lt;/th&gt;
    &lt;th&gt;with d3js&lt;/th&gt;
    &lt;th&gt;with graphviz PNG&lt;/th&gt;
    &lt;th&gt;with Sympy inf rule check&lt;/th&gt; &lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;SUVAT&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;1&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;19.6&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;No&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;SUVAT&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;2&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;7.8&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;No&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;SUVAT&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;3&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;7.4&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;No&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;SUVAT&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;1&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;28.4&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;SUVAT&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;2&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;15.2&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;SUVAT&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;3&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;14.8&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Maxwell Eq&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;1&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;7.4&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;No&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Maxwell Eq&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;2&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;3.2&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;No&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Maxwell Eq&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;3&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;3.2&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;No&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Maxwell Eq&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;1&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;13.6&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Maxwell Eq&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;2&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;6.4&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Maxwell Eq&lt;/td&gt;&lt;!-- derivation --&gt;
  &lt;td&gt;3&lt;/td&gt;&lt;!-- which render --&gt;
  &lt;td&gt;6.7&lt;/td&gt;&lt;!-- time --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- d3js --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- graphviz --&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;!-- Sympy --&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-14T21:34:54.495Z</blogger:created>
    <published>2020-05-14T21:55:00.002Z</published>
    <updated>2020-05-14T21:55:52.308Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/timing-page-rendering-with-and-without.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2633503700266348072</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Sage as a candidate Computer Algebra System for the Physics Derivation Graph</title>
    <content type='html'>I was excited to use &lt;a href="http://www.sagemath.org/"&gt;Sage&lt;/a&gt;'s &lt;a href="https://cloud.sagemath.com/"&gt;online notebook interface&lt;/a&gt;&amp;nbsp;to see whether it could handle the variety of expressions and inference rules in the &lt;a href="http://allofphysicsgraph.github.io/proofofconcept/"&gt;Physics Derivation Graph&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
I found a few unexpected behaviors. There's good support for many of the inference rules. When I tried to apply Sage to more advanced uses, either I don't understand the math well enough, or support in Sage doesn't exist.&lt;br /&gt;
&lt;h3&gt;
Expectation value doesn't render Latex&lt;/h3&gt;
Expectation values are used in the variance relation identity. I was impressed by the ability of &lt;a href="http://www.sagemath.org/"&gt;Sage&lt;/a&gt; to use &lt;a href="https://en.wikipedia.org/wiki/Expectation_value_(quantum_mechanics)"&gt;Expectation value&lt;/a&gt; from &lt;a href="http://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;.&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;x=var('x')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;from sympy.stats import E # expectation value&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;expr1=E((x-E(x))^2)==E(x^2)-(E(x))^2&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;expr2=E(x^2-2*x*E(x)+E(x)^2)==E(x^2)-(E(x))^2&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;print(bool(expr1.lhs() == expr2.lhs()))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;expr3=E(x^2)-2*E(x)*E(x)+E(x)^2==E(x^2)-(E(x))^2&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;print(bool(expr3.lhs() == expr2.lhs()))&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;True&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;True&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
However, I wasn't able to display the content in LaTeX:&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;print(latex(expr3))&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;0 == 0&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
This is unfortunate but not a blocker&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
Real Part of Expression isn't what I was expecting&lt;/h3&gt;
&lt;div&gt;
Sage doesn't produce the output I expected from .real_part()&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;forget()&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;x=var('x')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assume(x,'real')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;this=cos(x) + I*sin(x)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;this.real_part()&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;cos(real_part(x))*cosh(imag_part(x)) - cos(real_part(x))*sinh(imag_part(x))&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
What I was looking for was that &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;this.real_part()&lt;/span&gt; would return &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cos(x)&lt;/span&gt;; similarly &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;this.imag_part()&lt;/span&gt; should return &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;sin(x)&lt;/span&gt;.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;
Symbolic Levi-Civita not supported in Sage?&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
A &lt;a href="https://en.wikipedia.org/wiki/Levi-Civita_symbol"&gt;Levi-Civita operator&lt;/a&gt; can be defined&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;levicivita = SymmetricGroup(3)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;levicivita([1,2,3]).sign()&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;1&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
However, I can't use symbols as arguments&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;forget()&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;h,j,k=var('h,j,k')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assume(h,'integer')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assume(j,'integer')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assume(k,'integer')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;levicivita = SymmetricGroup(3)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;levicivita([j,k,m]).sign()&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;Invalid permutation vector: [h,j, k]&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;h3&gt;
Del (aka Nabla) lacks symbolic support in Sage?&lt;/h3&gt;
Symbolic &lt;a href="https://en.wikipedia.org/wiki/Cross_product"&gt;cross-products &lt;/a&gt;work as desired&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;h,j,k=var('h,j,k')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;m,n,p=var('m,n,p')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;E = vector(SR, [h,j,k])&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;F = vector(SR, [m,n,p])&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;print(E.cross_product(F))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;(-k*n + j*p, k*m - h*p, -j*m + h*n)&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;Other vector calculus operations appear to lack support for symbolic manipulation&lt;/span&gt;&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Del#Gradient"&gt;https://en.wikipedia.org/wiki/Del#Gradient&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Del#Divergence"&gt;https://en.wikipedia.org/wiki/Del#Divergence&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Del#Curl"&gt;https://en.wikipedia.org/wiki/Del#Curl&lt;/a&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;I don't quite understand what's being done with the following:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;forget()&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;V = VectorSpace(SR,3)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;h,j,k=var('h,j,k')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;m,n,p=var('m,n,p')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;E = vector(SR, [h,j,k])&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;print(E.curl([1,2,3]))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;print(E.div([1,2,3]))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;(0, -1, 1)&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;1&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-12-25T19:50:31.837Z</blogger:created>
    <published>2015-12-25T20:05:00.001Z</published>
    <updated>2016-05-27T19:36:12.228Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='cas'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sage'/>
    <blogger:filename>/2015/12/sage-isnt-robust-computer-algebra.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2682324233756737958</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>learning web ontology language (OWL)</title>
    <content type='html'>&lt;p&gt;http://www.linkeddatatools.com/introducing-rdfs-owl&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;https://www.cambridgesemantics.com/blog/semantic-university/learn-owl-rdfs/owl-references-humans/&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;http://www.linkeddatatools.com/introducing-rdf-part-2&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-12-15T19:06:01.266Z</blogger:created>
    <published>2020-12-15T19:06:00.003Z</published>
    <updated>2020-12-15T19:06:36.997Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2688379716009110254</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>dynamically build latex parser grammar based on symbols used in the Physics Derivation Graph</title>
    <content type='html'>I've been using the Sympy Latex parser. After encountering a wide variety of issues, I realized a new strategy is needed.&lt;br /&gt;&lt;br /&gt;
The previous mindset was "make modifications to the ANTLR grammar as we encounter novel issues in Latex." That approach would constant process of catching up with whatever is in the Physics Derivation Graph.&lt;br /&gt;&lt;br /&gt;Here is a different method that takes advantage of the information available in the Physics Derivation Graph to inform the ANTLR grammar.&lt;br /&gt;&lt;br /&gt;
The Physics Derivation Graph has a list of symbols in its database. We could leverage that list of symbols and build an ANTLR grammar specification that is based on the Physics Derivation Graph list of symbols.&lt;br /&gt;
&lt;br /&gt;The process would be&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;get list of symbols from Physics Derivation Graph&lt;/li&gt;
&lt;li&gt;add those symbols into the ANTLR grammar&lt;/li&gt;
&lt;li&gt;when Sympy parses Latex, use the modified grammar specification&lt;/li&gt;
&lt;li&gt;when new symbols are added to the Physics Derivation Graph, go to step 1&lt;/li&gt;
&lt;/ol&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-09T11:28:20.320Z</blogger:created>
    <published>2020-05-09T11:29:00.001Z</published>
    <updated>2020-05-09T11:29:39.513Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='parser'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='latex'/>
    <blogger:filename>/2020/05/dynamically-build-latex-parser-grammar.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2712123259837071761</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>domains in Physics that are difficult for the Physics Derivation Graph</title>
    <content type='html'>&lt;h3 style="text-align: left;"&gt;Geometry-based derivations&lt;/h3&gt;&lt;div&gt;The spatial reasoning needed does not conform to a computer algebra system&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;force diagram or &lt;a href="https://en.wikipedia.org/wiki/Free_body_diagram"&gt;free-body diagram&lt;/a&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Centripetal forces, e.g., &lt;a href="https://physics.info/centripetal/"&gt;https://physics.info/centripetal/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Optics#Classical_optics"&gt;classical optics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Orbital_mechanics"&gt;orbital mechanics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Feynman_diagram"&gt;Feynman diagrams&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Experiments&lt;/h3&gt;&lt;div&gt;The chain of reasoning needed to justify design choices is difficult. The motivating insight is subjective.&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Double-slit_experiment"&gt;Double slit experiment&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Oil_drop_experiment"&gt;oil drop experiment&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Michelson%E2%80%93Morley_experiment"&gt;Michelson-Morley experiment&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-08T19:07:11.598Z</blogger:created>
    <published>2021-08-08T19:17:00.006Z</published>
    <updated>2021-08-21T18:14:21.470Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/08/domains-in-physics-that-are-difficult.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2713224945212510396</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>two hours to manually transcribe three typed pages of math into 150 lines of HTML+Latex</title>
    <content type='html'>&lt;p&gt;I have about 20 boxes of notes from roughly 10 years of undergrad and graduate classes in Math and Physics. I've kept the notes for the past 10 years with the intent of converting the notes into a structured and computer-readable format. The current site &lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;&amp;nbsp;shows the proof-of-concept that the technical capability is feasible.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I spent two hours manually transcribing&amp;nbsp;three typed pages of math into&amp;nbsp;&lt;a href="https://derivationmap.net/class_notes/math402_mathematical_physics_hale"&gt;https://derivationmap.net/class_notes/math402_mathematical_physics_hale&lt;/a&gt;. The resulting HTML with MathJax was about 150 lines. By the end my attention/focus was waning, so a break was necessary.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The typed notes are merely transcription into computer-readable format; the notes are not in the "equation graph" form necessary for the Physics Derivation Graph. That is a separate tedious process.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Observations&lt;/i&gt;:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;An estimate of how long transcribing all the notes would take:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;If I type HTML+MathJax for 4 hours a day, that seems reasonable&lt;/li&gt;&lt;li&gt;If a box of notes is 1 ream (500 pages), (500 pages/box)*(2 hours/3 pages)*(20 boxes)=6666 hours&lt;/li&gt;&lt;li&gt;6666 hours/(4 hours/day) = 1666.5 days, or 4.5 years&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;There are many diagrams that go with the text and equations. The three pages in this sample didn't have diagrams. Converting the diagrams into tikz would be time consuming.&lt;/li&gt;&lt;li&gt;The structure of the notes is not compatible with the constraints of the "equation graph" structure.&amp;nbsp;&lt;/li&gt;&lt;li&gt;I expect that scanning + OCR would be of limited value for producing Latex. Also, much of the notation in the notes is sloppy and requires translation to more rigorous notation.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Even the more "rigorous notation" is merely an improvement; the notation is a long ways from the specificity needed for use in a computer algebra system. As an example,&amp;nbsp;&lt;/li&gt;&lt;ul&gt;
  &lt;li&gt;the original format for an inner product is (&lt;b&gt;x&lt;/b&gt;, &lt;b&gt;y&lt;/b&gt;) -- here "x" and "y" are merely bolded&lt;/li&gt;
  &lt;li&gt;my more rigorous notation is $(\vec{x}, \vec{y})$&lt;/li&gt;
  &lt;li&gt;Multiplying the inner product by a complex value $\alpha(\vec{x}, \vec{y})$ is visually ambiguous -- it could be interpreted that $\vec{x}$ and $\vec{y}$ are arguments to the function $\alpha$. See also &lt;a href="https://math.stackexchange.com/questions/402005/what-is-rigorous-notation-for-functions"&gt;this question&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Notes for a course are either a single page (with thousands of equations, which render in MathJax slowly) or split among many pages (increasing the number of context switches)&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If typing every page of notes into HTML+MathJax is not reasonable (or useful), then identifying what part of the notes are useful should be the objective.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;
  &lt;li&gt;&lt;i&gt;not useful&lt;/i&gt;: Homework problems and exams are reliant on identifying and applying one or more Physics expressions and then numerically compute the result for a given scenario. Homework problems rarely demonstrate connectivity among Physics expressions.&amp;nbsp;&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;not useful&lt;/i&gt;: identities that arise from definitions. Example: Cauchy Schwartz&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;marginally useful&lt;/i&gt;: Derivation from definitions&amp;nbsp;&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;marginally useful&lt;/i&gt;:&amp;nbsp;Derivation from experiments&amp;nbsp;&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;potentially useful&lt;/i&gt;: Derivation from another expression&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
  Simple harmonic oscillator - identify every domain it is used in&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-01-05T15:55:11.678Z</blogger:created>
    <published>2022-01-05T18:57:00.004Z</published>
    <updated>2022-01-07T02:56:57.870Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/01/two-hours-to-manually-transcribe-three.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2747929847409505836</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>computer algebra system (CAS) is inadequate for the Physics Derivation Graph (PDG)</title>
    <content type='html'>&lt;p&gt;I'm beginning to appreciate that a computer algebra system (CAS) is not sufficient for the Physics Derivation Graph (PDG). The evidence of this is that the variables I'm defining can be real or complex; that is not distinguished by the computer algebra system. 

&lt;/p&gt;&lt;p&gt;The simple story of starting with 
&lt;/p&gt;&lt;pre&gt;a = b&lt;/pre&gt;
and then adding 2 to both sides to get
&lt;pre&gt;a+2 = b+2&lt;/pre&gt;
is appropriate for a computer algebra system. But if "a" is a matrix then the operation is invalid. The only way to distinguish "scalar a" from "vector a" from "matrix a" is to specify the difference. [SymPy does have support for predicates --&amp;nbsp;&lt;a href="https://docs.sympy.org/latest/guides/assumptions.html#predicates"&gt;https://docs.sympy.org/latest/guides/assumptions.html#predicates&lt;/a&gt; .]&lt;p&gt;In the Physics Derivation Graph I want to be more specific about the possible values of a and b. 
Even for non-physics derivations like the Euler equations, there are assumptions about the possible values of each variable.

&lt;/p&gt;&lt;p&gt;I don't know Lean, but I also don't know the foundational concepts of theorems and proofs.&lt;br /&gt;
Is a step a theorem?&lt;br /&gt;
Is a derivation a theorem?&lt;br /&gt;
The role of inference rules in steps in derivations does not map to anything in a theorem.
  
  &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-15T10:21:39.602Z</blogger:created>
    <published>2023-06-15T10:27:00.004Z</published>
    <updated>2023-06-15T10:33:08.953Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='cas'/>
    <blogger:filename>/2023/06/computer-algebra-system-cas-is.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2794395052689147351</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>validating that a user is human by validating steps</title>
    <content type='html'>The Physics Derivation Graph doesn't currently support the existence of user accounts, but I expect that may be needed in the future.&lt;br /&gt;
&lt;br /&gt;
There will be multiple problems to address associated with having users, and one of them is figuring out whether a user is human or not. There are many&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/CAPTCHA"&gt;CAPTCHA&lt;/a&gt; (Completely Automated Public Turing test to tell Computers and Humans Apart) methods to choose from; in this post I'll outline a CAPTCHA specific to the Physics Derivation Graph.&lt;br /&gt;
&lt;br /&gt;
A challenge in the Physics Derivation Graph is to determine whether a step in a derivation is valid or not. Using a computer algebra system (CAS) like Sympy or Sage is viable for simple inference rules and simple expressions. No one CAS is capable of supporting all the PDG content, so manual intervention is necessary.&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Idea&lt;/i&gt;: use the task of validating steps to measure whether a user is human or not.&lt;br /&gt;
This relies on the task of validation being challenging.&lt;br /&gt;
&lt;br /&gt;
Roles:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;step with known validity (either true or false)&lt;/li&gt;
&lt;li&gt;step with unknown validity (either true or false)&lt;/li&gt;
&lt;li&gt;known human user&lt;/li&gt;
&lt;li&gt;computer algebra system (e.g., Sympy) capable of determining step validity&lt;/li&gt;
&lt;li&gt;candidate user (either human or machine)&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
The steps that are validated by both a CAS and a known human will be referred to as "steps that are true" and steps that are not valid as verified by a known human will be referred to as "steps that are false." Both the CAS and the known human are fallible, but I'm going to assume a binary outcome.&amp;nbsp;&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;
Similarly, the candidate user has been forced into a binary category of machine or human. There are gradients here (a good algorithm may be more effective than a dumb human), but I am going to focus on the humans that are smarter than algorithms.&amp;nbsp;&lt;/div&gt;
&lt;br /&gt;
As with other &lt;a href="https://en.wikipedia.org/wiki/Turing_test"&gt;Turing tests&lt;/a&gt;, a single binary question is insufficient because I need to be able to distinguish from a candidate user who merely flips a coin to answer the question.

&lt;br /&gt;
The challenge relevant for the use of step validation can be reduced to the following:
&lt;br /&gt;
&lt;blockquote&gt;
Given N questions with a binary outcome, how certain can I be that the coin is biased?&lt;/blockquote&gt;
The bias of the coin in this situation is the intelligence of the candidate user. A machine algorithm or a dumb user should have results similar to an unbiased coin, while a smart user should get more answers correct than incorrect.&amp;nbsp;
&lt;br /&gt;
&lt;br /&gt;
Instead of focusing on the binary question of "is the step valid or not," attention should be on "did the candidate user get the response correct or not?" with respect to a step where the outcome is known.&lt;br /&gt;
&lt;br /&gt;
Coin flips are modeled by the&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Binomial_distribution"&gt;https://en.wikipedia.org/wiki/Binomial_distribution&lt;/a&gt;, and the number of outcomes for N coin flips is given by&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle"&gt;https://en.wikipedia.org/wiki/Pascal%27s_triangle&lt;/a&gt;&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEilz5zlfZLlFkSgwdLKtrb9N_AAiTqPFSLyzu2ZOYU5CR28JpFmFASyjd2469W0EUuM6zbyCaD2HzI64Igchul7rNfDSBMlkIXuNwFqUnkjhfzliyAxx5TZEMcyAAIfxht4kKGRFr2cJwe5/s1600/Screen+Shot+2020-04-12+at+1.38.38+PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="326" data-original-width="395" height="165" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEilz5zlfZLlFkSgwdLKtrb9N_AAiTqPFSLyzu2ZOYU5CR28JpFmFASyjd2469W0EUuM6zbyCaD2HzI64Igchul7rNfDSBMlkIXuNwFqUnkjhfzliyAxx5TZEMcyAAIfxht4kKGRFr2cJwe5/s200/Screen+Shot+2020-04-12+at+1.38.38+PM.png" width="200" /&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;br /&gt;
Suppose I have N=3 coin flips. The unbiased coin with sides "correct" and "incorrect" will yield "correct, correct, correct" 1/8th of outcomes, just as the outcome of "incorrect, incorrect, incorrect" occurs 1/8th of the time. The other two outcomes (incor, incor, cor) (cor, cor, incor) have three permutations each. This distribution corresponsds to the "1 3&amp;nbsp; 3&amp;nbsp; 1" row in Pascal's triangle.&lt;br /&gt;
&lt;br /&gt;
Now consider N=4 coin flips. The unbiased coin will yield "cor, cor, cor, cor" 1/16th of the time. There are 6 permutations of "cor, cor, incor, incor" which correspond with a 50% success rate -- the most common outcome for an unbiased coin. The "1 4 6 4 1" row of the triangle tells us how many permutations of each outcome there are.&lt;br /&gt;
&lt;br /&gt;
Observations:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;The "number of flips" corresponds to the second diagonal&lt;/li&gt;
&lt;li&gt;There is always one permutation of "all incorrect" and one permutation of "all correct" -- these are the outermost "1" in the triangle&lt;/li&gt;
&lt;li&gt;For an even number of flips, the middle number in the triangle's row is the most common successful outcomes for an unbiased coin.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
For the Physics Derivation Graph, if we provide a candidate user with N questions and they answer N-1 of them correctly, then we have the following likelihood that the coin was unbiased:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;N=2 steps to validate, N-1=1 steps validated correctly: 50%&lt;/li&gt;
&lt;li&gt;N=3 steps to validate, N-1=1 steps validated correctly: %&lt;/li&gt;
&lt;li&gt;N=4 steps to validate, N-1=1 steps validated correctly: %&lt;/li&gt;
&lt;li&gt;N=5 steps to validate, N-1=1 steps validated correctly: %&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
The motivation for using this approach is to support including an additional step for which the validation is unknown. If we have 4 steps for which the validation is known and 1 step for which the validation is unknown, then we can include the extra step and build a profile of whether candidate users think the step is valid or invalid. This extra step would need to be reviewed by many candidate users in order to build up a statistically significant ratio of votes as to the validity.&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-12T17:13:11.798Z</blogger:created>
    <published>2020-04-12T18:02:00Z</published>
    <updated>2020-04-12T18:02:03.624Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/validating-that-user-is-human-by.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2812317021736611256</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>LLM prompts for the Physics Derivation Graph</title>
    <content type='html'>&lt;p&gt;Posing a prompt that gets a useful result currently requires some consideration. Below are some possible tasks for LLMs, along with additional context for the LLM.&lt;/p&gt;

&lt;h2&gt;Convert Latex to SymPy&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;TODO&lt;/i&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide context for Latex -&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/LaTeX"&gt;https://en.wikipedia.org/wiki/LaTeX&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Provide context for&amp;nbsp;SymPy -&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/SymPy"&gt;https://en.wikipedia.org/wiki/SymPy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Provide example conversions&amp;nbsp;&lt;/li&gt;&lt;li&gt;before submitting the prompt to an LLM, make sure the Latex is valid -&amp;nbsp;&lt;a href="https://quicklatex.com/"&gt;https://quicklatex.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer.

&lt;/p&gt;&lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Context: SymPy&amp;nbsp;is an open-source Python library for symbolic computation. SymPy&amp;nbsp;provides a computer algebra system. SymPy can convert Latex math to SymPy, and SymPy can render a mathematical expression as Latex.&lt;/p&gt;&lt;p&gt;Question: What is the SymPy representation for the Latex expression $x^2 + y^2 = 1$ ?&lt;/p&gt;&lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;
&lt;p&gt;&lt;i&gt;Right response&lt;/i&gt;:&lt;/p&gt;

&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer.

&lt;/p&gt;&lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Context: SymPy&amp;nbsp;is an open-source Python library for symbolic computation. SymPy&amp;nbsp;provides a computer algebra system. SymPy can convert Latex math to SymPy, and SymPy can render a mathematical expression as Latex.&lt;/p&gt;&lt;p&gt;Question: What is the SymPy representation for the Latex expression $\vec{p}_{electron} = \vec{p}_{1}-\vec{p}_{2}$ ?&lt;/p&gt;&lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;
&lt;p&gt;&lt;i&gt;Right response&lt;/i&gt;:&lt;/p&gt;

&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer.

&lt;/p&gt;&lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Context: SymPy&amp;nbsp;is an open-source Python library for symbolic computation. SymPy&amp;nbsp;provides a computer algebra system. SymPy can convert Latex math to SymPy, and SymPy can render a mathematical expression as Latex.&lt;/p&gt;&lt;p&gt;Question: What is the SymPy representation for the Latex expression $x = \langle\psi_{\alpha}| \hat{A} |\psi_{\beta}\rangle$ ?&lt;/p&gt;&lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;
&lt;p&gt;&lt;i&gt;Right response&lt;/i&gt;:&lt;/p&gt;


&lt;h2&gt;Specify the mathematical relation between period and frequency as an equation in Latex&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;TODO&lt;/i&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;define period&lt;/li&gt;&lt;li&gt;define frequency -&amp;nbsp;https://en.wikipedia.org/wiki/Frequency&lt;/li&gt;&lt;li&gt;Provide context for&amp;nbsp;Latex -&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/LaTeX"&gt;https://en.wikipedia.org/wiki/LaTeX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;provide example&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i&gt;Caveat&lt;/i&gt;: the page&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Frequency"&gt;https://en.wikipedia.org/wiki/Frequency&lt;/a&gt; includes the statement that
  &lt;/p&gt;&lt;blockquote&gt;"period is the reciprocal of the frequency: f = 1/T."&lt;/blockquote&gt;
&lt;fieldset&gt;
&lt;p&gt;Use the context below to produce a result. Keep the response short and concise. Respond "Unsure about answer" if not sure about the answer.

&lt;/p&gt;&lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Context: Period (symbol T) is the interval of time between events.&amp;nbsp;Frequency (symbol f) is the number of occurrences of a repeating event per unit of time&lt;/p&gt;&lt;p&gt;Specify the mathematical relation between period and frequency as an equation in Latex.&lt;/p&gt;&lt;/fieldset&gt;

&lt;h2&gt;Find arxiv papers with derivations&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;TODO&lt;/i&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Explain arxiv&lt;/li&gt;
  &lt;li&gt;define what I mean by a derivation&lt;/li&gt;
  &lt;li&gt;Provide example citations&lt;/li&gt;
&lt;/ul&gt;
&lt;fieldset&gt;
&lt;p&gt;Provide citations based on the context below.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Context: arxiv is an open-access repository of electronic preprints&lt;/p&gt;&lt;p&gt;Context: a derivation in mathematical Physics consists of a sequence of steps. Each step relates mathematical expressions to an inference rule. An expression is comprised of symbols and operators. An inference rule typically transforms input expressions into output expressions.&lt;/p&gt;
  &lt;p&gt;Cite three papers from arxiv that contain mathematical derivations with more than four steps.&lt;/p&gt;
&lt;/fieldset&gt;

&lt;h2&gt;Identify derivation steps between physics equations&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;TODO&lt;/i&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;define what I mean by a derivation&lt;/li&gt;
  &lt;li&gt;Provide example steps&lt;/li&gt;
&lt;/ul&gt;
&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer. Let's work this out in a step by step way to be sure we have the right answer.&lt;/p&gt;
  &lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;Context: a derivation in mathematical Physics consists of a sequence of steps. Each step relates mathematical expressions to an inference rule. An expression is comprised of symbols and operators. An inference rule typically transforms input expressions into output expressions.&lt;/p&gt;
  &lt;p&gt;Question: What mathematical steps relate the Latex math expression $i x = log(y)$ and $\exp(i x) = y$ ?&lt;/p&gt;
  &lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;
&lt;p&gt;&lt;i&gt;Right answer&lt;/i&gt;: Raise both sides as the power of $\exp$

&lt;/p&gt;&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer. Let's work this out in a step by step way to be sure we have the right answer.&lt;/p&gt;
  &lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;Context: a derivation in mathematical Physics consists of a sequence of steps. Each step relates mathematical expressions to an inference rule. An expression is comprised of symbols and operators. An inference rule typically transforms input expressions into output expressions.&lt;/p&gt;
  &lt;p&gt;Question: What is the derivative of $y = \cos(x) + i \sin(x)$ with respect to $x$ ?&lt;/p&gt;
  &lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;
&lt;p&gt;&lt;i&gt;Right answer&lt;/i&gt;: $\frac{d}{dx} y = -\sin(x) + i\cos(x)$&lt;/p&gt;

&lt;h2&gt;Derive the wave function for a quantum particle in a 1D box&lt;/h2&gt;
&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer. Let's work this out in a step by step way to be sure we have the right answer.&lt;/p&gt;
  &lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;Context: a derivation in mathematical Physics consists of a sequence of steps. Each step relates mathematical expressions to an inference rule. An expression is comprised of symbols and operators. An inference rule typically transforms input expressions into output expressions.&lt;/p&gt;
  &lt;p&gt;Question: derive the wave function for a quantum particle in a 1D box&lt;/p&gt;
  &lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;
&lt;p&gt;Right answer: see https://derivationmap.net/review_derivation/000010/

&lt;/p&gt;

&lt;h2&gt;Derive Newton's Law of Universal Gravitation&lt;/h2&gt;
&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer. Let's work this out in a step by step way to be sure we have the right answer.&lt;/p&gt;
    &lt;p&gt;Context: a derivation in mathematical Physics consists of a sequence of steps. Each step relates mathematical expressions to an inference rule. An expression is comprised of symbols and operators. An inference rule typically transforms input expressions into output expressions.&lt;/p&gt;
  &lt;p&gt;provide a derivation of Newton's Law of Universal Gravitation
&lt;/p&gt;&lt;/fieldset&gt;
&lt;p&gt;See &lt;a href="https://physicsderivationgraph.blogspot.com/2023/06/finding-derivations-of-newtons-law-of.html"&gt;https://physicsderivationgraph.blogspot.com/2023/06/finding-derivations-of-newtons-law-of.html&lt;/a&gt;

&lt;/p&gt;&lt;h2&gt;Convert derivation steps to a proof in Lean&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;TODO&lt;/i&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;define what I mean by a derivation&lt;/li&gt;
  &lt;li&gt;Explain lean&lt;/li&gt;
  &lt;li&gt;Provide example&lt;/li&gt;
  &lt;li&gt;Emphasize correctness and precision&lt;/li&gt;
&lt;/ul&gt;
&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer.&amp;nbsp;Let's work this out in a step by step way to be sure we have the right answer.&lt;/p&gt;
  &lt;p&gt;Context: Lean is a proof assistant and programming language. Lean is based on the calculus of constructions with inductive types.&lt;/p&gt;&lt;p&gt;`a=b` is a proposition. The variable `a` is Real valued and `b` is Real valued. Prove in Lean that `(a=b) -&amp;gt; (a+2=b+2)`&lt;/p&gt;&lt;/fieldset&gt;

&lt;h2&gt;Identify symbols in latex arxiv papers&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;TODO&lt;/i&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide example&lt;/li&gt;
  &lt;li&gt;Emphasize correctness and precision&lt;/li&gt;
&lt;/ul&gt;
&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer.

&lt;/p&gt;&lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;Question: What mathematical expressions are present in the following Latex?&lt;/p&gt;
  &lt;pre&gt;```
\begin{equation}
a = b + c
\end{equation}
Assuming you know $b$, then
\begin{equation}
b*c = f
\end{equation}
```&lt;/pre&gt;
  &lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;

&lt;fieldset&gt;
&lt;p&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer.

&lt;/p&gt;&lt;p&gt;Context: Latex is&amp;nbsp;software for document preparation to generate PDF files. Mathematical equations can be expressed in Latex using markup syntax.&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;Question: What variables are present in the following Latex?&lt;/p&gt;
&lt;pre&gt;```
\begin{equation}
a = b + c
\end{equation}
Assuming you know $b$, then
\begin{equation}
b*c = f
\end{equation}
```&lt;/pre&gt;
  &lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-12-16T19:13:26.456Z</blogger:created>
    <published>2023-12-16T19:22:00Z</published>
    <updated>2023-12-16T22:14:57.340Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='prompts for LLMs'/>
    <blogger:filename>/2023/12/llm-prompts-for-physics-derivation-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2826458503596253803</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>characterizing Latex content in arXiv.org .tex files</title>
    <content type='html'>&lt;ul&gt;
&lt;li&gt; how many total .tex files?
&lt;/li&gt;
&lt;li&gt; how many english words per file?
&lt;/li&gt;
&lt;li&gt; how many expressions total in the corpus?
&lt;/li&gt;
&lt;li&gt; distribution of (number of expressions) per file
&lt;/li&gt;
&lt;li&gt; what's the distribution of (ratio of words per file to expressions per file)
&lt;/li&gt;
&lt;li&gt; how many known latex symbols are present in all the expressions
&lt;/li&gt;
&lt;li&gt; what is the distribution of (expression length in characters)
&lt;/li&gt;
&lt;li&gt; what is the distribution of (known symbols per expression)
&lt;/li&gt;
&lt;li&gt;are there character sequences that are extremely rare? binary files hidden in .tex and other anomalies&lt;/li&gt;
&lt;/ul&gt;
This characterization step will be useful when comparing domains.
For example, if we sample another domain (e.g., quantum mechanics),
are the distributions similar or not?
If we see that the same characterization, then we can expect that the
techniques you develop are likely to apply to a novel corpus.

&lt;br /&gt;
&lt;br /&gt;
Establishing that the sample being used is generic means we can work
with a smaller data set (rather than "all the .tex in arXiv"). Showing
the distribution shape does not change as more .tex files are added
means convergence is possible.

&lt;br /&gt;
&lt;br /&gt;
If we find a domain that doesn't have a similar distributions, then we
can investigate why it is anomalous.
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-31T02:21:47.046Z</blogger:created>
    <published>2020-05-31T02:23:00Z</published>
    <updated>2020-06-07T01:52:29.243Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/characterizing-latex-content-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2931983744257752412</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>addressing the rendering versus verifiability challenge</title>
    <content type='html'>For the Physics Derivation Graph, the primary output is visual. Thus rendering expressions should be beautiful. Latex is a natural choice and the entry is intuitive and straightforward.&lt;br /&gt;
&lt;br /&gt;
In addition to rendering, the other task is to verify that the content is correct. This means using a computer algebra system (ie Mathematica, Octave). Latex is not amenable to CAS input because Latex can be mathematically ambiguous -- resolution depends on context.&lt;br /&gt;
&lt;br /&gt;
One way to resolve this would be to stick with Latex, then convert to a CAS format for verifying correctness.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Sage&lt;/h3&gt;
As an example, suppose I want to check that the expression "multbothsidesby" was correctly entered for input T/f=1, output T=f, with feed f. The &lt;a href="https://cloud.sagemath.com/"&gt;Sage syntax&lt;/a&gt; looks like&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;T,f=var('T,f')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;input_expr = T/f==1&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;expected_output_expr= T==f&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;expected_output_expr == input_expr*f&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;The above Sage returns true, building confidence that the step is valid. More simply,&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;T,f=var('T,f')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;(T==f) == ((T/f==1)*f)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;If Latex is to be used as the input, then we need to convert it to Sage syntax.&lt;/span&gt;&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;declare each variable in Sage&lt;/li&gt;
&lt;li&gt;replace "=" in Latex with "=="&lt;/li&gt;
&lt;li&gt;convert the inference rule to something that can be checked&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
In addition to using a Sage notebook (&lt;a href="https://cloud.sagemath.com/"&gt;https://cloud.sagemath.com&lt;/a&gt;), there's a one-time eval option --&amp;nbsp;&lt;a href="http://sagecell.sagemath.org/"&gt;http://sagecell.sagemath.org/&lt;/a&gt;&lt;br /&gt;
Calling a local installation of Sage is possible from Python, see&amp;nbsp;&lt;a href="http://ask.sagemath.org/question/8215/using-sage-in-a-python-cgi-script/"&gt;http://ask.sagemath.org/question/8215/using-sage-in-a-python-cgi-script/&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2016-05-26T02:45:59.534Z</blogger:created>
    <published>2016-05-26T02:54:00Z</published>
    <updated>2016-05-27T20:59:27.212Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/05/addressing-rendering-versus.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2967427749299969604</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>linear storytelling constrains how one thinks</title>
    <content type='html'>Textbooks are linear. Knowledge is not.&lt;br /&gt;
&lt;br /&gt;
Describing content in graph form makes storytelling more complicated, but is a closer knowledge represenation</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-14T01:54:43.768Z</blogger:created>
    <published>2015-09-14T01:55:00Z</published>
    <updated>2015-10-17T11:14:38.855Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/linear-storytelling-should-limit.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-2990238206912789068</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>online digital math libraries and Physics libraries</title>
    <content type='html'>&lt;h2&gt;
Mathematics&lt;/h2&gt;
There are multiple formal math databases:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mizar.org/library/"&gt;Mizar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://metamath.tirix.org/index.html"&gt;Metamath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
In addition to formal math databases, there are digital math libraries&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Digital Math Library;&amp;nbsp;&lt;a href="https://www.math.uni-bielefeld.de/~rehmann/DML/dml_links.html"&gt;https://www.math.uni-bielefeld.de/~rehmann/DML/dml_links.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the proposed "&lt;a href="https://en.wikipedia.org/wiki/Global_Digital_Mathematics_Library"&gt;World Digital Mathematics Library&lt;/a&gt; (WDML)" was rebranded to the "&lt;a href="https://en.wikipedia.org/wiki/Global_Digital_Mathematics_Library"&gt;Global Digital Mathematics Library&lt;/a&gt;" run by the &lt;a href="https://imkt.org/gdml-wg/"&gt;International Mathematical Knowledge Trust's GDML working group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathscinet.ams.org/dmr/index.html"&gt;AMS Digital Mathematics Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eudml.org/"&gt;European Digital Mathematics Library (EuDML)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/archive/math"&gt;arxiv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
These digital math libraries are relevant for searching and parsing content.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
"How to Build a Global Digital Mathematics Library" by S Watt&lt;br /&gt;
&lt;a href="https://cs.uwaterloo.ca/~smwatt/pub/reprints/2016-synasc-gdml.pdf"&gt;https://cs.uwaterloo.ca/~smwatt/pub/reprints/2016-synasc-gdml.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
Physics&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://inspirehep.net/"&gt;https://inspirehep.net/&lt;/a&gt;;&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/INSPIRE-HEP"&gt;https://en.wikipedia.org/wiki/INSPIRE-HEP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/archive/physics"&gt;https://arxiv.org/archive/physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://network.bepress.com/physical-sciences-and-mathematics/physics/"&gt;http://network.bepress.com/physical-sciences-and-mathematics/physics/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ui.adsabs.harvard.edu/"&gt;astrophysics data system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nist.gov/pml/productsservices/physical-reference-data"&gt;NIST reference data for Physics&lt;/a&gt;; &lt;a href="https://www.nist.gov/pml/fundamental-physical-constants"&gt;constants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
See also&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://guides.lib.unc.edu/az.php?s=1185"&gt;https://guides.lib.unc.edu/az.php?s=1185&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://physicalsciences.library.cornell.edu/physics-databases/"&gt;https://physicalsciences.library.cornell.edu/physics-databases/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Teaching resource:&amp;nbsp;&lt;a href="https://www.compadre.org/"&gt;https://www.compadre.org/&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-31T17:45:04.532Z</blogger:created>
    <published>2020-07-31T17:59:00Z</published>
    <updated>2020-07-31T18:27:59.837Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/multiple-of-online-digital-math.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3008031599829987106</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Physics-Informed Neural Networks (PINN) and Deep symbolic regression for physics</title>
    <content type='html'>&lt;div&gt;https://github.com/WassimTenachi/PhySO&amp;nbsp;&lt;/div&gt;&lt;div&gt;https://twitter.com/astro_wassim/status/1633645134934949888&lt;/div&gt;https://arxiv.org/abs/2303.03192&amp;nbsp;&lt;div&gt;I haven't read enough to understand whether there's a connection to 
Physics-Informed Neural Networks
https://arxiv.org/abs/2201.05624&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Both seem to rely on experimental data.&amp;nbsp;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-03-10T20:04:08.802Z</blogger:created>
    <published>2023-03-10T20:05:00.006Z</published>
    <updated>2023-03-10T20:05:41.987Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3011361310650746394</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>jupyter installation</title>
    <content type='html'>Installation of Jupyter (&amp;nbsp;&lt;a href="https://jupyter.readthedocs.org/en/latest/install.html"&gt;https://jupyter.readthedocs.org/en/latest/install.html&lt;/a&gt;&amp;nbsp;) and&lt;br /&gt;
&lt;a href="https://github.com/ipython/ipyparallel"&gt;https://github.com/ipython/ipyparallel&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;sudo pip install jupyter&lt;/span&gt;&lt;br /&gt;








&lt;br /&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;sudo pip install ipyparallel&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;jupyter notebook --generate-config&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;span class="s1"&gt;vi ~&lt;/span&gt;/.jupyter/jupyter_notebook_config.py&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;c.NotebookApp.server_extensions.append('ipyparallel.nbextension')&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-28T14:03:15.438Z</blogger:created>
    <published>2015-09-28T14:07:00.002Z</published>
    <updated>2015-09-28T14:07:22.010Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/jupyter-installation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3028569960019534827</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>replacing symbols in a Sympy expression and generalizing the AST</title>
    <content type='html'>Sympy's ability to convert a Latex string to a Sympy expression is useful but does not relate information about the variables in the Latex string to other resources (like dimension).&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy import Equality, Add, Symbol, Mul, Pow,&amp;nbsp;Integral, Tuple&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
First, remove all presentation-related markup from a Latex string.&lt;/div&gt;
&lt;div&gt;
Then convert a Latex string to a Sympy expression using&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq = parse_latex('a + b = c')&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Eq(a + b, c)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
In this post we will replace the variables with the reference IDs for each variable while maintaining the structure of the expression.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
The structure of the expression is&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(eq)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"Equality(Add(Symbol('a'), Symbol('b')), Symbol('c'))"&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Since this is a string, we can replace each variable in the expression with a reference ID.&lt;/div&gt;
&lt;div&gt;
The set of variables in the expression can be accessed using&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; set_of_symbols_in_eq = eq.free_symbols&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; set_of_symbols_in_eq&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;{a, c, b}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
We can then replace each variable with an ID&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_str_with_id = sympy.srepr(eq).replace("'a'","'pdg4942'").replace("'b'","'pdg3291'").replace("'c'","'pdg0021'")&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_str_with_id&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"Equality(Add(Symbol('pdg4942'), Symbol('pdg3291')), Symbol('pdg0021'))"&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Lastly, evaluate the string to get a Sympy expression&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_with_id = eval(eq_str_with_id)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_with_id&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Eq(pdg3291 + pdg4942, pdg0021)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The reason this representation is useful is because of the separation of presentation from semantic structure.&lt;br /&gt;
&lt;br /&gt;
And getting the symbol list is easy:&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_with_id.free_symbols&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp;{pdg3291, pdg4942, pdg0021}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;
Example&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;
To show why separation matters, suppose we have the Latex string&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;f = \int_{x_{\rm bottom}}^{x_{\rm top}} g dg&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
That is a challenge for Sympy's parse_latex, even though Sympy can handle semantically equivalent structures like&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex('f = \int_a^b g dg')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Eq(f, Integral(g, (g, a, b)))&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
If we happen to know that x_{\rm bottom} is a variable and we know that x_{\rm top} is a variable, then we can simplify the presentation string to a temporary string using dummy variables&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; initial_latex_str = 'f = \int_{x_{\rm bottom}}^{x_{\rm top}} g dg'&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; tmp_latex_str = initial_latex_str.replace('x_{\rm bottom}','p').replace('x_{\rm top}','q')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; tmp_latex_str&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;'f = \\int_{p}^{q} g dg'&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;i&gt;Caveat&lt;/i&gt;: the dummy variables (here &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;p&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;q&lt;/span&gt;) cannot exist in &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;initial_latex_str&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Now we can act on the tmp_latex_str as we did in the first example&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq = parse_latex(tmp_latex_str)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_str_with_id = sympy.srepr(eq).replace("'p'","'pdg4942'").replace("'q'","'pdg3291'").replace("'g'","'pdg0021'").replace("'f'","'pdg2103'")&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_with_id = eval(eq_str_with_id)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; eq_with_id&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Eq(pdg2103, Integral(pdg0021, (pdg0021, pdg4942, pdg3291)))&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;h3&gt;
Algorithm for Converting Latex to Semantically-meaningful expression&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;get a Latex string&lt;/li&gt;
&lt;li&gt;clean the Latex by removing presentation syntax&lt;/li&gt;
&lt;li&gt;In the cleaned Latex string, identify known variables from the PDG that the Sympy parser does not handle, e.g., &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;r_{\rm Earth}&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;In the cleaned Latex string,&amp;nbsp;replace each known variable with a dummy variable, e.g. &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;d = r_{\rm Earth},&lt;/span&gt;&lt;span style="font-family: inherit;"&gt; where the dummy variable does not appear in the Latex string.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;eq = parse_latex(&lt;i&gt;cleaned latex string with dummy variables&lt;/i&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;replace variables and dummy variables in &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;eq&lt;/span&gt; with PDG symbol ID&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-30T19:20:14.024Z</blogger:created>
    <published>2020-05-30T20:14:00.001Z</published>
    <updated>2020-05-30T21:47:25.761Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/replacing-symbols-in-sympy-expression.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3070938011609086219</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>why software used by the Physics Derivation Graph is open source</title>
    <content type='html'>The Physics Derivation Graph content is available under&amp;nbsp;the &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;, and I use open source software.&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/license.html"&gt;Python license&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.latex-project.org/lppl/"&gt;LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.graphviz.org/license/"&gt;graphviz license&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocaml.org/docs/license.html"&gt;OCaml license&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/blob/master/LICENSE"&gt;SymPy license&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sagemath.org/"&gt;Sage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
I avoid software that is not open source and not free&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Matlab&lt;/li&gt;
&lt;li&gt;Mathematica&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.maplesoft.com/products/Maple/"&gt;Maple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://magma.maths.usyd.edu.au/magma/ordering/"&gt;Magma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MathCAD&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
My motivations for this include&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;wider accessibility of the results due to fewer constraints&lt;/li&gt;
&lt;li&gt;enable other people to build on top of the results&lt;/li&gt;
&lt;li&gt;contribute back to the community which has provided so much&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2018-06-20T02:05:42.551Z</blogger:created>
    <published>2018-06-20T02:35:00.003Z</published>
    <updated>2018-06-20T02:35:36.637Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/06/why-software-used-by-physics-derivation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3079436086678998825</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>not getting caught in the details -- identifying priorities</title>
    <content type='html'>There are lots of relevant topics with the Physics Derivation Graph:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;representing expressions prettily -- ie Latex, MathJax, MathML (presentation)&lt;/li&gt;
&lt;li&gt;storing expressions meaningfully -- ie an Abstract Syntax Tree, MathML (content)&lt;/li&gt;
&lt;li&gt;converting between presentation and content&lt;/li&gt;
&lt;li&gt;converting between non-propriatry content representation and a Computer Algebra System&lt;/li&gt;
&lt;li&gt;finding a Computer Algebra System capable of handling most of mathematical physics&lt;/li&gt;
&lt;li&gt;manually creating content (ie actual derivations)&lt;/li&gt;
&lt;li&gt;entering content manually into the Physics Derivation Graph&lt;/li&gt;
&lt;li&gt;searching for content (ie PDFs of derivations)&lt;/li&gt;
&lt;li&gt;converting found content (ie PDFs) to input for the Physics Derivation Graph&lt;/li&gt;
&lt;li&gt;checking the consistency of content in the Physics Derivation Graph&lt;/li&gt;
&lt;li&gt;rendering the content of the Physics Derivation Graph, ie using d3js or GraphViz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
There are dependencies among these tasks. Also, there is an order for the tasks. Below I group and order the tasks.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
Getting content is vital to the Physics Derivation Graph being useful.&amp;nbsp;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;manually creating content (ie actual derivations)&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;entering content manually into the Physics Derivation Graph&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;searching for content (ie PDFs of derivations)&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;converting found content (ie PDFs) to input for the Physics Derivation Graph&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
Before entering content into a computer, it makes sense to choose how to store the data&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;representing expressions prettily -- ie Latex, MathJax, MathML (presentation)&lt;/li&gt;
&lt;li&gt;storing expressions meaningfully -- ie an Abstract Syntax Tree, MathML (content)&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;converting between presentation and content&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
Once content exists, it would be useful to validate&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;checking the consistency of content in the Physics Derivation Graph&lt;/li&gt;
&lt;li&gt;finding a Computer Algebra System capable of handling most of mathematical physics&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;converting between non-proprietary content representation and a Computer Algebra System&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
Lastly, but no less important, how will consumers interact with the data?&lt;/div&gt;
&lt;ul&gt;&lt;ul&gt;&lt;/ul&gt;
&lt;li&gt;rendering the content of the Physics Derivation Graph, ie using d3js or GraphViz&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2017-06-16T00:38:42.192Z</blogger:created>
    <published>2017-06-16T00:52:00.003Z</published>
    <updated>2017-06-16T00:52:57.999Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/06/not-getting-caught-in-details.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3094950100107714656</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>major fields for the PDG to cover</title>
    <content type='html'>Update 20190728: this content has been copied to &lt;a href="https://physicsderivationgraph.blogspot.com/2017/07/finding-edges-for-physics-derivation.html"&gt;this page&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;div&gt;
Step 1: identify major fields in Physics&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Electromagnetism&lt;/li&gt;
&lt;li&gt;relativity&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;astrophysics&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;quantum mechanics&lt;/li&gt;
&lt;li&gt;classical mechanics&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;thermodynamics&lt;/li&gt;
&lt;li&gt;astrophysics&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
Step 2: identify top derivations associated with each area&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;EM: Maxwell's equations&lt;/li&gt;
&lt;li&gt;Relativity: Lorentz (time dilation, length contraction)&lt;/li&gt;
&lt;li&gt;Quantum: Schrodinger, Uncertainty&lt;/li&gt;
&lt;li&gt;Classical: F=ma, conservation of energy and momentum&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Step 3:&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-14T01:51:25.267Z</blogger:created>
    <published>2015-09-14T01:54:00.002Z</published>
    <updated>2019-07-28T20:18:51.834Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/major-fields-for-pdg-to-cover.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3113189117439361255</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>old log entries from 2014</title>
    <content type='html'>&lt;p&gt;20140927     syntax := ABNF

&lt;/p&gt;&lt;p&gt;An issue I've previously encountered is how to store the information associated with the graph. I started with plain text, and then moved to XML (the current state). The content stored in the XML is Latex. Latex renders well, but lacks context (meaning). I am now investigating Content MathML as a stricter (but less widely adopted) syntax. Although Content MathML is better, it doesn't entirely capture the use I intend for this project. 

&lt;/p&gt;&lt;p&gt;The core of the project centers on the following two conventions:
&lt;/p&gt;&lt;pre&gt;&amp;lt;statement&amp;gt; = &amp;lt;left hand side&amp;gt; &amp;lt;relation&amp;gt; &amp;lt;right hand side&amp;gt;
&amp;lt;statement&amp;gt; --&amp;gt; &amp;lt;inference rule&amp;gt; --&amp;gt; &amp;lt;statement&amp;gt;
&lt;/pre&gt;
The relation is typically equality or inequality, though it could include union and other operators. 

&lt;p&gt;The inference rule acts on one or more statements.

&lt;/p&gt;&lt;p&gt;The statement is the relation between two mathematical expressions

&lt;/p&gt;&lt;p&gt;This is outside the scope of Content MathML, XML, and Latex. I think the appropriate capture is to use something like &lt;a href="https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form"&gt;Augmented Backus-Naur Form&lt;/a&gt; (ABNF). Here are a few possible rules:
&lt;/p&gt;

&lt;p&gt;derivation = 1*2statement inferenceRule statement; some derivations involve multiple input statements, here we allow 1 or 2

&lt;/p&gt;&lt;pre&gt;statement = mathExpression relation mathExpression

mathExpression = *ALPHA *DIGIT *SP *operator *"\" *"." *"," *"'" 

relation = ( "=" / "&amp;lt;=" / "&amp;lt;" / "&amp;gt;" / "&amp;gt;=" / "U" )

operator = ( "+" / "-" / "/" / "*" / "^" / "!" / ( "[" "]" ) / ( "(" ")" ) / ( "{" "}" ) / "|" )
&lt;/pre&gt;
Looking at &lt;a href="https://code.google.com/archive/p/physics-equations-graph/source/default/source"&gt;the code&lt;/a&gt;, I've already adopted the following rules
&lt;pre&gt;&lt;a href="https://code.google.com/p/physics-equations-graph/source/browse/trunk/databases/inference_rules_database.xml"&gt;infrule_name&lt;/a&gt; = 1*ALPHA

&lt;a href="https://code.google.com/p/physics-equations-graph/source/browse/trunk/databases/connections_database.xml"&gt;statement_punid&lt;/a&gt; = 10DIGIT

&lt;a href="https://code.google.com/p/physics-equations-graph/source/browse/trunk/databases/connections_database.xml"&gt;statement_tunid&lt;/a&gt; = 7DIGIT

&lt;a href="https://code.google.com/p/physics-equations-graph/source/browse/trunk/databases/symbols_database.xml"&gt;symbol_punid&lt;/a&gt; = 15DIGIT
&lt;/pre&gt;

&lt;p&gt;From my notes, it appears I first figured out the requirement for the statement label restrictions on 20110406.

&lt;/p&gt;&lt;p&gt;20140527     commercial projects

&lt;/p&gt;&lt;p&gt;In the past week I've been made aware of 3 commercial efforts similar to this project

&lt;/p&gt;
  
  &lt;ul&gt;
&lt;li&gt;EquationMap&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://formula-database.com/release/"&gt;Formula-Database
&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://www.symbolab.com/"&gt;SymboLab&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;p&gt;SymboLab and Formula-Database are similar, in that both are about search of equations. In addition to search, SymboLab provides derivations and plot. It's not clear whether these are dynamic or hand-coded. SymboLab appears to be more mathematics oriented, whereas Formula-Database has descriptions of the physics and symbol definitions. EquationMap is about user-generated graphs of derivations. My project has a poorer user interface, and the objective is grander (capture all of physics derivations).

&lt;/p&gt;&lt;p&gt;None of these three are direct competition with this open source project, though there is overlap with subtasks from each project. I don't see a clear use case for any of the three -- if it were that useful as a product, I would have expected someone else to already be working in this area. 

&lt;/p&gt;&lt;p&gt;I'm not clear on why there aren't other open source projects in this area. &lt;a href="https://proofwiki.org/wiki/Euler%27s_Identity"&gt;Proofwiki.org&lt;/a&gt; is not graph-based, and PlanetPhysics disappeared.

&lt;/p&gt;&lt;p&gt;20140527     task prioritization

&lt;/p&gt;&lt;p&gt;Task prioritization:

&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;navigable interface. The current graph is large enough that intuitive navigation is an issue which needs to be addressed. The graph is currently rendered as a static PNG file. Rendering the graph in a web browser might be more accessible (allowing interactive navigation), and would generate a new set of issues to be addressed (i.e., reading XML databases into a new data structure). By "navigable interface" I am distinguishing from an interface for entering new data to be stored in the database
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mkolkowski.lqnstudio.mydevil.net/"&gt;http://mkolkowski.lqnstudio.mydevil.net/
&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://cytoscapeweb.cytoscape.org/demos"&gt;http://cytoscapeweb.cytoscape.org/demos&lt;/a&gt;. This is flash-based, but the pan-zoom feature is present in &lt;a href="https://github.com/cytoscape/cytoscape.js-panzoom"&gt;https://github.com/cytoscape/cytoscape.js-panzoom
&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;li&gt;ability to high-light subsections of the total graph related to a specific derivation
&lt;/li&gt;&lt;li&gt;ability to high-light the symbol use graph within the statement graph
&lt;/li&gt;&lt;li&gt;add content (E=mc^2, Maxwell's equations)
&lt;/li&gt;&lt;li&gt;fully check graph using CAS (currently SymPy)
&lt;/li&gt;&lt;li&gt;user input through CLI
&lt;/li&gt;&lt;li&gt;user input through web browser GUI
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mathquill.com/"&gt;MathQuill&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
To create a navigable interface, my first guess is to start by finding an example of an HTML5/Javascript directed graph with png/svg files as nodes. This is because I think it's probably unrealistic to render the Latex statements in a browser with a dynamic graph

&lt;p&gt;As far as intuitive interface, I like Google Maps and its ability to zoom in/out when visualizing large spatial data. EquationMap is a good start but isn't open source.

&lt;/p&gt;&lt;p&gt;20140526     computer algebra system (CAS) inputs

&lt;/p&gt;&lt;p&gt;In reviewing candidate Computer Algebra systems, I still think SymPy is the best option compared to the other free and open source CASs

https://en.wikipedia.org/wiki/List_of_computer_algebra_systems

&lt;/p&gt;&lt;p&gt;Currently I expect the user to provide two inputs for each statement: Latex for visual rendering, and the SymPy equivalent for checking with the CAS. This is redundant, since SymPy can render Latex.

&lt;/p&gt;&lt;p&gt;The reason I let the user supply Latex is because as a physicist I think in terms of Latex (not SymPy). I treat the addition of the SymPy equivalent as a second step

&lt;/p&gt;&lt;p&gt;I have a fundamental conflict with (1) wanting the input format to be easy (i.e., Latex) and (2) wanting the content to be checkable by a CAS (i.e., MathML). I don't think there is a an easy-to-input format which is also easily checkable by a CAS. 

&lt;/p&gt;&lt;p&gt;Does the database need to be checked by a CAS?

&lt;/p&gt;&lt;p&gt;There are two reasons one builds this database:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;as a notepad for current research, possibly to be used in a publication. Assumptions: dynamic; written to by only a few people; it may contain mistakes. Thus, it would be helpful to be checked by a CAS
&lt;/li&gt;&lt;li&gt; to store relations between all accumulated knowledge. Assumptions: static database; written to by many people; read by many people. Thus, mistakes are likely to be found whether or not there is a CAS
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;20140510       graph vs relational database

&lt;/p&gt;&lt;p&gt;I need to better understand the difference between Graph vs relational database vs object
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Graph_database
&lt;/li&gt;&lt;li&gt;https://en.wikipedia.org/wiki/Relational_databases
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-02-09T02:03:39.653Z</blogger:created>
    <published>2022-02-09T02:22:00.002Z</published>
    <updated>2022-02-09T02:28:01.088Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='migrated_from_physicsderivationgraph'/>
    <blogger:filename>/2022/02/log-entries-from-2014.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3193999784649874337</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>notes from reading "A Step-by-Step Solution Methodology for Mathematical Expressions"</title>
    <content type='html'>A Step-by-Step Solution Methodology for Mathematical Expressions&lt;br /&gt;
by Sahereh Hosseinpour, Mir Mohammad Reza Alavi Milani and Hüseyin Pehlivan&lt;br /&gt;
Symmetry 2018, 10(7), 285; https://doi.org/10.3390/sym10070285&lt;br /&gt;
&lt;a href="https://www.mdpi.com/2073-8994/10/7/285/htm"&gt;https://www.mdpi.com/2073-8994/10/7/285/htm&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
The following sites parse input, take a specified action, and show the steps&lt;br /&gt;
(I'm not sure whether these two sites are related or clones of each other)&lt;br /&gt;
https://www.softmath.com/math-com-calculator/quadratic-equations/myalgebra.com.html&lt;br /&gt;
https://www.mathsite.org/maths-factors/perpendicular-lines/myalgebra.com.html&lt;br /&gt;
Also see https://www.mathway.com/Algebra and http://www.webmath.com/&lt;br /&gt;
&lt;br /&gt;
I find it fascinating to read about someone else having an idea similar to mine:&lt;br /&gt;
"Our methodology uses a grammar-based approach to convert mathematical expressions into abstract syntax trees (AST) on which new methods can be developed for different evaluation or interpretation requirements. In this way, users can dynamically enter expressions and all the intermediate operations on them can successfully be achieved through AST nodes." ... "It can also be a good platform for the development of educational products in the field of mathematics, which can display all problem-solving steps."&lt;br /&gt;
&lt;br /&gt;
I'm not clear on the distinctions of the three approaches to solvers, but it's helpful to know there's more than one approach&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;computer algebra system&lt;/li&gt;
&lt;li&gt;rule based: "Starting with a mathematical expression, this approach transforms it into another equivalent expression and compares it with the intended target expression for equivalence verification."&lt;/li&gt;
&lt;li&gt;structural approach: "two mathematical expressions are first represented as two mathematical expression trees. Then, tree matching algorithm is used to compare the two trees using dynamic programming for equivalence verification.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;
&lt;div&gt;
&lt;b&gt;Section 2.3 walks through the entire process of getting from BNF to an AST.&amp;nbsp;&lt;/b&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-03-14T01:20:43.376Z</blogger:created>
    <published>2020-03-14T01:58:00.001Z</published>
    <updated>2020-03-14T01:58:39.021Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/03/notes-from-reading-step-by-step.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3197184250197986655</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Major rewrite of backend and frontend, possibly on new domain</title>
    <content type='html'>&lt;p&gt;I currently own&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;, and I was recently gifted &lt;a href="https://allofphysics.com/"&gt;https://allofphysics.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;At the same time, I'm working on rewriting the backend (to Neo4j from JSON) and the front-end (Cypher-based search instead of static HTML+Javascript).&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Concurrently hosting both the old version (JSON backend, HTML, &lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;) and the new version (Neo4j, Cypher, &lt;a href="https://allofphysics.com/"&gt;https://allofphysics.com/&lt;/a&gt;) on the same virtual private server (VPS) is probably feasible but I haven't done that before.&lt;/p&gt;&lt;p&gt;My evidence that hosting two domains on one server is feasible:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-08-19T13:19:20.646Z</blogger:created>
    <published>2022-10-09T14:37:00Z</published>
    <updated>2022-10-09T14:37:01.175Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3206434659845842679</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>working with Sympy symbols extracted from a Latex expression</title>
    <content type='html'>I'm using SymPy to work with Latex expressions&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;import sympy&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;sympy.__version__&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;'1.5.1'&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
I can convert Latex to SymPy using&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;from sympy.parsing.latex import parse_latex&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;eq = parse_latex("F = m a")&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;eq.rhs&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;a*m&lt;/span&gt;&lt;br /&gt;
However, to work with the symbols in SymPy I need to extract them from the expression&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;set_of_symbols_in_eq = eq.free_symbols&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;set_of_symbols_in_eq&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;{a, F, m}&lt;/span&gt;&lt;br /&gt;
The entries exist in the set&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;type(list(set_of_symbols_in_eq)[0])&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;class 'sympy.core.symbol.Symbol'&amp;gt;&lt;/span&gt;&lt;br /&gt;
but they are not defined as Python variables&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;F&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;NameError: name 'F' is not defined&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
To associate a Python variable with each symbol, I used&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;for symb in set_of_symbols_in_eq:&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;...&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;b&gt;exec(str(symb) + " = sympy.symbols('" + str(symb) + "')")&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Then the Python variable "F" is associated with the Sympy Symbol "F"&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;F&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;F&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;type(F)&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;class 'sympy.core.symbol.Symbol'&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;For the relevance of this thread, see&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;a href="https://groups.google.com/d/msg/sympy/_RnbbOqhERM/YAoJAbyPAgAJ"&gt;https://groups.google.com/d/msg/sympy/_RnbbOqhERM/YAoJAbyPAgAJ&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-28T02:09:17.857Z</blogger:created>
    <published>2020-05-28T02:13:00.001Z</published>
    <updated>2020-05-30T20:46:32.139Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/working-with-sympy-symbols-extracted.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3329327334585869815</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>mapping out topics in Physics</title>
    <content type='html'>&lt;p&gt;Maps of Physics are like catnip to me.&lt;/p&gt;&lt;p&gt;https://www.youtube.com/watch?v=ZihywtixUYo&lt;/p&gt;&lt;p&gt;https://www.preposterousuniverse.com/podcast/2023/07/31/245-solo-the-crisis-in-physics/&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Gaps and boundaries in Physics&lt;/h2&gt;&lt;p&gt;If we constructed a map of constraints on applicability of theories, how many dimensions would be needed and what would the dimensions be?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Newtonian Mechanics&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;spatial size&lt;/b&gt; between thousands of kilometers and millimeters&lt;/li&gt;&lt;li&gt;&lt;b&gt;temporal duration&lt;/b&gt; between thousands of years and milliseconds&lt;/li&gt;&lt;li&gt;&lt;b&gt;speed of object&lt;/b&gt; between motionless and thousands of meters per second&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Electrodynamics, governed by Maxwell's equations&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/General_relativity"&gt;General relativity&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Special Relativity&lt;/li&gt;&lt;li&gt;Quantum Mechanics&lt;/li&gt;&lt;li&gt;Relativistic Quantum Mechanics&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-08-01T02:42:49.599Z</blogger:created>
    <published>2023-08-01T02:51:00.003Z</published>
    <updated>2023-08-01T02:51:28.612Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3334043754246492619</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>heroku on mac</title>
    <content type='html'>&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&amp;nbsp; 502&amp;nbsp; sudo pip install virtualenv&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&amp;nbsp; 503&amp;nbsp; heroku&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&amp;nbsp; 505&amp;nbsp; cd ~/version_controlled/&lt;/div&gt;
&lt;div class="p1"&gt;
&amp;nbsp; 507&amp;nbsp; git clone https://github.com/heroku/python-getting-started.git&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&amp;nbsp; 508&amp;nbsp; cd python-getting-started/&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&amp;nbsp; 510&amp;nbsp; heroku create&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&amp;nbsp; 511&amp;nbsp; git push heroku master&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&amp;nbsp; 512&amp;nbsp; heroku ps:scale web=1&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&amp;nbsp; 514&amp;nbsp; heroku open&lt;/div&gt;
&lt;br /&gt;
&lt;div class="p1"&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-10-08T02:02:38.006Z</blogger:created>
    <published>2015-10-08T02:04:00.001Z</published>
    <updated>2015-10-08T02:04:24.202Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/10/heroku-on-mac.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3367665957438188584</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>noteworthy milestones in the website timeline</title>
    <content type='html'>&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;April 6, 2020: server was provisioned by DigitalOcean&lt;/li&gt;
&lt;li&gt;April 26, 2020: turned on web server (nginx, gunicorn, flask)&lt;/li&gt;
&lt;li&gt;April 28, 2020: purchased derivationmap.net from Google Domains&lt;/li&gt;
&lt;li&gt;May 11, 2020: updated gunicorn logs to include IP forwarded by nginx&lt;/li&gt;
&lt;li&gt;May 12, 2020: formatted gunicorn and nginx logs such that each line is a Python dictionary; also added timing entries in support of profiling page load times&lt;/li&gt;
&lt;li&gt;May 19, 2020: first post to Reddit/r/Physics -&amp;nbsp;&lt;a href="https://www.reddit.com/r/Physics/comments/gmqc2l/visualizing_derivations/"&gt;https://www.reddit.com/r/Physics/comments/gmqc2l/visualizing_derivations/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-28T18:43:35.887Z</blogger:created>
    <published>2020-04-28T18:46:00.003Z</published>
    <updated>2020-05-19T15:10:13.704Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/noteworthy-milestones-in-website.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3450713699728207758</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>my first certificate expiration</title>
    <content type='html'>&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;i&gt;Update&lt;/i&gt;: &lt;a href="https://physicsderivationgraph.blogspot.com/2021/10/periodic-renewal-of-https-letsencrypt.html"&gt;concise instructions&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;
This morning I was greeted with this warning from Chrome when visiting &lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net&lt;/a&gt;&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6dDx0wSPiWODsdDKsrHG4I7LYzZH2NxO1lfQ3jxztWYxQfSZT9X6SVXotDRxqMmUGfGABL67y6W4ziOgQMUj5kWITt3AgjNB4gLj9byChyILTKOAPyyku5-SI118zM_J23hWZ0jy0eLpJ/s1600/Screen+Shot+2020-08-09+at+4.03.52+PM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="468" data-original-width="824" height="363" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6dDx0wSPiWODsdDKsrHG4I7LYzZH2NxO1lfQ3jxztWYxQfSZT9X6SVXotDRxqMmUGfGABL67y6W4ziOgQMUj5kWITt3AgjNB4gLj9byChyILTKOAPyyku5-SI118zM_J23hWZ0jy0eLpJ/s640/Screen+Shot+2020-08-09+at+4.03.52+PM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
The error message indicated my certificates had expired.&lt;br /&gt;
&lt;br /&gt;
I SSH'd into my DigitalOcean node and ran a scan of the certs that certbot can find&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ sudo certbot renew&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;----------------------&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Processing /etc/letsencrypt/renewal/derivationmap.net.conf&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;----------------------&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Cert not yet due for renewal&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;----------------------&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;The following certs are not due for renewal yet:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; /etc/letsencrypt/live/derivationmap.net/fullchain.pem expires on 2020-10-08 (skipped)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;No renewals were attempted.&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
However, when I run a manual scan of the certs used by my site,&lt;br /&gt;
&lt;br /&gt;
&lt;pre&gt;$ openssl x509 -dates -noout &amp;lt; /home/pdg/proofofconcept/v7_pickle_web_interface/certs/fullchain.pem
notBefore=May 11 15:26:19 2020 GMT
notAfter=Aug&amp;nbsp; 9 15:26:19 2020 GMT
&lt;/pre&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The corresponds with the command history entry from&amp;nbsp;2020-05-11,&lt;/div&gt;
&lt;pre&gt;sudo certbot certonly --webroot \
-w /home/pdg/proofofconcept/v7_pickle_web_interface/certs \
--server https://acme-v02.api.letsencrypt.org/directory \
-d derivationmap.net -d www.derivationmap.net
&lt;/pre&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;div&gt;
Delete existing certs&lt;/div&gt;
&lt;pre&gt;sudo rm -rf /etc/letsencrypt/{live,renewal,archive}/{derivationmap.net,derivationmap.net.conf}/
&lt;/pre&gt;
&lt;p&gt;Request new certs&lt;/p&gt;
&lt;pre&gt;sudo certbot certonly --webroot \
-w /home/pdg/proofofconcept/v7_pickle_web_interface/certs \
--server https://acme-v02.api.letsencrypt.org/directory \
-d derivationmap.net -d www.derivationmap.net&lt;/pre&gt;
&lt;p&gt;Copy new certs to directory that nginx mounts in Docker-compose&lt;/p&gt;
&lt;pre&gt;cd /home/pdg/proofofconcept/v7_pickle_web_interface/certs
sudo cp /etc/letsencrypt/live/derivationmap.net/fullchain.pem .
sudo cp /etc/letsencrypt/live/derivationmap.net/privkey.pem .
sudo chown pdg:pdg privkey.pem
openssl dhparam -out dhparam.pem 2048
&lt;/pre&gt;
&lt;p&gt;Restart Docker-compose&lt;/p&gt;
&lt;pre&gt;docker-compose up --build --force-recreate --remove-orphans --detach&lt;/pre&gt;

&lt;p&gt;If the docker containers are not restarted, the changes made to the file on the host won't take effect.&lt;/p&gt;&lt;p&gt;Verify in a browser that&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt; has the updated certificate.&lt;/p&gt;&lt;p&gt;Set a calendar reminder to renew the certificate&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-09T20:04:43.103Z</blogger:created>
    <published>2020-08-09T20:41:00.009Z</published>
    <updated>2021-10-09T19:36:41.227Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='certificates'/>
    <blogger:filename>/2020/08/my-first-certificate-expiration.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3468062257532626527</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>a grand vision for bulk .tex analysis</title>
    <content type='html'>Current plan for bulk .tex analysis and math extraction&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;characterization and counting of .tex in arxiv&lt;/li&gt;
&lt;li&gt;anomaly detection, trie data structures of .tex in arxiv&lt;/li&gt;
&lt;li&gt;clean up latex to remove formatting indications (this can be handled in the grammar)&lt;/li&gt;
&lt;li&gt;The minimal regex is based on a threshold from the trie data structure.
&lt;br /&gt;
Work is in progress to automate regex generation. &lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;use the regex to lex latex character stream into ASTs.
&lt;/li&gt;
&lt;li&gt;parse ASTs for math syntax (e.g., into Sympy)&lt;/li&gt;
&lt;li&gt;check dimensionality of expressions using Sympy&lt;/li&gt;
&lt;li&gt;use inference rules to create steps that relate math expressions&lt;/li&gt;
&lt;li&gt;use Sympy to validate inference rule application&lt;/li&gt;
&lt;/ol&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-06-07T01:57:31.874Z</blogger:created>
    <published>2020-06-07T02:02:00.001Z</published>
    <updated>2020-06-07T02:02:21.067Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/06/a-grand-vision-for-bulk-tex-analysis.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3518094753177242582</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>interactive derivation input via the command line</title>
    <content type='html'>&lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/i_njAofy98E" width="560"&gt;&lt;/iframe&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2017-07-08T23:41:22.328Z</blogger:created>
    <published>2017-07-08T23:41:00.002Z</published>
    <updated>2017-07-08T23:41:34.077Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/07/interactive-derivation-input-via.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3565255265862093164</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>I'm stuck -- I don't know how to proceed</title>
    <content type='html'>&lt;i&gt;Current status&lt;/i&gt;:&lt;br /&gt;
I've written a translator that takes exported .tex files from EquationMap.com and converts the output to syntax for the Physics Derivation Graph. This effectively "solves" the interface problem for me, but not anyone else. That is, if someone else wanted to provide content for the PDG, they could use EquationMap, but then they'd need to submit the content to me. That clearly doesn't scale. However, I don't have a huge number of contributors to contend with.&lt;br /&gt;
&lt;br /&gt;
Given that I have a user input interface, that leaves a few major tasks:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;building content&lt;/li&gt;
&lt;li&gt;checking content using a CAS&lt;/li&gt;
&lt;li&gt;talk to potential users&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
I don't know how to deal with the CAS, as Mathematica is useful but not free and Sympy is free but not as useful.
&lt;br /&gt;
&lt;br /&gt;
I'm hesitant to build content, given that I can't do anything useful when viewing the graph of everything. Also, queries are not possible; current state is display only.
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-12-11T01:13:16.736Z</blogger:created>
    <published>2015-12-12T02:36:00.001Z</published>
    <updated>2020-02-10T02:14:11.917Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/12/im-stuck-i-dont-know-how-to-proceed.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3575192533684970820</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>MVP for PDG with SQL</title>
    <content type='html'>Currently I have a Docker container that runs flask on Ubuntu to present a web interface that uses forms to enter information.&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;sandbox/docker_images/flask_ubuntu/web&lt;/span&gt;&lt;br /&gt;
A Python script on the backend handles conversion from string LaTeX to PNG using dvipng, with graphviz generating the static graph PNG.&lt;br /&gt;
&lt;br /&gt;
The other major component of the backend is an sqlite3 database that holds the data when the container is offline. I don't have experience with SQL, so I need a plan to get to the minimum viable product.&lt;br /&gt;
&lt;br /&gt;
The purpose of the sqlite3 file is to store the multiple tables offline.&amp;nbsp; I could use a Python Pickle file, but that would be specific to Python; the sqlite approach seems more portable and generic.&lt;br /&gt;
&lt;br /&gt;
The only actions I need are&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;write data structure from memory (in Python) to sqlite&lt;/li&gt;
&lt;li&gt;read data structure from sqlite into Python&lt;/li&gt;
&lt;/ul&gt;
Summary:&lt;br /&gt;
SQL tables &amp;lt;--&amp;gt; Python data structures &amp;lt;--&amp;gt; graph structure &amp;lt;--&amp;gt; graph viz, website generation, UI web&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
On startup, read data into Python from sqlite.&lt;br /&gt;
After that, every time there is a change to the structure in Python, write to sqlite.&lt;br /&gt;
This approach is not elegant compared to "write only diff" or "write at end of session" but it eliminates any possibility of inconsistency.&lt;br /&gt;
This approach doesn't scale for large databases or multiple users, but those aren't problems I need to solve right now (I'm intentionally incurring technical debt).&lt;br /&gt;
&lt;br /&gt;
If I'm using SQL to store data structures from Python, I'll need to enumerate the table schemas. See&lt;br /&gt;
&lt;a href="https://allofphysicsgraph.github.io/proofofconcept/site/how_to_build_the_physics_derivation.html"&gt;https://allofphysicsgraph.github.io/proofofconcept/site/how_to_build_the_physics_derivation.html&lt;/a&gt;&lt;br /&gt;
which shows the tables&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;per derivation&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;edge list (expression local ID to inference local ID)&lt;/li&gt;
&lt;li&gt;expression identifiers (expression ID to local ID)&lt;/li&gt;
&lt;li&gt;feeds (latex to local ID)&lt;/li&gt;
&lt;li&gt;inference rule identifiers (inference rule to local ID)&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;global expression latex to expression ID&lt;/li&gt;
&lt;li&gt;global inference rule to latex, description, CAS representation&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
Reviewing the options described on&lt;br /&gt;
&lt;a href="https://stackoverflow.com/questions/695752/how-to-design-a-product-table-for-many-kinds-of-product-where-each-product-has-m"&gt;https://stackoverflow.com/questions/695752/how-to-design-a-product-table-for-many-kinds-of-product-where-each-product-has-m&lt;/a&gt;&lt;br /&gt;
I don't know which is applicable.&lt;br /&gt;
&lt;br /&gt;
Motives for SQLite use:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;enforce column consistency (each row has N columns)&lt;/li&gt;
&lt;li&gt;enforce column types (e.g., string, integer)&lt;/li&gt;
&lt;li&gt;enforce entry length (e.g., local ID must be an integer with M digits)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h2&gt;
SQLite options&lt;/h2&gt;
&lt;div&gt;
From the perspective of file management, having one file feels cleaner than a file per derivation.&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
5 tables in 1 SQLite file&lt;/h3&gt;
One option is to implement 5 table schemas:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;expression latex to expression ID. Columns:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;expression_latex (string)&lt;/li&gt;
&lt;li&gt;expression ID (integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;inference rule to latex, description, CAS representation&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;inference rule (string)&lt;/li&gt;
&lt;li&gt;inference rule latex (string)&lt;/li&gt;
&lt;li&gt;inference rule description (string)&lt;/li&gt;
&lt;li&gt;CAS representation (string)&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;derivation edges. Columns:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;derivation name (string)&lt;/li&gt;
&lt;li&gt;from local ID (integer)&lt;/li&gt;
&lt;li&gt;to local ID (integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;derivation feeds. Columns:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;derivation name (string)&lt;/li&gt;
&lt;li&gt;latex (string)&lt;/li&gt;
&lt;li&gt;local ID (integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;derivation expressions. Columns:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;derivation name (string)&lt;/li&gt;
&lt;li&gt;expression ID (integer)&lt;/li&gt;
&lt;li&gt;local ID (integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;derivation inference rules. Columns:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;derivation name (string)&lt;/li&gt;
&lt;li&gt;inference rule (string)&lt;/li&gt;
&lt;li&gt;local ID (integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
I suspect this layout of tables is suboptimal -- having the "derivation name" repeating in a column is an indicator that the table count should be 2+3*D to eliminate duplication (rather than 5). This 2+3*D (where "D" is the number of derivations) design is also apparent in the "dict of derivations" structure described below. My motive for using 5 is that if I use 2+3*D, the table names are not static.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
2+3*D tables in 1 SQLite file&lt;/h3&gt;
&lt;div&gt;
Two tables are independent of derivations:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;expression latex to expression ID. Columns:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;expression_latex (string)&lt;/li&gt;
&lt;li&gt;expression ID (integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;inference rule to latex, description, CAS representation&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;inference rule (string)&lt;/li&gt;
&lt;li&gt;inference rule latex (string)&lt;/li&gt;
&lt;li&gt;inference rule description (string)&lt;/li&gt;
&lt;li&gt;CAS representation (string)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
And 3 tables are needed per derivation. Problem with this is that the name of the tables isn't known in advance.&lt;br /&gt;
&lt;h3&gt;
2 tables in 1 SQLite file; 3 tables in D SQLite files&lt;/h3&gt;
&lt;div&gt;
Same as previous option, except instead of a single SQLite file, the derivations are in separate files.&lt;/div&gt;
&lt;h3&gt;
SQLite to Python&lt;/h3&gt;
These tables in SQL are equivalently stored in Python as three data structures:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;list of inference rules = &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[{'inf rule':'inf rule 1','in':1, 'out': 0},{'inf rule':'inf rule 2', 'in':2, 'out': 3}]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;list of expressions&amp;nbsp;= &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[{'expr 1':59285924, 'expr 2': 954849, 'expr 3': 948299}]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;dict of derivations&amp;nbsp;= &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;{'derivation name 1':[&amp;lt;step1&amp;gt;, &amp;lt;step2&amp;gt;, &amp;lt;step3&amp;gt;]}&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
where each &amp;lt;step&amp;gt; has the structure&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;{'inf rule': 'this inf rule',&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;input: [{'expr local ID': 942, 'expr ID': 59285924}],&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;output: [{'expr local ID': 218, 'expr ID': 954849}]}&lt;/span&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-12T02:15:43.356Z</blogger:created>
    <published>2019-12-12T03:22:00.002Z</published>
    <updated>2019-12-31T02:17:03.884Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/mvp-for-pdg-with-sql.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3577739455967311810</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Python: convert XML to dictionary</title>
    <content type='html'>&lt;span style="font-family: Courier New, Courier, monospace;"&gt;#https://stackoverflow.com/questions/13101653/python-convert-complex-dictionary-of-strings-from-unicode-to-ascii&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;def convert(input):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; if isinstance(input, dict):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return {convert(key): convert(value) for key, value in input.iteritems()}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; elif isinstance(input, list):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return [convert(element) for element in input]&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; elif isinstance(input, unicode):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return input.encode('utf-8')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; else:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return input&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;#https://docs.python-guide.org/scenarios/xml/&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;import xmltodict&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;with open('sample.xml') as fd:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; doc = xmltodict.parse(fd.read())&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;#print(doc)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;# doc is an ordered dict containing unicode.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;#https://stackoverflow.com/questions/3860813/recursively-traverse-multidimensional-dictionary-dimension-unknown&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;import pprint&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;#pprint.pprint(doc) # expects dict, not ordered dict&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;#https://stackoverflow.com/questions/20166749/how-to-convert-an-ordereddict-into-a-regular-dict-in-python3&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;import json&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from collections import OrderedDict&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;output_dict = json.loads(json.dumps(doc))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;# remove the unicode from keys and values&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;doc = convert(output_dict)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;pprint.pprint(doc)&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-22T14:55:17.912Z</blogger:created>
    <published>2018-07-22T14:56:00.001Z</published>
    <updated>2018-07-22T14:56:24.201Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/python-convert-xml-to-dictionary.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3622977162714738330</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Changing from JSON to property graph + SQL backend</title>
    <content type='html'>&lt;p&gt;
A few recent conversations with scientists about the Physics Derivation Graph have led me think about different queries (&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/247"&gt;247&lt;/a&gt;, &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/243"&gt;243&lt;/a&gt;, &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/241"&gt;241&lt;/a&gt;, &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/240"&gt;240&lt;/a&gt;, &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/239"&gt;239&lt;/a&gt;, &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/238"&gt;238&lt;/a&gt;) that could be of value and can be extracted from the&amp;nbsp; current content.
&lt;/p&gt;

&lt;p&gt;
In coming up with ways to query the graph, I realized a property graph is useful for supporting the queries. That is in contrast to writing a custom query capability against my existing JSON format. I'm already embarrassed by the JSON/SQL implementation, so having specific queries of interest provided me sufficient motivation to investigate implementing a Neo4j backend.&lt;/p&gt;

&lt;p&gt;
Transitioning to a property graph (specifically &lt;a href="https://en.wikipedia.org/wiki/Neo4j"&gt;Neo4j&lt;/a&gt;) loses the fine grain control over the mechanics of the graph. However, the trade-off is well worth the increased development speed. Having a &lt;a href="https://en.wikipedia.org/wiki/Cypher_(query_language)"&gt;Cypher query&lt;/a&gt; interface via the web GUI very powerful.
&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;With the property graph representation, augmenting information is needed in tabular format:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;all possible inference rules, along with the CAS implementation per rule&lt;/li&gt;&lt;li&gt;all variable definitions, along with dimensions, constant or variable, scope, and reference URLs&lt;/li&gt;&lt;li&gt;units, along with dimensions, and reference URLs&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Those three tables could be stored in an SQL database.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I'm replacing a single plaintext JSON file with two non-plaintext data formats -- SQL and Neo4j.&amp;nbsp;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-03-06T23:24:49.137Z</blogger:created>
    <published>2022-03-06T23:55:00.001Z</published>
    <updated>2022-03-06T23:55:25.314Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='reflections'/>
    <blogger:filename>/2022/03/changing-from-json-to-property-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3683504886845914082</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>problem identification for vectors and my current responses</title>
    <content type='html'>&lt;p&gt;I encountered a few issues with SymPy today. I'll explain what I found and what I plan to do about it.&lt;/p&gt;&lt;p&gt;I have an expression (1158485859) that, in Latex, is

&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt; \frac{-\hbar^2}{2m} \nabla^2 = {\cal H}

&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The &lt;span style="font-family: courier;"&gt;\nabla^2&lt;/span&gt; is represented in SymPy as &lt;span style="font-family: courier;"&gt;Laplacian()&lt;/span&gt;, though an argument is required for the operator.

&lt;/p&gt;&lt;p&gt;&lt;i&gt;My solution&lt;/i&gt;: leave the SymPy representation as &lt;span style="font-family: courier;"&gt;Pow(Symbol('nabla'), Integer(2))


&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Also on the topic of vectors, I encountered the expression

&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;     \vec{p} \cdot \vec{F}(\vec{r}, t) = a

&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In order to convert that to SymPy, I'd need to specify a basis for `\vec{p}` (e.g., `from sympy.vector import CoordSys3D`). For example,&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; N = CoordSys3D('N')&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; p = Symbol('p_x')*N.i + Symbol('p_y')*N.j + Symbol('p_z')*N.k&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; F = Symbol('F_x')*N.i + Symbol('F_y')*N.j + Symbol('F_z')*N.k&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; p.dot(F)&lt;br /&gt;
F_x*p_x + F_y*p_y + F_z*p_z


&lt;/span&gt;&lt;/p&gt;&lt;p&gt;However, that doesn't seem to extend to functions:

&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; p.dot(Function(F)(Symbol('r'), Symbol('t')))&lt;br /&gt;
  Traceback (most recent call last):&lt;br /&gt;
  ...&lt;br /&gt;
  TypeError: expecting string or Symbol for name&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;&lt;i&gt;My solution&lt;/i&gt;: leave the SymPy representation as incorrect, using "multiplication" instead of "dot"

&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-20T19:34:30.542Z</blogger:created>
    <published>2020-09-20T19:38:00.003Z</published>
    <updated>2020-09-20T19:42:38.491Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <blogger:filename>/2020/09/problem-identification-for-vectors-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3686757325841980857</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>validating equivalent and transformed expressions</title>
    <content type='html'>To check whether a step was implemented correctly, the question is, "given the input expressions (and feeds), do the output expressions conform to the transform prescribed by the inference rule?"&lt;br /&gt;
&lt;br /&gt;
For example, suppose we start with "A=B" and operate on this with the inference rule "add X to both sides," where X=2. If the output is "A+2 = B+2," was the step implemented correctly?&lt;br /&gt;
&lt;br /&gt;
The inference rule can be described by an&amp;nbsp;abstract syntax tree (AST):&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; = &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;=&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; / &amp;nbsp; \ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;/ &amp;nbsp; &amp;nbsp; \&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;LHS &amp;nbsp; RHS &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;/ &amp;nbsp; \ &amp;nbsp; &amp;nbsp;/ &amp;nbsp; \&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;LHS &amp;nbsp; x &amp;nbsp; RHS &amp;nbsp; x&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://blog.plover.com/math/24-puzzle-2.html"&gt;https://blog.plover.com/math/24-puzzle-2.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://news.ycombinator.com/item?id=15075110"&gt;https://news.ycombinator.com/item?id=15075110&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2017-08-29T01:39:47.281Z</blogger:created>
    <published>2017-08-29T01:45:00.002Z</published>
    <updated>2017-08-29T01:45:39.302Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/08/validating-equivalent-and-transformed.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3703720200098980888</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>type hinting and linting in the Docker image</title>
    <content type='html'>See also&lt;br /&gt;
&lt;a href="https://physicsderivationgraph.blogspot.com/2018/08/cleaning-up-code-using-pylint-and.html"&gt;https://physicsderivationgraph.blogspot.com/2018/08/cleaning-up-code-using-pylint-and.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Usually I start my Docker container using&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ python create_tmp_pkl.py ; docker build -t flask_ub .; docker run -it --rm --publish 5000:5000 flask_ub

&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
However, if I need the command line to run mypy or flake8, I'll start a shell using&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ python create_tmp_pkl.py ; docker build -t flask_ub .; docker run -it --rm --entrypoint='' --publish 5000:5000 flask_ub /bin/bash

&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Then, in the container, I can run commands like&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ mypy compute.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Success: no issues found in 1 source file&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ mypy --ignore-missing-imports controller.py&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Success: no issues found in 1 source file&lt;/span&gt;&lt;br /&gt;
see&amp;nbsp;&lt;a href="https://mypy.readthedocs.io/en/latest/running_mypy.html#ignore-missing-imports"&gt;https://mypy.readthedocs.io/en/latest/running_mypy.html#ignore-missing-imports&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
and linting with&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ flake8 compute.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;compute.py:4:80: E501 line too long (89 &amp;gt; 79 characters)
&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;and check doctest using&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ python3 -m doctest -v compute.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;Code complexity measurement:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ python3 -m mccabe compute.py&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-09T15:20:11.530Z</blogger:created>
    <published>2020-02-09T15:47:00.001Z</published>
    <updated>2020-02-09T20:27:24.138Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='type hints'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='linting'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='docker'/>
    <blogger:filename>/2020/02/type-hinting-and-linting-in-docker-image.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3731004510963572839</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>django on Ubuntu</title>
    <content type='html'>https://www.howtoforge.com/tutorial/django-install-ubuntu-14.04/&lt;br /&gt;
&lt;br /&gt;
https://www.digitalocean.com/community/tutorials/how-to-install-the-django-web-framework-on-ubuntu-14-04&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;cd ~&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;django-admin startproject mysite&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;cd mysite&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;sudo pip install -U django&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;python manage.py migrate&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;python manage.py runserver&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;firefox 127.0.0.1:8000&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2015-10-08T02:01:13.605Z</blogger:created>
    <published>2015-10-08T02:01:00.005Z</published>
    <updated>2015-10-09T00:05:23.066Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/10/django-on-ubuntu.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3839745353786465613</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>relation of inference rules to axioms and proofs</title>
    <content type='html'>Axioms are a set of statements upon which other statements can be formed.&lt;br /&gt;
&lt;br /&gt;
Lemmas are easy but irrelevant.&lt;br /&gt;
Corollaries are quick but irrelevant consequences&lt;br /&gt;
Propositions are interesting&lt;br /&gt;
Theorems are important and difficult&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://www.quora.com/What-is-the-difference-between-a-lemma-theorem-corollary-and-proposition"&gt;https://www.quora.com/What-is-the-difference-between-a-lemma-theorem-corollary-and-proposition&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blogs.scienceforums.net/ajb/2013/01/12/lemma-theorem-proposition-or-corollary/"&gt;http://blogs.scienceforums.net/ajb/2013/01/12/lemma-theorem-proposition-or-corollary/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://math.stackexchange.com/questions/463362/whats-the-difference-between-theorem-lemma-and-corollary"&gt;https://math.stackexchange.com/questions/463362/whats-the-difference-between-theorem-lemma-and-corollary&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
A proof is about consistency of statements with respect to a set of axioms.&lt;br /&gt;
&lt;br /&gt;****************&lt;br /&gt;
&lt;br /&gt;
To show the connection can be made, pick the simplest PDG inference rules.&lt;br /&gt;
* "add X to both sides"&lt;br /&gt;
* "multiply both sides by"</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-27T21:45:24.851Z</blogger:created>
    <published>2020-08-27T22:01:00.003Z</published>
    <updated>2020-08-27T22:01:48.395Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/relation-of-inference-rules-to-axioms.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3844666346462676586</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>ordered list representation in RDF</title>
    <content type='html'>&lt;p&gt;The Physics Derivation Graph depends on a data structure capable of using ordered lists. RDF's support for ordered lists is slightly convoluted. The best visualization of ordered lists in RDF I've found is&amp;nbsp;&lt;a href="https://ontola.io/blog/ordered-data-in-rdf/"&gt;https://ontola.io/blog/ordered-data-in-rdf/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I tried sketching how the "linked recursive lists" approach looks for the Physics Derivation Graph for a derivation that has a sequence of steps, and each step has an ordered list of inputs, feeds, and outputs.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjwtwVTND0w5hm7n4JctJCEn1y_c5nFenYn_19KSpP2Md24bTLD0JrJqr1YxoifMXJzCS8MZUFwpDFIu0qsqoRFLl5hkyTXBmQ3WJbMo6bWgNxjE-UQyDIsrzHgJhUIG7siv6ehsW4v5ncm/s1780/pdg_rdf_using_graphviz_20201227.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1100" data-original-width="1780" height="394" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjwtwVTND0w5hm7n4JctJCEn1y_c5nFenYn_19KSpP2Md24bTLD0JrJqr1YxoifMXJzCS8MZUFwpDFIu0qsqoRFLl5hkyTXBmQ3WJbMo6bWgNxjE-UQyDIsrzHgJhUIG7siv6ehsW4v5ncm/w640-h394/pdg_rdf_using_graphviz_20201227.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Credit: &lt;a href="https://dreampuf.github.io/GraphvizOnline/#digraph%20G%20%7B%0A%20%20%23rankdir%3DLR%3B%0A%20%20%23ratio%3D1.01%3B%0A%20%20pdg%20%5Blabel%3D%22physics%20Derivation%20Graph%22%5D%3B%0A%20%20deriv1%20%5Blabel%3D%22%3Cderiv%20ID%3E%5Cnclass%3Aderivation%22%5D%3B%0A%20%20pdg%20-%3E%20deriv1%20%5Blabel%3D%22hasDerivation%22%5D%3B%0A%20%20deriv2%20%5Blabel%3D%22%3Cderiv%20ID%3E%5Cnclass%3Aderivation%22%5D%3B%0A%20%20pdg%20-%3E%20deriv2%20%5Blabel%3D%22hasDerivation%22%5D%3B%0A%0A%20%20deriv_name%20%5Blabel%3D%22%3Cderiv%20name%3E%22%5D%3B%0A%20%20deriv1%20-%3E%20deriv_name%20%5Blabel%3D%22hasName%22%5D%3B%0A%20%20deriv1%20-%3E%20%22%3Cnote%20about%20deriv%3E%22%20%5Blabel%3D%22hasNote%22%5D%3B%0A%20%20step1%20%5Blabel%3D%22step_1%5Cnrdf%3Alist%22%5D%3B%0A%20%20deriv1%20-%3E%20step1%20%5Blabel%3D%22hasStepList%22%5D%3B%0A%20%20step2%20%5Blabel%3D%22step_2%5Cnrdf%3Alist%22%5D%3B%0A%20%20step1%20-%3E%20step2%20%5Blabel%3D%22hasRestOfSteps%22%5D%3B%0A%20%20step3%20%5Blabel%3D%22step_3%5Cnrdf%3Alist%22%5D%3B%0A%20%20step2%20-%3E%20step3%20%5Blabel%3D%22hasRestOfSteps%22%5D%3B%0A%20%20step_nil%20%5Blabel%3D%22rdf%3Anil%22%5D%3B%0A%20%20step3%20-%3E%20step_nil%20%5Blabel%3D%22hasRestOfSteps%22%5D%3B%0A%20%20%0A%20%20%7Brank%3Dsame%3B%20step1%20step2%20step3%7D%23%20step_nil%7D%0A%20%20%0A%20%20step1_id%20%5Blabel%3D%22%3Cstep%20ID%3E%5Cnclass%3Astep%22%5D%3B%0A%20%20step1%20-%3E%20step1_id%20%5Blabel%3D%22hasFirstStep%22%5D%3B%0A%20%20%23%7Brank%3Dsame%3B%20step1%20step1_id%7D%0A%20%20step2_id%20%5Blabel%3D%22%3Cstep%20ID%3E%5Cnclass%3Astep%22%5D%3B%0A%20%20step2%20-%3E%20step2_id%20%5Blabel%3D%22hasFirstStep%22%5D%3B%0A%20%20%23%7Brank%3Dsame%3B%20step2%20step2_id%7D%0A%20%20step3_id%20%5Blabel%3D%22%3Cstep%20ID%3E%5Cnclass%3Astep%22%5D%3B%0A%20%20step3%20-%3E%20step3_id%20%5Blabel%3D%22hasFirstStep%22%5D%3B%0A%20%20%23%7Brank%3Dsame%3B%20step3%20step3_id%7D%0A%20%20%0A%20%20mbsb%20%5Blabel%3D%22multBothSidesBy%5Cnclass%3Ainference%20rule%22%5D%3B%0A%20%20step1_id%20-%3E%20mbsb%20%5Blabel%3D%22hasInferenceRule%22%5D%3B%0A%20%20%7Brank%3Dsame%3B%20step1_id%20mbsb%7D%0A%20%20axtbs%20%5Blabel%3D%22addXtoBothSides%5Cnclass%3Ainference%20rule%22%5D%3B%0A%20%20step2_id%20-%3E%20axtbs%20%5Blabel%3D%22hasInferenceRule%22%5D%3B%0A%20%20%23%7Brank%3Dsame%3B%20step2_id%20axtbs%7D%0A%20%20dvsb%20%5Blabel%3D%22divideBothSidesBy%5Cnclass%3Ainference%20rule%22%5D%3B%0A%20%20step3_id%20-%3E%20dvsb%20%5Blabel%3D%22hasInferenceRule%22%5D%3B%0A%20%20%23%7Brank%3Dsame%3B%20step3_id%20dvsb%7D%0A%20%20%0A%20%20step1_input1%20%5Blabel%3D%22input_1%5Cnrdf%3Alist%22%5D%3B%0A%20%20step1_id%20-%3E%20step1_input1%20%5Blabel%3D%22hasInputList%22%5D%3B%0A%20%20expr39482%20%5Blabel%3D%22%3Cexpression%20ID%3E%5Cnclass%3Aexpression%22%5D%3B%0A%20%20step1_input1%20-%3E%20expr39482%20%5Blabel%3D%22hasFirstExpressionID%22%5D%3B%0A%20%20expr39482_latex%20%5Blabel%3D%22%3Clatex%3E%5Cnclass%3Alatex%22%5D%3B%0A%20%20expr39482%20-%3E%20expr39482_latex%20%5Blabel%3D%22hasLatex%22%5D%3B%0A%20%20expr39482_sympy%20%5Blabel%3D%22%3Csympy%3E%5Cnclass%3Asympy%22%5D%3B%0A%20%20expr39482%20-%3E%20expr39482_sympy%20%5Blabel%3D%22hasSympy%22%5D%3B%0A%20%20symbol94982%20%5Blabel%3D%22%3Csymbol%20ID%3E%5Cnclass%3Asymbol%22%5D%3B%0A%20%20expr39482_sympy%20-%3E%20symbol94982%20%5Blabel%3D%22hasSymbol%22%5D%3B%0A%20%20symbol821%20%5Blabel%3D%22%3Csymbol%20ID%3E%5Cnclass%3Asymbol%22%5D%3B%0A%20%20expr39482_sympy%20-%3E%20symbol821%20%5Blabel%3D%22hasSymbol%22%5D%3B%0A%20%20%0A%20%20%0A%20%20step1_input2%20%5Blabel%3D%22input_2%5Cnrdf%3Alist%22%5D%3B%0A%20%20step1_input1%20-%3E%20step1_input2%20%5Blabel%3D%22hasRestOfInputs%22%5D%3B%0A%20%20expr95824%20%5Blabel%3D%22%3Cexpression%20ID%3E%5Cnclass%3Aexpression%22%5D%3B%0A%20%20step1_input2%20-%3E%20expr95824%20%5Blabel%3D%22hasFirstExpressionID%22%5D%3B%0A%20%20%0A%20%20step1_input_nil%20%5Blabel%3D%22rdf%3Anil%22%5D%3B%0A%20%20step1_input2%20-%3E%20step1_input_nil%5Blabel%3D%22hasRestOfInputs%22%5D%3B%0A%20%20%0A%20%20step1_feed1%20%5Blabel%3D%22feed_1%5Cnrdf%3Alist%22%5D%3B%0A%20%20step1_id%20-%3E%20step1_feed1%20%5Blabel%3D%22hasFeedList%22%5D%3B%0A%20%20expr99482%20%5Blabel%3D%22%3Cexpression%20ID%3E%5Cnclass%3Aexpression%22%5D%3B%0A%20%20step1_feed1%20-%3E%20expr99482%20%5Blabel%3D%22hasFirstExpressionID%22%5D%3B%0A%20%20step1_feed_nil%20%5Blabel%3D%22rdf%3Anil%22%5D%3B%0A%20%20step1_feed1%20-%3E%20step1_feed_nil%20%5Blabel%3D%22hasRestOfFeeds%22%5D%3B%0A%20%20%0A%20%20step1_output1%20%5Blabel%3D%22output_1%5Cnrdf%3Alist%22%5D%3B%0A%20%20step1_id%20-%3E%20step1_output1%20%5Blabel%3D%22hasOutputList%22%5D%3B%0A%20%20expr42553%20%5Blabel%3D%22%3Cexpression%20ID%3E%5Cnclass%3Aexpression%22%5D%3B%0A%20%20step1_output1%20-%3E%20expr42553%20%5Blabel%3D%22hasFirstExpressionID%22%5D%3B%0A%20%20step1_output_nil%20%5Blabel%3D%22rdf%3Anil%22%5D%3B%0A%20%20step1_output1%20-%3E%20step1_output_nil%20%5Blabel%3D%22hasRestOfOutputs%22%5D%3B%0A%20%20%0A%20%20expr42553_latex%20%5Blabel%3D%22%3Clatex%3E%5Cnclass%3Alatex%22%5D%3B%0A%20%20expr42553%20-%3E%20expr42553_latex%20%5Blabel%3D%22hasLatex%22%5D%3B%0A%20%20expr42553_sympy%20%5Blabel%3D%22%3Csympy%3E%5Cnclass%3Asympy%22%5D%3B%0A%20%20expr42553%20-%3E%20expr42553_sympy%20%5Blabel%3D%22hasSympy%22%5D%3B%0A%20%20symbol9311%20%5Blabel%3D%22%3Csymbol%20ID%3E%5Cnclass%3Asymbol%22%5D%3B%0A%20%20expr42553_sympy%20-%3E%20symbol9311%20%5Blabel%3D%22hasSymbol%22%5D%3B%0A%20%20symbol2492%20%5Blabel%3D%22%3Csymbol%20ID%3E%5Cnclass%3Asymbol%22%5D%3B%0A%20%20expr42553_sympy%20-%3E%20symbol2492%20%5Blabel%3D%22hasSymbol%22%5D%3B%0A%20%20%0A%20%20step2_input1%20%5Blabel%3D%22input_1%5Cnrdf%3Alist%22%5D%3B%0A%20%20step2_id%20-%3E%20step2_input1%20%5Blabel%3D%22hasInputList%22%5D%3B%0A%20%20step2_input1%20-%3E%20expr42553%20%5Blabel%3D%22hasFirstExpressionID%22%5D%3B%0A%20%20step2_input_nil%20%5Blabel%3D%22rdf%3Anil%22%5D%3B%0A%20%20step2_input1%20-%3E%20step2_input_nil%20%5Blabel%3D%22hasRestOfOutputs%22%5D%3B%0A%20%20%0A%7D%0A%0A"&gt;dreampuf.github.io&lt;/a&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-12-27T19:36:35.002Z</blogger:created>
    <published>2020-12-27T20:11:00Z</published>
    <updated>2020-12-27T20:11:10.822Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/12/ordered-list-representation-in-rdf.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3878164011943757324</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>example interaction with ChatGPT 3.5 to produce a Lean proof</title>
    <content type='html'>In a new conversation I provided the following prompt:
&lt;fieldset&gt;&lt;legend&gt;prompt&lt;/legend&gt;
&lt;p&gt;Answer the question based on the context below. Let's work this out in a step by step way to be sure we have the right answer.

&lt;/p&gt;&lt;p&gt;Context: Lean is a proof assistant and programming language. Lean is based on the calculus of constructions with inductive types.  

&lt;/p&gt;&lt;p&gt;Context: There are multiple versions of Lean. This question is about Lean 4

&lt;/p&gt;&lt;p&gt;`a=b` is a proposition. The variable `a` is Real valued and `b` is Real valued. Prove in version 4 of Lean that `(a=b) -&amp;gt; (a+2=b+2)`
&lt;/p&gt;&lt;/fieldset&gt;

ChatGTP 3.5 wrote in response
&lt;fieldset&gt;&lt;legend&gt;ChatGPT 3.5 response&lt;/legend&gt;
&lt;p&gt;Certainly! To prove the statement `(a = b) -&amp;gt; (a + 2 = b + 2)` in version 4 of Lean, you can follow these steps:

&lt;/p&gt;&lt;p&gt;1. **Introduction of Variables**: Begin by introducing the variables and assumptions using the `variables` keyword. In this case, you have the variables `a` and `b` both being Real valued.
  
&lt;/p&gt;&lt;pre&gt;```lean
variables {a b : ℝ}
&lt;/pre&gt;```

&lt;p&gt;2. **Assumption**: State the assumption that `(a = b)`.

&lt;/p&gt;&lt;pre&gt;```lean
example (h : a = b) : a + 2 = b + 2 :=
&lt;/pre&gt;```

&lt;p&gt;3. **Transformation**: Use the assumption to transform the left-hand side of the conclusion `(a + 2)` to `(b + 2)` using the property of equality.

&lt;/p&gt;&lt;pre&gt;```lean
calc
   a + 2 = b + 2 : by rw h
&lt;/pre&gt;```

&lt;p&gt;Here, `calc` is used to chain together a sequence of expressions, and `rw h` applies the assumption `h`.

&lt;/p&gt;&lt;p&gt;4. **QED (Quod Erat Demonstrandum)**: Conclude the proof.

&lt;/p&gt;&lt;pre&gt;```lean
   example (h : a = b) : a + 2 = b + 2 :=
   begin
     calc
       a + 2 = b + 2 : by rw h
   end
&lt;/pre&gt;```

&lt;p&gt;This step-by-step approach uses the Lean proof style to demonstrate the validity of the given proposition. The `calc` tactic is particularly useful for chaining together equalities.
&lt;/p&gt;&lt;/fieldset&gt;

On my computer I created a file "second_chatGPT_attempt.lean" and wrote
&lt;pre&gt;variables {a b : ℝ}

example (h : a = b) : a + 2 = b + 2 :=
begin
  calc
    a + 2 = b + 2 : by rw h
end
&lt;/pre&gt;
and then ran
&lt;pre&gt;&lt;b&gt;docker run -it --rm -v `pwd`:/scratch --workdir /scratch lean3onubuntu lean --run second_chatGPT_attempt.lean&lt;/b&gt;
second_chatGPT_attempt.lean:2:0: error: unexpected identifier; expected command
second_chatGPT_attempt.lean:5:0: error: unknown identifier 'begin'
second_chatGPT_attempt.lean:6:2: error: unexpected token 'calc'; expected command
second_chatGPT_attempt.lean:8:0: error: invalid 'end', insufficient scopes
&lt;/pre&gt;

I then told ChatGPT

&lt;fieldset&gt;&lt;legend&gt;prompt&lt;/legend&gt;
&lt;p&gt;When I run the script
&lt;/p&gt;&lt;pre&gt;```lean
variables {a b : ℝ}

example (h : a = b) : a + 2 = b + 2 :=
begin
  calc
    a + 2 = b + 2 : by rw h
end
&lt;/pre&gt;```

&lt;p&gt;Lean 4 returns an error message: `error: unexpected identifier; expected command`

&lt;/p&gt;&lt;p&gt;What should I do to fix the error?
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/fieldset&gt;

&lt;fieldset&gt;&lt;legend&gt;ChatGPT 3.5 response&lt;/legend&gt;
&lt;p&gt;Apologies for the oversight. It seems I made an error in my previous responses. In Lean, you should use `theorem` or `example` as part of the proof declaration. Here's the corrected version:

&lt;/p&gt;&lt;pre&gt;```lean
variables {a b : ℝ}

theorem add_two_eq_add_two (h : a = b) : a + 2 = b + 2 :=
begin
  calc
    a + 2 = b + 2 : by rw h
end
&lt;/pre&gt;```

&lt;p&gt;In this corrected version, I replaced `example` with `theorem`. You can use `example` as well, but `theorem` is more appropriate when proving statements. This should resolve the error you encountered.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/fieldset&gt;

I then created a second Lean script, third_chatGPT_attempt.lean, and wrote
&lt;pre&gt;variables {a b : ℝ}

theorem add_two_eq_add_two (h : a = b) : a + 2 = b + 2 :=
begin
  calc
    a + 2 = b + 2 : by rw h
end
&lt;/pre&gt;
which got the same error as before when I attempted to run the script using Lean 4:
&lt;pre&gt;&lt;b&gt;docker run -it --rm -v `pwd`:/scratch --workdir /scratch lean3onubuntu lean --run third_chatGPT_attempt.lean &lt;/b&gt;
third_chatGPT_attempt.lean:1:0: error: unexpected identifier; expected command
third_chatGPT_attempt.lean:4:0: error: unknown identifier 'begin'
third_chatGPT_attempt.lean:5:2: error: unexpected token 'calc'; expected command
third_chatGPT_attempt.lean:7:0: error: invalid 'end', insufficient scopes
  &lt;/pre&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2023-12-17T03:48:05.378Z</blogger:created>
    <published>2023-12-17T03:59:00Z</published>
    <updated>2023-12-17T04:00:01.335Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='prompts for LLMs'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lean'/>
    <blogger:filename>/2023/12/example-interaction-with-chatgpt-35-to.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3921224676883057346</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Use of MathJax for expressions</title>
    <content type='html'>Now that I've migrated my interface to Flask web page hosted in a Docker container, I could use MathJax to display LaTeX expressions.&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://localhost:5000/list_all_expressions"&gt;http://localhost:5000/list_all_expressions&lt;/a&gt;&amp;nbsp;could use MathJax</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-27T02:39:08.519Z</blogger:created>
    <published>2019-12-31T02:27:00Z</published>
    <updated>2019-12-31T02:27:25.805Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/use-of-mathjax-for-expressions.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-3972279250945323599</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>acceptance criteria for a new inference rule</title>
    <content type='html'>&lt;p&gt;What are my acceptance criteria for a new inference rule? How do I know when something is atomic versus when it can be broken into existing inference rules?&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Does inversion matter? The following are redundant:&lt;/p&gt;&lt;p&gt;"add X to both sides of expression" is interchangeable with "subtract Z from both sides of expression"&lt;/p&gt;&lt;p&gt;and&amp;nbsp;&lt;/p&gt;&lt;p&gt;"multiple both sides of expression by X" is interchangeable with "divide both sides of expression by Z"&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-14T11:09:09.427Z</blogger:created>
    <published>2021-08-14T11:12:00.006Z</published>
    <updated>2021-08-14T11:12:51.008Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4006479814075236620</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>goal: create exemplars of what is feasible for formalization of individual scientific documents</title>
    <content type='html'>&lt;p&gt;There's a lot of knowledge management decorations available for a single document: hyperlinks, semantic tagging, ontologies, controlled natural languages, CAS validation, theorem provers. What would it take to put them all together in one Physics article?&amp;nbsp;&lt;/p&gt;&lt;p&gt;The purpose of this post is to provide an example of what that process is like for a document. Starting from an unadorned .tex file that compiles to PDF, the&amp;nbsp;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;sTex = semantic LaTeX&lt;/h2&gt;&lt;p&gt;&lt;a href="https://kwarc.info/systems/sTeX/"&gt;https://kwarc.info/systems/sTeX/&lt;/a&gt;&lt;br /&gt;&lt;a href="https://github.com/slatex/sTeX"&gt;https://github.com/slatex/sTeX&lt;/a&gt;&lt;br /&gt;&lt;a href="https://ctan.org/pkg/stex?lang=en"&gt;https://ctan.org/pkg/stex?lang=en&lt;/a&gt;&lt;/p&gt;&lt;p&gt;sTeX system enables embedding of structural semantics into documents. sTeX is a “semantic version of LaTeX” that allows to use special macros to encode mathematical meaning explicitly.&amp;nbsp;&lt;/p&gt;&lt;p&gt;OpenMath, ContentML, and sTex are in the category of "content-oriented markup languages for mathematics on the web." [&lt;a href="https://kwarc.info/people/mkohlhase/papers/mcs08-stex.pdf"&gt;citation&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;The point of adding sTex decorations is to aid in the creation of OMDoc&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;OMDoc and MMT&lt;/h3&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/OMDoc"&gt;https://en.wikipedia.org/wiki/OMDoc&lt;/a&gt;&lt;br /&gt;&lt;a href="https://www.omdoc.org/"&gt;https://www.omdoc.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;"OMDoc is a markup format and data model for Open Mathematical Documents. It serves as semantics-oriented representation format and ontology language for mathematical knowledge. The formal part of OMDoc has been refined into the MMT format, and we use the MMT System as the reference implementation."&lt;/p&gt;&lt;p&gt;&lt;a href="https://uniformal.github.io/doc/philosophy/omdoc"&gt;https://uniformal.github.io/doc/philosophy/omdoc&lt;/a&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-09T21:32:23.365Z</blogger:created>
    <published>2021-08-14T11:08:00Z</published>
    <updated>2021-08-14T11:08:51.431Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4020146817004220309</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>increasing flexibility of the Physics Derivation Graph</title>
    <content type='html'>Currently the &lt;a href="http://allofphysicsgraph.github.io/proofofconcept/"&gt;Physics Derivation Graph&lt;/a&gt; is designed as though there is a single authoritative user/developer (historically me). Having additional contributors is new, and contributors (including me) don't always provide valid content.&lt;br /&gt;
&lt;br /&gt;
The following are ideas for a significant re-design of the Physics Derivation Graph&lt;br /&gt;
&lt;h3&gt;
Independent Graphs per Derivation&lt;/h3&gt;
Suppose every derivation was an independent graph. This is easier to debug and analyze. A set of these derivations could be then merged to analyze the full graph, but that shouldn't be a requirement. Merging derivation graphs incurs overhead of finding overlaps. The overlap would be identifying common expressions. For example,&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;A/B = C&lt;/span&gt;&lt;br /&gt;
is the same as&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;\frac{A}{B} = C&lt;/span&gt;&lt;br /&gt;
These should have the same unique index. This index (the &lt;a href="https://en.wikipedia.org/wiki/G%C3%B6del_numbering"&gt;Godel number&lt;/a&gt;) should be unique across all derivations. Although the graph of the derivation is independent of other derivations, the expression database will need to be shared globally.&lt;br /&gt;
&lt;h3&gt;
&lt;/h3&gt;
&lt;h3&gt;
Enable arbitrary formats&lt;/h3&gt;
Currently all expressions are stored as Latex in a single CSV. I don't actually care about the representation (in this case Latex). Instead, I want a single numeric index (the Godel number) associated with arbitrary but equivalent representations. For example,&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;A/B = C&lt;/span&gt;&lt;br /&gt;
gets the same unique numeric index as&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;\frac{A}{B} = C&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
and a &lt;a href="http://www.sagemath.org/"&gt;Sage&lt;/a&gt; representation is also acceptable:&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;A,B,C = var('A,B,C')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr = A/B == C&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
To enable arbitrary formats, place each in a separate file with the naming convention&lt;/div&gt;
&lt;div&gt;
&amp;lt;unique numeric id&amp;gt;_&amp;lt;type&amp;gt;_&amp;lt;date&amp;gt;.&amp;lt;extension&amp;gt;&lt;/div&gt;
&lt;div&gt;
"Type" = {Latex, Mathematica, Sage, etc}&lt;/div&gt;
&lt;div&gt;
The date is to distinguish versions of the same expression, ie &lt;span style="font-family: Courier New, Courier, monospace;"&gt;A/B = C&lt;/span&gt; versus &lt;span style="font-family: Courier New, Courier, monospace;"&gt;\frac{A}{B} = C&lt;/span&gt;.&lt;/div&gt;
&lt;div&gt;
A single unique numeric index may have multiple files:&lt;/div&gt;
&lt;div&gt;
4924829_latex_20151228.tex&lt;/div&gt;
&lt;div&gt;
4924829_latex_20151229.tex&lt;/div&gt;
&lt;div&gt;
4924829_mathematica_20151228.nb&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The reason to have separate files for each representation and for each expression is to increase flexibility.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
This adds to confusion when building the graph: &lt;i&gt;which of the two equivalent latex representations should be used?&lt;/i&gt;&lt;/div&gt;
&lt;div&gt;
An additional source of work: checking that the various representations are consistent. An abstract syntax tree should be able to determine the equivalence of representations.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
Implementing Inference Rules&lt;/h3&gt;
&lt;div&gt;
Similarly for inference rule representations, there are Latex, Sage, and Mathematica implementations. Currently I have a single CSV for all the inference rules in Latex. Implement each inference rule in the relevant language:&lt;/div&gt;
&lt;div&gt;
multiplyBothSidesBy_latex_20151228.tex&lt;/div&gt;
&lt;div&gt;
multiplyBothSidesBy_sage_20151228.sagews&lt;/div&gt;
&lt;div&gt;
multiplyBothSidesBy_mathematica_20151228.nb&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Again, there may be multiple ways to implement an inference rule. &lt;i&gt;Which should be used when checking with the Computer Algebra System?&lt;/i&gt;&lt;br /&gt;
The inference rule representations might not be synchronized. This would be detectable if the derivation checks out using one CAS and not another.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-12-29T09:34:58.363Z</blogger:created>
    <published>2015-12-29T10:17:00Z</published>
    <updated>2015-12-29T10:34:16.114Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/12/increasing-flexibility-of-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4029553161967100027</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>PDG as dedicated website, and PDG-as-a-service, and PDG as an overlay for arxiv</title>
    <content type='html'>&lt;p style="text-align: left;"&gt;Two ways to present the Physics Derivation Graph is as a website (currently&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt; ) and as an API (see&amp;nbsp;&lt;a href="https://derivationmap.net/api/v1/resources/derivations/list"&gt;https://derivationmap.net/api/v1/resources/derivations/list&lt;/a&gt; as an example from the&amp;nbsp;&lt;a href="https://derivationmap.net/api/v1/documentation"&gt;https://derivationmap.net/api/v1/documentation&lt;/a&gt; ).&amp;nbsp;&lt;/p&gt;&lt;p style="text-align: left;"&gt;A third way to present the content would be as an overlay for existing content, e.g.&amp;nbsp;&lt;a href="https://arxiv.org/"&gt;https://arxiv.org/&lt;/a&gt;&amp;nbsp;.&amp;nbsp;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Related: Comments on papers&lt;/h3&gt;&lt;p style="text-align: left;"&gt;The content overlay concept has been explored primarily for comments. For example, active efforts include&lt;/p&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://fermatslibrary.com/"&gt;https://fermatslibrary.com/&lt;/a&gt;, which also has a chrome extension, Librarian, which isn't functional. Example comments: &lt;a href="https://fermatslibrary.com/arxiv_comments?url=https://arxiv.org/pdf/1602.03837.pdf"&gt;https://fermatslibrary.com/arxiv_comments?url=https://arxiv.org/pdf/1602.03837.pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://scirate.com/"&gt;https://scirate.com/&lt;/a&gt;; as an example of comments on a paper see &lt;a href="https://scirate.com/arxiv/2205.09767"&gt;https://scirate.com/arxiv/2205.09767&lt;/a&gt;&amp;nbsp;; &lt;a href="https://reimaginereview.asapbio.org/listing/scirate/"&gt;&lt;span style="font-size: x-small;"&gt;https://reimaginereview.asapbio.org/listing/scirate/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://scipost.org/?tab=commentaries"&gt;https://scipost.org/?tab=commentaries&lt;/a&gt;&amp;nbsp;; &lt;a href="http://researchpracticesandtools.blogspot.com/2016/07/scipost-right-tool-for-commenting-arxiv.html"&gt;&lt;span style="font-size: x-small;"&gt;http://researchpracticesandtools.blogspot.com/2016/07/scipost-right-tool-for-commenting-arxiv.html&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;For more related projects, see &lt;a href="https://reimaginereview.asapbio.org/"&gt;https://reimaginereview.asapbio.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Illustration of the comment section for research papers:&amp;nbsp;&lt;a href="https://phdcomics.com/comics.php?f=1178"&gt;https://phdcomics.com/comics.php?f=1178&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Inactive efforts:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://selectedpapers.net/"&gt;https://selectedpapers.net/&lt;/a&gt;&amp;nbsp;;&amp;nbsp;&lt;a href="https://johncarlosbaez.wordpress.com/2013/06/14/the-selected-papers-network-part-2/"&gt;&lt;span style="font-size: x-small;"&gt;https://johncarlosbaez.wordpress.com/2013/06/14/the-selected-papers-network-part-2/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Another overlay: variable identification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Find the same variable referenced in multiple papers

&lt;/li&gt;&lt;li&gt;Find the same expression reference in multiple papers
&lt;/li&gt;&lt;/ul&gt;
Having all of the metadata for every archive paper would be a good starting point to reference the variables with.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Example of active effort:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Subscription-based latex search of equations: &lt;a href="https://www.searchonmath.com/"&gt;https://www.searchonmath.com/&lt;/a&gt;&amp;nbsp;; $0.99 for the first month as of 2022-05-26, then $4.50/month after. Can search either web (stackoverflow, wikipedia) xor arxiv content.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Inactive effort:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://numericalatlas.cs.ucl.ac.uk/"&gt;http://numericalatlas.cs.ucl.ac.uk/&lt;/a&gt;&amp;nbsp;which is described in &lt;a href="https://arxiv.org/abs/2107.00665"&gt;https://arxiv.org/abs/2107.00665&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-05-26T01:01:14.594Z</blogger:created>
    <published>2022-05-27T20:32:00.003Z</published>
    <updated>2022-05-27T20:32:30.740Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/05/pdg-as-dedicated-website-and-pdg-as.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4030437367526949476</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Streamlining the current PDG process</title>
    <content type='html'>[output] = inference_rule(input)&lt;br /&gt;
&lt;br /&gt;
[output_1, output_2] = inference_rule(input_1, input_2, feed)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;select an inference rule from list&lt;/li&gt;
&lt;li&gt;correct number of inputs, outputs, feeds is prompted for user&lt;/li&gt;
&lt;li&gt;inputs can be selected from all previous expressions&lt;/li&gt;
&lt;li&gt;database is populated with required information&lt;/li&gt;
&lt;/ol&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-13T23:53:11.970Z</blogger:created>
    <published>2015-09-13T23:55:00Z</published>
    <updated>2015-09-13T23:55:08.114Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/streamlining-current-pdg-process.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4056377446141848691</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>refocusing the motivation for the Physics Derivation Graph</title>
    <content type='html'>&lt;p&gt;The following aspects are "nice-to-have" in the &lt;a href="https://derivationmap.net/"&gt;Physics Derivation Graph&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;validation of derivation steps using computer algebra systems&lt;/li&gt;&lt;li&gt;validation of consistency&amp;nbsp;expression dimensions&lt;/li&gt;&lt;li&gt;validation of consistency of units when present in expressions&lt;/li&gt;&lt;li&gt;visualization of the graph&lt;/li&gt;&lt;li&gt;make the code pretty and easy to navigate for contributors&lt;/li&gt;&lt;li&gt;document the source code and design decisions&lt;/li&gt;&lt;li&gt;searching the graph (see &lt;a href="https://physicsderivationgraph.blogspot.com/2021/08/searching-physics-derivation-graph.html"&gt;this&lt;/a&gt; and &lt;a href="https://physicsderivationgraph.blogspot.com/2020/05/why-web-interfaces-are-limited-in.html"&gt;this&lt;/a&gt; and &lt;a href="https://physicsderivationgraph.blogspot.com/2020/07/searching-math-and-physics-content.html"&gt;this&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;ability to determine whether paper is written by a crackpot&lt;/li&gt;&lt;li&gt;ability to detect unintentional errors in an article or book&lt;/li&gt;&lt;li&gt;cross-document references&lt;/li&gt;&lt;li&gt;semantic tagging of Latex documents&lt;/li&gt;&lt;li&gt;converting Latex from &lt;a href="https://arxiv.org/"&gt;arxiv&lt;/a&gt; into formats supporting the above objectives&lt;/li&gt;&lt;li&gt;linking &lt;a href="https://derivationmap.net/"&gt;Physics Derivation Graph&lt;/a&gt; to existing ontology databases&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The core objective of the Physics Derivation Graph is identifying the mathematical connectivity of the various domains of Physics. The same connectivity should be able to relate "basic" Physics (e.g., &lt;i&gt;F=ma&lt;/i&gt;) to advanced Physics (e.g., the theory of the Standard model, string theory).&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I know of two ways to document the connectivity:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;identify symbol re-use&lt;/li&gt;&lt;li&gt;identify inter-related derivations at the level of expressions&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The symbol re-use is less interesting than the re-use of expressions.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I've previously documented a plan,&lt;/div&gt;&lt;div&gt;&lt;a href="https://physicsderivationgraph.blogspot.com/2017/07/finding-edges-for-physics-derivation.html"&gt;https://physicsderivationgraph.blogspot.com/2017/07/finding-edges-for-physics-derivation.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;but I didn't specify what would qualify as sufficient to show completeness.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What core expressions are representative of all of Physics? Are there a set of expressions that, if shown to be connected by derivations, would be sufficient to demonstrate the span of the concept?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I expect that, for any given subdomain of Physics, there are central expressions. The task list is then&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;identify every named expression in Physics -- see &lt;a href="https://derivationmap.net/central_expessions"&gt;https://derivationmap.net/central_expessions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;identify every variable in that list of named expressions&lt;/li&gt;&lt;li&gt;enter all named expressions and variables into the PDG database&lt;/li&gt;&lt;li&gt;determine which expressions are not connected to anything&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-20T20:56:22.640Z</blogger:created>
    <published>2021-08-21T00:58:00.004Z</published>
    <updated>2021-08-22T01:07:16.832Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/08/refocusing-motivation-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4101853933189372694</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>intermittent Internal Server Error on webpage - activity log of diagnosis</title>
    <content type='html'>&lt;P&gt;My login to the server provides an overview,
&lt;pre&gt;
Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-45-generic x86_64)

  System information as of Sat Apr 22 23:49:00 UTC 2023

  System load:                      0.09
  Usage of /:                       70.8% of 24.06GB
  Memory usage:                     72%
  Swap usage:                       0%
  Processes:                        131
  Users logged in:                  1
&lt;/pre&gt;

&lt;p&gt;I first confirmed disk utilization.
&lt;/p&gt;&lt;pre&gt;$ df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            474M     0  474M   0% /dev
tmpfs            99M  1.2M   97M   2% /run
/dev/vda1        25G   18G  7.1G  71% /
&lt;/pre&gt;

&lt;p&gt;I next looked at the error logs. When the error occurred, the fault trace ended with
&lt;/p&gt;&lt;pre&gt;  File "/home/appuser/app/controller.py", line 3424, in review_derivation
    dat = clib.read_db(path_to_db)
  File "/home/appuser/app/common_lib.py", line 142, in read_db
    for row in cur.execute("SELECT * FROM data"):
sqlite3.OperationalError: no such table: data
  &lt;/pre&gt;
Probably a race condition in the Python? If so, this problem is due to my hack of writing the database to SQL. My motivation to resolve this issue is low because I had intended to switch to Neo4j. I haven't complete the migration from JSON/SQL to Neo4j yet.

  
&lt;p&gt;I used &lt;code&gt;top&lt;/code&gt; and saw 2 and 3 instances of &lt;code&gt;gunicorn&lt;/code&gt;

&lt;/p&gt;&lt;p&gt;I checked for redundant Docker containers running but saw only what's expected:
&lt;/p&gt;&lt;pre&gt;$ docker ps
CONTAINER ID   IMAGE                           COMMAND                  CREATED       STATUS       PORTS                                                                      NAMES
632ee101f714   v7_pickle_web_interface_nginx   "nginx -g 'daemon of…"   4 weeks ago   Up 4 weeks   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, :::443-&amp;gt;443/tcp   v7_pickle_web_interface_nginx_1
80bb13ec66ca   v7_pickle_web_interface_flask   "gunicorn --reload -…"   4 weeks ago   Up 4 weeks   5000/tcp                                                                   v7_pickle_web_interface_flask_1
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-04-22T20:38:47.416Z</blogger:created>
    <published>2023-04-22T23:51:00.001Z</published>
    <updated>2023-04-22T23:51:08.110Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='server management'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='digitalocean'/>
    <blogger:filename>/2023/04/intermittent-internal-server-error-on.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4124462480562084472</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>checking dimensions using Sympy</title>
    <content type='html'>Suppose we have the expression&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;F = m a&lt;/span&gt;&lt;br /&gt;
and we want to validate the consistency of dimensions.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;import sympy.physics.units&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;import sympy.physics.units.systems.si&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;eq = parse_latex("F = m a")&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;lhs = eq.lhs&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;rhs = eq.rhs&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;set_of_symbols_in_eq = eq.free_symbols&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
for each recognized symbol, associate that symbol with the ID in the PDG.&lt;br /&gt;
for each symbol ID in the PDG, determine the dimensions of that variable.&lt;br /&gt;
for each symbol, create a new "_dim" variable for the dimensions based on the lookup table in the PDG&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;F = sympy.physics.units.mass * sympy.physics.units.length / (sympy.physics.units.time**2)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;m = sympy.physics.units.mass&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;a = sympy.physics.units.length / (sympy.physics.units.time**2)&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
I wanted to avoid manually entering the AST,&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;sympy.physics.units.systems.si.dimsys_SI.equivalent_dims(F_dim, m_dim * a_dim)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;This conversation&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;https://groups.google.com/d/msg/sympy/_RnbbOqhERM/dehog-xpAgAJ&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;led to&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;import sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;from sympy.physics.units import mass, length, time&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;from sympy.physics.units.systems.si import dimsys_SI&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;convert the Latex string into SymPy expression&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;eq = parse_latex("F = m a")&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;specify the dimension of each symbol&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;F = mass * length / time**2&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;m = mass&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;a = length / time**2&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;dimsys_SI.equivalent_dims( eval(str(eq.lhs)), eval(str(eq.rhs)) )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;For more on this content, see&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;a href="https://groups.google.com/d/msg/sympy/_RnbbOqhERM/YAoJAbyPAgAJ"&gt;https://groups.google.com/d/msg/sympy/_RnbbOqhERM/YAoJAbyPAgAJ&lt;/a&gt;&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-27T17:17:59.031Z</blogger:created>
    <published>2020-05-27T17:41:00.006Z</published>
    <updated>2020-05-30T20:47:06.773Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/checking-dimensions-using-sympy.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4141927274005100924</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>proprietary code and data -- interacting with commercial projects</title>
    <content type='html'>There are two aspects to a project like the Physics Derivation Graph that could be&amp;nbsp;proprietary: the data, and the software which manipulates the data.&lt;br /&gt;
&lt;br /&gt;
One motivation for protecting these aspects of a project are to make money. I'm not seeking money.&lt;br /&gt;
Another motivation for protection is to ensure citation when the project is used. I apply the Creative &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Commons Attribution 4.0 International License&lt;/a&gt; to the Physics Derivation Graph project.&lt;br /&gt;
&lt;br /&gt;
I want to enable other people, including commercial efforts, to benefit from use of both the data and software I create. I also share the syntax of the data format so that future contributions from others can adhere to the data I already have. A published syntax standard also enables writing parsers for translation of the data format.</content>
    <blogger:metaDescription/>
    <blogger:created>2017-07-07T23:55:57.338Z</blogger:created>
    <published>2017-07-08T00:14:00Z</published>
    <updated>2017-07-08T00:14:17.946Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/07/proprietary-code-and-data-interacting.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4155097319395966718</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>read-only static page (web 1.0) versus user-editable dynamic content (web 2.0)</title>
    <content type='html'>I recently found a use case for&amp;nbsp;user-editable dynamic web content, which is a significant shift from the previous use case of&amp;nbsp;read-only static web pages. I've spent the day exploring how to enable&amp;nbsp;user-editable dynamic content using Flask as a web framework.&lt;br /&gt;
&lt;br /&gt;
I realized that d3js is a distractingly pretty interface for the static graph, but it doesn't move me towards&amp;nbsp;&lt;a href="http://equationmap.com/"&gt;EquationMap.com&lt;/a&gt;'s intuitive interface. My Flask-based interface for dynamic content is driven by conventional &lt;a href="http://www.w3schools.com/html/html_forms.asp"&gt;form-based input&lt;/a&gt;. While this would accomplish the functionality, it's not as sexy as EquationMap.&lt;br /&gt;
&lt;br /&gt;
There remains important work to be done with the static read-only content, namely a "zoom" interface which connects the concept map to specific derivations.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Update 20151207: a generated "overview" concept map showing the relations between derivations was created</content>
    <blogger:metaDescription/>
    <blogger:created>2015-11-30T20:21:48.552Z</blogger:created>
    <published>2015-11-30T20:30:00.001Z</published>
    <updated>2015-12-09T03:13:21.365Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/11/read-only-static-page-web-10-versus.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4162545677803119108</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Steps to convert a published scientific paper into the Physics Derivation Graph</title>
    <content type='html'>&lt;p&gt;This post documents the steps taken to get the derivations in the paper &lt;a href="https://arxiv.org/pdf/2004.04818.pdf"&gt;Speed of sound from fundamental physical constants&lt;/a&gt;&amp;nbsp;into the Physics Derivation Graph.&amp;nbsp;&lt;/p&gt;&lt;p&gt;1) Read the paper. I need to understand the point of the paper and where content is in the text.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;2) Identify the primary result of the derivation. Which equation is the output? Is there more than one?
In this paper, equation 1 is the primary result. 

&lt;/p&gt;&lt;p&gt;&lt;i&gt;Tangent&lt;/i&gt;: I tested whether the most popular equation is the most important. &lt;br /&gt;
This is measurable using the command
&lt;/p&gt;&lt;pre&gt;cat sound1.tex | tr " " "\n" |\          # replace spaces with newlines -- word tokenization
   grep "ref{" |\                        # find internal references to labeled expressions
   sed 's/.*\\ref{//' | sed 's/}.*//' |\ # remove the irrelevant latex "\ref{}" to isolate the expression label ID
   sort | uniq -c | sort -n              # rank the popularity of expression labels
2 v001
3 abinitio
3 all
3 ratio
3 v0
3 v01
3 v1
5 elemental
6 bohr
6 rydberg
11 a
15 v00
15 v3
&lt;/pre&gt;

Decoding those latex labels to equations in the PDF,
"v3" is equation 9, which is tied for most popular with "v00" -- equation 4. The second most popular label "a" is equation 10.
The equation I'm claiming as the primary result, equation 1, is labeled as "v0" and is referenced 3 times.

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;3) What sections of the paper contain the derivation?&lt;br /&gt;
There are actually two derivations of the same result.
  &lt;/p&gt;&lt;ul&gt;
&lt;li&gt; one derivation is on page 2 column 1&lt;/li&gt;
  &lt;li&gt; another derivation is on page 2 column 2&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;4) Determine whether the derivation already exist in the Physics Derivation Graph database. Check&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://derivationmap.net/list_all_expressions"&gt;https://derivationmap.net/list_all_expressions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://derivationmap.net/list_all_symbols"&gt;https://derivationmap.net/list_all_symbols&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://derivationmap.net/list_all_derivations"&gt;https://derivationmap.net/list_all_derivations&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;
5) On paper, write out equations from the paper. Here I'm limiting the scope to one derivation on page 2 column 1. Fill in additional equations that are missing from the text. Use arrows to denote flow of derivation.

&lt;/p&gt;&lt;p&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEil18S_ynlkhpFzMlf8PRqNAW_iCMYtYK05kRKkK5t_w6lFtCfgu1U6pdUjtvQFayLEkFzxq-iF51yDAdqbp5peb9WlhhnAdcOt-Z4j1RgLlZZzyR6N4b8PkWCAYKkY92K2vxgzxO10v2Z0/s2048/20210807_143731.jpeg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="2048" data-original-width="1478" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEil18S_ynlkhpFzMlf8PRqNAW_iCMYtYK05kRKkK5t_w6lFtCfgu1U6pdUjtvQFayLEkFzxq-iF51yDAdqbp5peb9WlhhnAdcOt-Z4j1RgLlZZzyR6N4b8PkWCAYKkY92K2vxgzxO10v2Z0/w462-h640/20210807_143731.jpeg" width="462" /&gt;&lt;/a&gt;
 
&lt;/p&gt;&lt;p&gt;Often I'll make math mistakes or go down paths that turn out to be irrelevant. If I were a typical researcher, this is where the reconstruction process would stop.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;6) On a separate paper, rewrite the graph and label the edges in the directed graph to describe the operation being carried out.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;7) On a separate paper, rewrite the content from the previous step to refine the "operation being carried out" to a directed graph with inference rules available in the Physics Derivation Graph.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;8) Identify all symbols used in the derivation: \rho, V, x, a, m, \alpha, M, K, \hbar, c, \pi, \epsilon_0&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;9) Identify which symbols in the derivation already exist in the Physics Derivation Graph and which need to be added. Record the symbol ID of each for later use.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;10) Add missing symbols into the the Physics Derivation Graph database using&amp;nbsp;&amp;nbsp;&lt;a href="https://derivationmap.net/list_all_symbols#add%20symbol"&gt;https://derivationmap.net/list_all_symbols#add%20symbol&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;11) Identify which inference rules the derivation uses.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;12) Identify which inference rules for this derivation exist in the Physics Derivation Graph and which need to be added.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;13) If novel inference rules are needed for this derivation, enter those in&amp;nbsp;&lt;a href="https://derivationmap.net/list_all_inference_rules#add_inf_rule"&gt;https://derivationmap.net/list_all_inference_rules#add_inf_rule&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;14) Using&amp;nbsp;&lt;a href="https://derivationmap.net/start_new_derivation/"&gt;https://derivationmap.net/start_new_derivation/&lt;/a&gt;, enter the expressions and inference rules for the steps of the derivation. For each step,&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ensure the symbols are referenced correctly in each expression&lt;/li&gt;&lt;li&gt;ensure the SymPy version of the expression is correct&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The output of this step is&amp;nbsp;&lt;a href="https://derivationmap.net/review_derivation/608598/"&gt;https://derivationmap.net/review_derivation/608598/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;15) Offline, in the JSON file containing the derivation, edit the symbol IDs and SymPy representations as needed to get the step validations to be correct.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Review the modifications on&amp;nbsp;&lt;a href="https://derivationmap.net/review_derivation/608598/"&gt;https://derivationmap.net/review_derivation/608598/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;TODO&lt;/i&gt;: The extensive linking of variables to definitions is not made accessible in the output, so there is no way for the user to leverage the linked information.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;expressions in the PDF/HTML output contain variables which have no link to their definitions&lt;/li&gt;&lt;li&gt;variables in the text of the PDF/HTML output are not linked to the expressions or their definitions&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;As a result of the above observation,&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/217"&gt;https://github.com/allofphysicsgraph/proofofconcept/issues/217&lt;/a&gt; was opened.&amp;nbsp;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-08T14:09:27.307Z</blogger:created>
    <published>2021-08-08T15:15:00.005Z</published>
    <updated>2021-08-22T13:47:39.434Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='process documentation'/>
    <blogger:filename>/2021/08/steps-to-convert-published-scientific.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4172431907505444819</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>django and openshift</title>
    <content type='html'>created a django cartridge on openshift&lt;br /&gt;
physicsderivationgraph-beanno.rhcloud.com&lt;br /&gt;
&lt;br /&gt;
physicsderivationgraph-beanno.rhcloud.com/admin&lt;br /&gt;
&lt;br /&gt;
On my computer I ran&lt;br /&gt;
sudo pip install django&lt;br /&gt;
&lt;br /&gt;








&lt;br /&gt;
&lt;div class="p1"&gt;
python wsgi/myproject/manage.py migrate&lt;/div&gt;
&lt;div class="p1"&gt;
python wsgi/myproject/manage.py runserver&lt;/div&gt;
&lt;div class="p1"&gt;







&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;python wsgi/myproject/manage.py syncdb&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;--&amp;gt; prompted to create a superuser&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-11-28T04:35:57.368Z</blogger:created>
    <published>2015-11-28T22:10:00Z</published>
    <updated>2015-11-28T22:10:27.760Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/11/django-and-openshift.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4186014056740204061</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Realizing my value for the Physics Derivation Graph</title>
    <content type='html'>I previously attempted to &lt;a href="https://physicsderivationgraph.blogspot.com/2017/06/not-getting-caught-in-details.html"&gt;catalog the various domains of activities&lt;/a&gt; associated with the Physics Derivation Graph. The relevant skill sets include logic, computer science, programming, mathematics, and physics. I don't have the time to learn all these domains to sufficient degree, but I do think I have some value to provide.&lt;br /&gt;
&lt;br /&gt;
I could do tasks in each of these domains, but the implementation would be poor and there's an opportunity cost for me. Alternatively, I can focus on tasks I have expertise on.&lt;br /&gt;
&lt;br /&gt;
What I think I may be good at is gathering the relevant equations and identifying how they are related. This would first be done on paper rather than attempting to find the appropriate method for computer entry.&lt;br /&gt;
&lt;br /&gt;
Task 1: enumerate potential equations for inclusion in the&amp;nbsp;Physics Derivation Graph&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Physics_equations"&gt;https://en.wikipedia.org/wiki/Physics_equations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Category:Equations_of_physics"&gt;https://en.wikipedia.org/wiki/Category:Equations_of_physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_equations"&gt;https://en.wikipedia.org/wiki/List_of_equations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
Task 2: given a list of relevant equations, enumerate all pairs&lt;br /&gt;
&lt;br /&gt;
Task 3: for each pair, is there a derivation relation?&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2017-06-29T01:50:54.323Z</blogger:created>
    <published>2017-06-29T02:39:00Z</published>
    <updated>2017-06-29T02:39:08.742Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='prioritization'/>
    <blogger:filename>/2017/06/realizing-my-value-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4212271814222449708</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>set theory depends on logic and axioms; logic depends on set theory</title>
    <content type='html'>The inference rules used in the Physics Derivation Graph could probably be reduced to a more fundamental basis.&lt;br /&gt;&lt;br /&gt;The problem is that set theory starts by assuming logical rules and axioms, while the rules of logic are based on set theory.&lt;br /&gt;
&lt;br /&gt;
From the perspective of a Physicist, the only relevance is that the rules being used are self-consistent.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-25T16:50:06.566Z</blogger:created>
    <published>2020-05-25T16:52:00.002Z</published>
    <updated>2020-05-25T16:52:47.722Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/set-theory-depends-on-logic-and-axioms.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4264465686414406264</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>identifying classes in the Physics Derivation Graph for OWL (Web Ontology Language)</title>
    <content type='html'>&lt;p&gt;Classes and subclasses of entities in the Physics Derivation Graph:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;derivations = an ordered set of two or more steps&lt;/li&gt;&lt;li&gt;steps = a set of one or more statements related by an inference rule&lt;/li&gt;&lt;li&gt;inference rule = identifies the relation of a set of one or more statements&lt;/li&gt;&lt;li&gt;statement = two or more expressions (LHS and RHS) and a relational operator&lt;/li&gt;&lt;ul&gt;&lt;li&gt;expressions = an ordered set of symbols&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_mathematical_symbols"&gt;symbols&lt;/a&gt;&amp;nbsp;= a token&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Operation_(mathematics)"&gt;operator&lt;/a&gt; = applies to one or more values (aka&amp;nbsp;operands). &lt;i&gt;Property&lt;/i&gt;: number of expected values&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Relational_operator"&gt;relational operator&lt;/a&gt;&amp;nbsp;= exists between two expressions that are &lt;a href="https://en.wikipedia.org/wiki/Sides_of_an_equation"&gt;sides of an equation&lt;/a&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Equality_(mathematics)"&gt;equality&lt;/a&gt;. &lt;i&gt;Members&lt;/i&gt;: &lt;a href="https://en.wikipedia.org/wiki/Equals_sign"&gt;=&lt;/a&gt;, \approx&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Inequality_(mathematics)"&gt;inequality&lt;/a&gt;. &lt;i&gt;Members&lt;/i&gt;: &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Inequation"&gt;inequation&lt;/a&gt;. &lt;i&gt;Member&lt;/i&gt;: !=&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;value. &lt;i&gt;Property&lt;/i&gt;: categorized as "variable" xor "constant"&lt;/li&gt;&lt;ul&gt;&lt;li&gt;integer = one or more digits. The set of digits depends on the base&lt;/li&gt;&lt;li&gt;float&lt;/li&gt;&lt;li&gt;complex&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;unit. &lt;i&gt;Examples&lt;/i&gt;: "m" for meter, "kg" for kilogram&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;Some aspects of expressions and derivations I don't have names for yet:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;binary operators {"where", "for all", "when", "for"} used two relate two expressions, the "primary expression" on the left and one or more "scope"/"definition"/"constraint" (equation/inequality)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some aspects of expressions and derivations I don't need to label in the PDG:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;terms =&amp;nbsp;parts of the expression that are connected with addition and subtraction&lt;/li&gt;&lt;li&gt;factors =&amp;nbsp;parts of the expression that are connected by multiplication&lt;/li&gt;&lt;li&gt;coefficients =&amp;nbsp;a number that is multiplied by a variable in a mathematical expression.&lt;/li&gt;&lt;li&gt;power, base, exponent&lt;/li&gt;&lt;li&gt;base (as in decimal vs hexadecimal, etc)&lt;/li&gt;&lt;li&gt;formula&lt;/li&gt;&lt;li&gt;function&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;See also&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Category:Mathematical_terminology"&gt;https://en.wikipedia.org/wiki/Category:Mathematical_terminology&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;An equation is two expressions linked with an equal sign.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;b&gt;What is the superclass above "equation" and "inequality"?&lt;/b&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;So far I'm settling on "statement".&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;I am intentionally staying out of the realm of {proofs, theorems, axioms} both because that is outside the scope of the Physics Derivation Graph and because the topic is already addressed by OMDoc.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Suppose we have a statement like&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;y = x^2 + b where x = {5, 3, 1}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;In that statement,&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;"&lt;span style="font-family: courier;"&gt;y = x^2 + b&lt;/span&gt;" is an equation&lt;/li&gt;&lt;li&gt;"&lt;span style="font-family: courier;"&gt;x^2 + b&lt;/span&gt;" is an expression and is related to the expression "y" by equality.&amp;nbsp;&lt;/li&gt;&lt;li&gt;"&lt;span style="font-family: courier;"&gt;x^2&lt;/span&gt;" is a term in the RHS expression&lt;/li&gt;&lt;li&gt;"&lt;span style="font-family: courier;"&gt;x = {5, 3, 1}&lt;/span&gt;" is an equation that provides scope for the primary equation.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;What is the "where" relation in the statement? The "where" is a binary operator that relates two equations. There are other "statement operators" to relate equations, like "for all"; see the statement&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;a + c = 2*g + k for all g \in \Re&lt;/span&gt;&lt;/div&gt;&lt;div&gt;In that statement, "g \in \Re" is (an equation?) serving as a scope for the primary equation.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All statements have supplemental scope/definition equations that are usually left as implicit. The reader is expected to deduce the scope of the statement from the surrounding context.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The supplemental scope/definition equations describe both per-variable and inter-variable constraints. For example,&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;x*y + 3 = 94 where ((x \in \Re) AND (y \in \Re) AND (x&amp;lt;y))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;More complicated statement:&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;f(x) = { 0 for x&amp;lt;0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;{ 1 for 0&amp;lt;=x&amp;lt;=1&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;{ 0 for x&amp;gt;1&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Here the LHS is a function and the RHS is an integer, but the value of the integer depends on x.&amp;nbsp;&lt;/div&gt;&lt;div&gt;Note that the "0&amp;lt;=x&amp;lt;=1" can be separated into "0&amp;lt;=x AND x&amp;lt;=1". Expanding this even more,&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;(f(x) = 0 for x&amp;lt;0) AND (f(x) = 1 for (0&amp;lt;=x AND x&amp;lt;=1)) AND (f(x) = 0 for x&amp;gt;1)&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-12-13T14:14:04.658Z</blogger:created>
    <published>2020-12-13T14:16:00.003Z</published>
    <updated>2020-12-14T02:35:22.612Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/12/identifying-classes-in-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4286834332862119130</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>CSRF</title>
    <content type='html'>&lt;a href="https://flask-wtf.readthedocs.io/en/v0.12/csrf.html"&gt;https://flask-wtf.readthedocs.io/en/v0.12/csrf.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
If the template has a form, you don’t need to do any thing. It is the same as before:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;form method="post" action="/"&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;{{ form.csrf_token }}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
But if the template has no forms, you still need a csrf token:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;form method="post" action="/"&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;input type="hidden" name="csrf_token" value="{{ csrf_token() }}" /&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-20T01:50:29.653Z</blogger:created>
    <published>2020-04-20T01:51:00.002Z</published>
    <updated>2020-04-20T01:51:21.314Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/csrf.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4287140640234545199</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Physics Derivation Graph as Latex package: omdoc and sTeX</title>
    <content type='html'>Since Physics content is authored as .tex files, a useful question would be to consider how the Physics Derivation Graph could be made into a Latex package.&lt;br /&gt;
&lt;br /&gt;
A literature search indicates sTeX is the closest implementation, featuring a domain specific language (the cmathml package) enabling concise specification of Content MathML and the ability to generate math Latex or Presentation MathML. While necessary, the Content MathML does not address other aspects of the Physics Derivation Graph like (Godel numbering for symbols) and (inference rules between steps).&lt;br /&gt;
&lt;br /&gt;
There are efforts to semantically structure mathematical papers, for example &lt;a href="https://en.wikipedia.org/wiki/OMDoc"&gt;OMDoc&lt;/a&gt;.&lt;br /&gt;
&lt;blockquote&gt;
Both MathML and OpenMath address mathematical formulas in isolation, whereas OMDoc allows to express the structure of mathematical documents, for example the relation between definitions, theorems and proofs.
&lt;/blockquote&gt;
source: &lt;a href="https://pdfs.semanticscholar.org/a91a/f3fa64e1296de470206f375a29ddc1c7b54d.pdf"&gt;"Extracting Mathematical Semantics from LATEX Documents"&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
There is a Physics extension for OMDoc, PhysML&lt;br /&gt;
&lt;a href="https://github.com/OMdoc/OMDoc/wiki/PhysML"&gt;https://github.com/OMdoc/OMDoc/wiki/PhysML&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/OMDoc/PhysML"&gt;https://github.com/OMDoc/PhysML&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-27T17:38:36.478Z</blogger:created>
    <published>2020-07-27T17:58:00.001Z</published>
    <updated>2020-07-27T18:07:53.768Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/physics-derivation-graph-as-latex.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4413038060117313262</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>improving efficiency of manually entered content </title>
    <content type='html'>One of the major barriers to growth for the Physics Derivation Graph will be manual entry of expressions in support of derivations. Reducing "minor" inconveniences and adding "minor" help features can improve the user experience, the consistency of content, and the throughput of content creation.&lt;br /&gt;
&lt;br /&gt;
As an example, for a given step in a derivation the user will need to specify the inference rule. Manually typing the name is laborious and induces cognitive burden. An "autocomplete" feature reduces labor but still requires thinking. A dropdown menu of all possible inference rules could be used, but a reduction to a dropdown with only relevant inference rules is better.&lt;br /&gt;
&lt;br /&gt;
Similarly for manually entering expressions, autocompletion is helpful. Being able to specify which expression that has been previously entered is better.&lt;br /&gt;
&lt;br /&gt;
A drag-and-drop interface for connecting nodes in the graph would be ideal.</content>
    <blogger:metaDescription/>
    <blogger:created>2019-07-28T20:23:02.048Z</blogger:created>
    <published>2019-07-28T20:29:00Z</published>
    <updated>2019-07-28T20:29:03.452Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='automation'/>
    <blogger:filename>/2019/07/improving-efficiency-of-manually.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4463306642236446171</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>lots of channels for tracking exploration</title>
    <content type='html'>A private Trello board for task tracking:&lt;br /&gt;
&lt;a href="https://trello.com/b/kSZvdVg5/physics-derivation-graph"&gt;https://trello.com/b/kSZvdVg5/physics-derivation-graph&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Primary source code repo:&lt;br /&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/doc/physics_graph_notes.log"&gt;https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/doc/physics_graph_notes.log&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Demo of proof of concept:&lt;br /&gt;
&lt;a href="http://allofphysicsgraph.github.io/proofofconcept/"&gt;http://allofphysicsgraph.github.io/proofofconcept/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
A blog to track my status&lt;br /&gt;
&lt;a href="https://physicsderivationgraph.blogspot.com/"&gt;https://physicsderivationgraph.blogspot.com/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
An old set of descriptions&lt;br /&gt;
&lt;a href="https://sites.google.com/site/physicsderivationgraph/"&gt;https://sites.google.com/site/physicsderivationgraph/&lt;/a&gt;&lt;br /&gt;
This site is depreciated</content>
    <blogger:metaDescription/>
    <blogger:created>2018-05-04T01:54:47.062Z</blogger:created>
    <published>2018-05-04T01:56:00Z</published>
    <updated>2018-05-04T01:57:03.212Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/05/lots-of-channels-for-exploration.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4518824944108954406</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>representing the Laplace operator (nabla in Latex) in SymPy using Del</title>
    <content type='html'>https://en.wikipedia.org/wiki/Laplace_operator&lt;br /&gt;
https://docs.sympy.org/latest/modules/vector/fields.html&lt;br /&gt;
&lt;br /&gt;&lt;span style="font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; import sympy&lt;br /&gt;&lt;div&gt;&amp;gt;&amp;gt;&amp;gt; from sympy import *&lt;/div&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; from sympy.vector import Del&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;Original expression as Latex converted to SymPy to Latex:&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;latex(eval(sympy.srepr(parse_latex("\\frac{-\\hbar^2}{2m} \\nabla = {\\calH}"))))&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;'- \\frac{\\hbar^{2} nabla}{2 m} = calH'&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The first two conversions yield SymPy:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;sympy.srepr(parse_latex("\\frac{-\\hbar^2}{2m} \\nabla = {\\calH}"))&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;"Equality(Mul(Symbol('nabla'), Mul(Mul(Integer(-1), Pow(Symbol('hbar'), Integer(2))), Pow(Mul(Integer(2), Symbol('m')), Integer(-1)))), Symbol('calH'))"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This can be successfully evaluated as SymPy because the 'nabla' is a Symbol&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;eval("Equality(Mul(Symbol('nabla'), Mul(Mul(Integer(-1), Pow(Symbol('hbar'), Integer(2))), Pow(Mul(Integer(2), Symbol('m')), Integer(-1)))), Symbol('calH'))")&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;Eq(-hbar**2*nabla/(2*m), calH)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However, replacing 'nabla' with 'Del' causes the eval to fail:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;eval("Equality(Mul(Del, Mul(Mul(Integer(-1), Pow(Symbol('hbar'), Integer(2))), Pow(Mul(Integer(2), Symbol('m')), Integer(-1)))), Symbol('calH'))")&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;Traceback (most recent call last):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;nbsp; File "/usr/local/lib/python3.6/dist-packages/sympy/core/mul.py", line 307, in flatten&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;nbsp; &amp;nbsp; b, e = o.as_base_exp()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: red; font-family: courier;"&gt;AttributeError: type object 'Del' has no attribute 'as_base_exp'&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;
Original expression to convert to SymPy:&lt;br /&gt;&lt;span style="font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;sympy.srepr(parse_latex("\\nabla^2 \\psi \\left( \\vec{r},t) \\right) = \\frac{i}{\\hbar} \\vec{p} \\cdot \\left( \\vec{ \\nabla} \\psi( \\vec{r},t) \\right)"))&lt;/b&gt;&lt;br /&gt;
"Mul(Pow(Symbol('nabla'), Integer(2)), Mul(Symbol('psi'), Mul(Symbol('right'), Function('left')(Mul(Symbol('r'), Symbol('vec')), Symbol('t')))))"&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
The Latex "\nabla" is SymPy's "Del". However, squaring Del isn't available&lt;br /&gt;&lt;span style="font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; sympy.latex(sympy.Pow(Del, sympy.Integer(2)), sympy.Symbol('x'))&lt;br /&gt;
...&lt;br /&gt;
AttributeError: type object 'Del' has no attribute '_eval_power'&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
The Laplacian operator is the dot product of two Del operators, so&lt;br /&gt;&lt;span style="font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;delop = Del()&lt;/b&gt;&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;sympy.latex(delop.dot(delop(sympy.Function('\psi')(sympy.Symbol('r'), sympy.Symbol('t')))))&lt;/b&gt;&lt;br /&gt;
'0'&lt;br /&gt;&lt;/span&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-04T20:27:15.429Z</blogger:created>
    <published>2020-09-04T21:03:00.001Z</published>
    <updated>2020-09-20T19:42:38.492Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <blogger:filename>/2020/09/representing-laplace-operator-nabla-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4557132231292669955</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>transition from "validation of concept" to "usable by other people"</title>
    <content type='html'>My initial intent with the Physics Derivation Graph was to validate the concept of using a graph as a data structure for mathematical Physics. Creating the &lt;a href="http://derivationmap.net"&gt;derivationmap.net&lt;/a&gt; website was an important milestone -- I was proud of the content and the presentation. The previous website (&lt;a href="https://allofphysicsgraph.github.io/proofofconcept/"&gt;https://allofphysicsgraph.github.io/proofofconcept/&lt;/a&gt;) felt like merely a step beyond having a public code repo since the content was limited to displaying graphs.&lt;br /&gt;
&lt;br /&gt;
Now I can direct people to the &lt;a href="http://derivationmap.net"&gt;derivationmap.net&lt;/a&gt; website and not feel embarrassed by the limitations imposed by the host. The limitations of derivationmap.net are due to my creativity and technical skill.&lt;br /&gt;
&lt;br /&gt;
The consequence of feedback from interested people has been increased awareness of the roughness of the code. The code (HTML, Python, JSON) is not something I would find accessible if I were reviewing the project.&lt;br /&gt;
&lt;br /&gt;
Actions I can take to improve the accessibility of the code:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;better docstrings&lt;/li&gt;
&lt;li&gt;use doctests&lt;/li&gt;
&lt;li&gt;document the workflow&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-16T13:59:36.380Z</blogger:created>
    <published>2020-08-16T14:12:00.001Z</published>
    <updated>2021-08-21T18:23:25.866Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/transition-from-validation-of-concept.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4565700081312567119</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>OpenAI's process supervision for math problems and relevance to the Physics Derivation Graph</title>
    <content type='html'>&lt;p&gt;OpenAI just announced (see&amp;nbsp;&lt;a href="https://openai.com/research/improving-mathematical-reasoning-with-process-supervision"&gt;https://openai.com/research/improving-mathematical-reasoning-with-process-supervision&lt;/a&gt;) progress on solving math problems using&amp;nbsp;process supervision during training.&lt;/p&gt;&lt;p&gt;The data on&amp;nbsp;https://github.com/openai/prm800k/tree/main comes from&amp;nbsp;https://github.com/hendrycks/math (which is for&amp;nbsp;https://arxiv.org/pdf/2103.03874.pdf) and there are examples in that data which come from&amp;nbsp;&lt;a href="https://artofproblemsolving.com/wiki/index.php/2015_AIME_II_Problems/Problem_6"&gt;https://artofproblemsolving.com/wiki/index.php/2015_AIME_II_Problems/Problem_6&lt;/a&gt;&lt;/p&gt;&lt;p&gt;AoPS describes itself as "Math texts, online classes, and more for students in grades 5-12."&lt;/p&gt;&lt;p&gt;The problems are constrained and feel very artificial. See for example&amp;nbsp;&lt;a href="https://artofproblemsolving.com/wiki/index.php/Mock_AIME_1_Pre_2005_Problems/Problem_4"&gt;https://artofproblemsolving.com/wiki/index.php/Mock_AIME_1_Pre_2005_Problems/Problem_4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The training data doesn't have inference rules, so the output from the LLM doesn't have inference rules. As a consequence, the output of the LLM cannot be confirmed by a Computer Algebra System. The output text needs to be validated by a human. LLMs are hallucinating answers that sound reasonable, so checking each step is still vital.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The ability to resolve distinct variables across all of Mathematical Physics is beyond the scope of the training data.&amp;nbsp;&lt;/p&gt;&lt;p&gt;On a positive note, if the Physics Derivation Graph content existed, I now think an LLM-based approach could be used to make progress in Mathematical Physics.&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-01T02:22:31.189Z</blogger:created>
    <published>2023-06-01T02:43:00.005Z</published>
    <updated>2023-06-01T02:43:52.315Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='automation'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='machine learning'/>
    <blogger:filename>/2023/05/openais-process-supervision-for-math.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4567339806510583785</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>inspecting the list of users who have logged in</title>
    <content type='html'>&lt;pre&gt;$ sqlite3 flask/users_sqlite.db 
SQLite version 3.22.0 2018-01-22 18:45:57
Enter ".help" for usage hints.
sqlite&amp;gt; select * from user;
&lt;/pre&gt;
&lt;br /&gt;
use ctrl+d to terminate sqlite
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://sqlite.org/cli.html"&gt;https://sqlite.org/cli.html&lt;/a&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-13T11:19:11.959Z</blogger:created>
    <published>2020-05-13T11:19:00.005Z</published>
    <updated>2020-05-21T00:55:01.596Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sqlite3'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sql'/>
    <blogger:filename>/2020/05/inspecting-list-of-users-who-have.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4602054087342466081</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>connective derivations</title>
    <content type='html'>There are multiple derivations associated with waveguides. However, I don't see derivations focused on waveguides as being connective to any other topic. &lt;br /&gt;
&lt;br /&gt;
Similarly the Navier-Stokes equation for fluids doesn't seem to relate any topics (though I have less experience with this compared to waveguides).&lt;br /&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;There is probably a "connective derivation" that relates Quantum Mechanics to Statistical mechanics, probably involving the definition of entropy.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Another connection is that Statistical mechanics is related to thermodynamics (again, not clear what derivation would show this).&amp;nbsp;&lt;/li&gt;
&lt;li&gt;classical mechanics and astrophysics are based on the same concepts&lt;/li&gt;
&lt;li&gt;There should be a relation between (classical motion) and (relativity) since the difference is the assumptions about slow versus fast objects.&lt;/li&gt;
&lt;li&gt;Wave-particle duality present in optics relates to atomic theory&lt;/li&gt;
&lt;li&gt;the orbit of Mercury relates astrophysics to relativity&lt;/li&gt;
&lt;li&gt;thermodynamics connects to quantum mechanics in the&amp;nbsp;black-body radiation experiment&lt;/li&gt;
&lt;li&gt;quantum field theory relates relativity to quantum&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;
I don't have insight on how electrodynamics relates to quantum mechanics or how electrodynamics relates to classical mechanics.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-06-28T13:16:12.603Z</blogger:created>
    <published>2020-06-28T13:16:00.004Z</published>
    <updated>2020-07-15T00:26:57.741Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/06/connective-derivations.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4603372540942012131</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Relevance of TLA+ to the Physics Derivation Graph</title>
    <content type='html'>&lt;p&gt;The &lt;a href="https://derivationmap.net/"&gt;Physics Derivation Graph&lt;/a&gt; is just a &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; application, so I didn't expect &lt;a href="https://en.wikipedia.org/wiki/TLA%2B"&gt;TLA+&lt;/a&gt; would be relevant. My initial view was that there isn't an algorithm or a protocol in the PDG. The PDG is just a webpage, some middleware (e.g., bash or Python) and a back-end database (CSV, SQL, JSON, Neo4j, etc). Standard &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;MVC&lt;/a&gt; applies.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;After spending 1 day reviewing &lt;a href="https://physicsderivationgraph.blogspot.com/2022/10/websites-for-learning-tla.html"&gt;TLA+ materials&lt;/a&gt;, I realized the PDG has a workflow specification that I hadn't previously considered in detail.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;User has a derivation in mind and they want to integrate it with existing PDG content. User knows their derivation's expressions, steps, symbols (variables and constants), and operators.&lt;/li&gt;&lt;li&gt;User writes their derivation into the PDG referencing existing symbols, existing expressions, and existing inference rules.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;If the relevant symbol isn't available, add it.&lt;/li&gt;&lt;li&gt;If an existing symbol needs to be corrected/revised/merged, modify it.&lt;/li&gt;&lt;li&gt;If the relevant inference rule isn't available, add it.&lt;/li&gt;&lt;li&gt;If an existing inference rule&amp;nbsp;needs to be corrected/revised/merged, modify it.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Integrated derivation steps are checked for correctness using a &lt;a href="https://en.wikipedia.org/wiki/Computer_algebra_system"&gt;Computer Algebra System&lt;/a&gt;&amp;nbsp;(e.g., &lt;a href="https://en.wikipedia.org/wiki/SymPy"&gt;SymPy&lt;/a&gt;, Mathematica, etc)&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;That user story sounds reasonable until you consider two concurrent users editing the same steps or expressions or symbols or inference rules or operators. If each of the above steps are considered atomic, there are potential conflicts.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;One user could be attempting to create a new derivation step while another modifies existing symbols or inference rules.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Two users could concurrently attempt to modify/merge/edit existing symbols or inference rules. When they commit their change, the thing they are changing may have disappeared or been altered.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;One way to avoid the above potential for conflict would be to lock the database while edits are made (no concurrent users). &lt;br /&gt;Another avoidance mechanism would be to queue changes and check consistency of every change sequentially (serialize concurrency).&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-10-09T14:05:51.480Z</blogger:created>
    <published>2022-10-09T14:30:00.002Z</published>
    <updated>2022-10-09T14:30:33.486Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/10/relevance-of-tla-to-physics-derivation.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4633353721169748018</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>progression of the interface used in the Physics Derivation Graph</title>
    <content type='html'>Initially, content in the&amp;nbsp;Physics Derivation Graph was manually entered into text files (e.g., CSV, XML). Presentation was Graphviz only.&lt;br /&gt;
&lt;br /&gt;
Then the process was automated through use of a command line interface. Instead of the user generating numeric indices, IDs were created by the application. The user was able to specify a local ID in order to avoid retyping Latex for existing expressions. Presentation was Graphviz only.&lt;br /&gt;
&lt;br /&gt;
The latest interface is browser-based, running in a Docker container either locally or on a website (derivationmap.net). The user is presented with forms and types in Latex. Some symbols are recognized automatically by the application. Presentation of the graph uses both Graphviz and d3js. The d3js graph has hyperlinked nodes.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
I see two potential ways to iterate:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;interactive graph. More intuitive to type text and connect nodes; no dependence on the user interacting with numeric IDs&lt;/li&gt;
&lt;li&gt;linear input based on article structure with text, pictures, and expressions. The "form" would be more dynamic, like a Mathematica notebook entry or like Overleaf + inference rules and validation.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Both of these approaches are more intuitive for users.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
I also considered writing a Latex package that specifies the inference rules as macros. However, that lacks the ability to check the math.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-28T02:27:14.555Z</blogger:created>
    <published>2020-05-28T02:35:00.003Z</published>
    <updated>2020-05-28T02:36:39.066Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/progression-of-interface-used-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4651558662693596618</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Node.js testing input</title>
    <content type='html'>https://glebbahmutov.com/blog/unit-testing-cli-programs/</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-08T14:30:48.732Z</blogger:created>
    <published>2018-07-08T14:30:00.001Z</published>
    <updated>2018-07-08T14:30:48.893Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4652776242390994168</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>documenting my frequent pivots</title>
    <content type='html'>&lt;ul style="text-align: left;"&gt;
  &lt;li&gt;survey all topics in Physics. [See &lt;a href="https://physicsderivationgraph.blogspot.com/2017/07/finding-edges-for-physics-derivation.html"&gt;this 2017-07 post&lt;/a&gt;.]
  &lt;/li&gt;&lt;li&gt;investigate refactoring the database from JSON to RDF. [See &lt;a href="https://physicsderivationgraph.blogspot.com/2020/12/identifying-classes-in-physics.html"&gt;this 2020-12 post&lt;/a&gt;.]&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;goal&lt;/i&gt;: add a new derivation to the &lt;a href="https://derivationmap.net/"&gt;Physics Derivation Graph&lt;/a&gt; to identify bugs and inefficiencies in the workflow&lt;/li&gt;
  &lt;li&gt;instead of entering a new derivation, new goal is to create tutorials for an existing derivation. [See &lt;a href="https://physicsderivationgraph.blogspot.com/2021/08/steps-to-convert-published-scientific.html"&gt;this 2021-08 post&lt;/a&gt;.]&lt;/li&gt;
  &lt;li&gt;before creating tutorials, write a "gold standard" for one derivation (then create tutorials). [See &lt;a href="https://physicsderivationgraph.blogspot.com/2021/07/roadmap-for-identifying-mathematical.html"&gt;this 2021-07 post&lt;/a&gt;&amp;nbsp;and &lt;a href="https://derivationmap.net/roadmap/overview"&gt;this page&lt;/a&gt;.]&lt;/li&gt;
  &lt;li&gt;instead of fixating on a "gold standard," refocus on the original intent of the project: connecting expressions from the breadth of Physics. [See &lt;a href="https://physicsderivationgraph.blogspot.com/2021/08/refocusing-motivation-for-physics.html"&gt;this 2021-08 post&lt;/a&gt;&amp;nbsp;and &lt;a href="https://derivationmap.net/central_expressions"&gt;this page&lt;/a&gt;.]&lt;/li&gt;
&lt;/ul&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-21T18:08:53.227Z</blogger:created>
    <published>2021-08-21T18:22:00.001Z</published>
    <updated>2021-08-28T22:57:12.117Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/08/documenting-my-frequent-pivots.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4709544840221144934</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>relevant posts on reddit</title>
    <content type='html'>Open:&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://old.reddit.com/r/Physics/comments/8vurwq/derivation_for_dummies_a_quick_guide_to_one_of/"&gt;https://old.reddit.com/r/Physics/comments/8vurwq/derivation_for_dummies_a_quick_guide_to_one_of/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Closed:&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://old.reddit.com/r/Physics/comments/725dz1/keeping_track_of_derivations/"&gt;https://old.reddit.com/r/Physics/comments/725dz1/keeping_track_of_derivations/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://old.reddit.com/r/Physics/comments/1v0wap/derivations_of_equations/"&gt;https://old.reddit.com/r/Physics/comments/1v0wap/derivations_of_equations/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://old.reddit.com/r/Physics/comments/1c7uas/derivation_of_the_schrodinger_equation_in_under/"&gt;https://old.reddit.com/r/Physics/comments/1c7uas/derivation_of_the_schrodinger_equation_in_under/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://old.reddit.com/r/Physics/comments/7y9gkz/are_derivations_worth_it/"&gt;https://old.reddit.com/r/Physics/comments/7y9gkz/are_derivations_worth_it/&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-20T02:09:40.523Z</blogger:created>
    <published>2018-07-20T02:27:00Z</published>
    <updated>2018-07-20T02:27:07.442Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/relevant-posts-on-reddit.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4733351601035567204</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>I want to be able to do Math with Latex as Input</title>
    <content type='html'>Now that I'm using &lt;a href="http://equationmap.com/"&gt;EquationMap&lt;/a&gt; for Latex input, the interface problem is effectively solved. Prior to that I developed the d3js-based web browser visualization of the Physics Derivation Graph. The remaining tasks are content entry and checking the graph using a &lt;a href="https://en.wikipedia.org/wiki/Computer_algebra_system"&gt;Computer Algebra System (CAS)&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
The goal would be to enter a derivation (ie the quadratic equation) in Latex via EquationMap.com, then have Sage check the resulting graph for correctness.&lt;br /&gt;
&lt;br /&gt;
Although I could do the content entry, I felt there wasn't a point to entering content in a format that isn't amenable to checking with a CAS. Ideally, I want a format that is easy to enter manually, and universally exportable (ie to Maple, Mathematica, Sage, SymPy).&lt;br /&gt;
&lt;br /&gt;
I stumbled upon "&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.198.8849&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;Extracting Mathematical Semantics from LATEX Documents&lt;/a&gt;" which converts LaTeX math into &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Trees&lt;/a&gt; as the universal structure.&lt;br /&gt;
&lt;br /&gt;
The idea of using Latex as the method of entry for mathematical calculations is a common objective, though no one has solved it.&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;There's a project called &lt;a href="http://mathlex.org/doc/how-mathlex-works"&gt;MathLex&lt;/a&gt; which converts Latex-like syntax into an AST, which can then be translated to Latex and Sage; &lt;a href="http://ugrthesis.mathlex.org/bundles/mathlexmain/thesis.pdf"&gt;thesis here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4818133/latex-math-parsing-for-c-c"&gt;http://stackoverflow.com/questions/4818133/latex-math-parsing-for-c-c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tex.stackexchange.com/questions/4223/what-parsers-for-latex-mathematics-exist-outside-of-the-tex-engines"&gt;http://tex.stackexchange.com/questions/4223/what-parsers-for-latex-mathematics-exist-outside-of-the-tex-engines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mathjax.org/"&gt;MathJax&lt;/a&gt; supports Latex to MathML&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hermes.roua.org/"&gt;Hermes&lt;/a&gt; supports Latex to Presentation MathML&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-12-25T15:48:19.133Z</blogger:created>
    <published>2015-12-25T16:52:00Z</published>
    <updated>2015-12-25T22:59:08.770Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/12/i-want-to-be-able-to-do-math-with-latex.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4740325369142236640</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>why implementing a single feature took 12 hours</title>
    <content type='html'>Yesterday I started investigating how to get &lt;a href="https://d3js.org/"&gt;d3.js&lt;/a&gt; working for the Physics Derivation Graph.&amp;nbsp; I already had an implementation working on the live website, so I didn't expect the update to take too much effort or time.&lt;br /&gt;
&lt;br /&gt;
Below is the sequence of challenges I encountered for this feature update.&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;I learned that I had used v3; the current version is v5&lt;/li&gt;
&lt;li&gt;v5 doesn't support the .force() used in v3&lt;/li&gt;
&lt;li&gt;I found a v5-based force directed graph on&amp;nbsp;&lt;a href="https://observablehq.com/@d3/force-directed-graph"&gt;https://observablehq.com/@d3/force-directed-graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Although I was able to get the code running locally, I found the files seemed to depend on remote resources.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;I found a better instance that was pure d3.v5.js instead of relying on observable code:&amp;nbsp;&lt;a href="https://bl.ocks.org/mapio/53fed7d84cd1812d6a6639ed7aa83868"&gt;https://bl.ocks.org/mapio/53fed7d84cd1812d6a6639ed7aa83868&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Figured out how to get images associated with nodes&lt;/li&gt;
&lt;li&gt;The JSON file needs images to have distinct and consistent names&lt;/li&gt;
&lt;li&gt;Instead of temporary image file names, use expr_global_id and expr_name&lt;/li&gt;
&lt;li&gt;The functions using "return False, error_message" meant the errors didn't propagate to the web interface. The "right" method is to use "raise Exception"&amp;nbsp;&lt;/li&gt;
&lt;li&gt;With exceptions raised in compute, needed to add "try/except" in controller.py&lt;/li&gt;
&lt;li&gt;With Exceptions caught in controller.py, use flash() to tell the user there was a problem&lt;/li&gt;
&lt;li&gt;With Exceptions now sent to user via web interface, I learned that the PNG wasn't being created due to a missing command, "braket"&lt;/li&gt;
&lt;li&gt;I found that "braket" is a latex package available from CTAN&lt;/li&gt;
&lt;li&gt;I tried to install "braket" using "tlmgr install"; see&amp;nbsp;&lt;a href="https://tex.stackexchange.com/questions/73016/how-do-i-install-an-individual-package-on-a-linux-system"&gt;https://tex.stackexchange.com/questions/73016/how-do-i-install-an-individual-package-on-a-linux-system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I wasn't able to run "tlmgr" in Docker due to not having wget&lt;/li&gt;
&lt;li&gt;I wasn't able to install wget in Docker using "apt-get install -y wget", possible due to using phusion as a base image?&lt;/li&gt;
&lt;li&gt;Looked up instructions on installing packages manually; opened&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/82"&gt;https://github.com/allofphysicsgraph/proofofconcept/issues/82&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In the process of debugging the PDF generation (notice that I strayed from the d3js effort), realized the migration of inference rules was incomplete -- new style is to have words separated by spaces in create_tmp_db.py&lt;/li&gt;
&lt;li&gt;Added an exception in compute.py to identify inconsistent inference rule names&lt;/li&gt;
&lt;li&gt;Manually fixed inference rule entries in create_tmp_db.py&lt;/li&gt;
&lt;li&gt;Altered the inference rule schema in compute.py -- use feeds+inputs+outputs&lt;/li&gt;
&lt;li&gt;Manually updated inference rules in create_tmp_db.py to reflect revised schema&lt;/li&gt;
&lt;li&gt;Compiling derivation PDF failed due to incorrect implementation of inference rule&lt;/li&gt;
&lt;li&gt;Realized that the "braket" issue wasn't a missing package, it was custom macros defined in an old version of the PDG&lt;/li&gt;
&lt;li&gt;Wrote function to generate JSON needed for d3js&lt;/li&gt;
&lt;li&gt;In the process of iterating that, added page latency measurement&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
Lessons learned:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;In the process of implementing a new feature or updating a feature, I uncovered a few bugs and a lot of technical debt that lead to the implementation taking longer than expected&lt;/li&gt;
&lt;li&gt;Some of the bugs were easy to fix (aka buy down the tech debt) as I discovered them, while others were sufficiently worthy of a new ticket.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Some bugs were blockers -- I couldn't proceed with the desired work until I resolved architecture flaws; other issues were tangential and could be delayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-05T02:23:44.776Z</blogger:created>
    <published>2020-04-05T02:49:00.001Z</published>
    <updated>2020-04-05T02:50:14.517Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/why-implementing-single-feature-took-12.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4783696578228461882</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Notes from CICM 2020 - 13th Conference on Intelligent Computer Mathematics</title>
    <content type='html'>&lt;a href="https://cicm-conference.org/2020/cicm.php"&gt;https://cicm-conference.org/2020/cicm.php&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
The schedule is &lt;a href="https://easychair.org/smart-program/CICM-13/"&gt;https://easychair.org/smart-program/CICM-13/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
The list below is incomplete since I didn't attend every presentation.&lt;br /&gt;
&lt;h2&gt;
Monday&lt;/h2&gt;
&lt;div&gt;
&lt;br /&gt;
Joe Wells: slides for this talk are on Ciarán's web page: &lt;a href="https://www.macs.hw.ac.uk/~cmd1/assets/talks/cicm-2020-talk.pdf"&gt;https://www.macs.hw.ac.uk/~cmd1/assets/talks/cicm-2020-talk.pdf&lt;/a&gt;&lt;br /&gt;
There is also a nearly-identical preprint on arxiv: &lt;a href="https://arxiv.org/pdf/2005.13954.pdf"&gt;https://arxiv.org/pdf/2005.13954.pdf&lt;/a&gt;&lt;br /&gt;
The machine-checked proofs that the axioms of zfp hold in the model we build for it can be found at: &lt;a href="https://www.macs.hw.ac.uk/~cmd1/cicm2020/ZFPDoc/ZFP.html"&gt;https://www.macs.hw.ac.uk/~cmd1/cicm2020/ZFPDoc/ZFP.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Hanna Lachnitt:&amp;nbsp;&lt;a href="https://youtu.be/nbwZ-521sMQ"&gt;https://youtu.be/nbwZ-521sMQ&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;
Tuesday&lt;/h2&gt;
&lt;h3&gt;
Survey of languages for formalizing math :: Cezary Kaliszyk&lt;/h3&gt;
&lt;br /&gt;
&lt;i&gt;Observation&lt;/i&gt;: The language of formal systems is not the way mathematicians actually communicate (in person verbally, in writing).&lt;br /&gt;
Computer Algebra Systems (CAS) and Proof Assistants are viewed as "code" separate from Natural Language.&lt;br /&gt;
&lt;br /&gt;
Natural Language Processing (NLP) of math does not recognize repeated use of the same notation, whereas humans recognize that as a convention.&lt;br /&gt;
&lt;br /&gt;
Aspects that distinguish formal from informal communication: types, inheritance, equality (isomorphism). Each of those aspects are typically implicit for human consumers.&lt;br /&gt;
The goal of formal specification is proof, whereas in informal communication the goal is to convince the reader. Those are distinct.&lt;br /&gt;
&lt;br /&gt;
Spectrum of math language formality:&lt;br /&gt;
&lt;table border="1"&gt;
   &lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;natural language&lt;/td&gt;
&lt;td&gt;presentation&lt;/td&gt;
&lt;td&gt;semantic&lt;/td&gt;
&lt;td&gt;controlled natural languages&lt;/td&gt;
&lt;td&gt;proof assistants&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;speaking&lt;/td&gt;
       &lt;td&gt;Latex&lt;/td&gt;
       &lt;td&gt;CAS&lt;/td&gt;
       &lt;td&gt;&lt;a href="http://nevidal.org/sad.en.html"&gt;&lt;span id="goog_24214623"&gt;&lt;/span&gt;ForTheL&lt;span id="goog_24214624"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
       &lt;td&gt;Coq&lt;/td&gt;
     &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;written text&lt;/td&gt;
       &lt;td&gt;presentation MathML&lt;/td&gt;
       &lt;td&gt;sTeX&lt;/td&gt;
       &lt;td&gt;Mizar&lt;/td&gt;
       &lt;td&gt;Lean&lt;/td&gt;
     &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
       &lt;td&gt;Isabelle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&amp;lt;-- more informal&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;more formal --&amp;gt;&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Observation&lt;/i&gt;: formal language can be more concise than Controlled Natural Language due to possibility of autocompletion in formal languages.

&lt;br /&gt;
&lt;br /&gt;
Cezary expects deep learning to be useful in translation from informal to formal languages, though the capability seems to vary.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Representing Structural Language features in formal meta languages :: Dennis Muller&lt;/h3&gt;
&lt;br /&gt;
MMT is defined in a 2013 Kohlhase paper "A scalable module system"&lt;br /&gt;
MMT is for math theories.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Formalization of Elementary Number Theory in Mizar :: Adam Naumowicz&lt;/h3&gt;
Mizar has 60,000 theorems and 12,000 definitions in 1300 files.&lt;br /&gt;
Mizar is based on set theory.&lt;br /&gt;
&lt;br /&gt;
The focus of this talk is the first 10 problems from the 1970 textbook by&amp;nbsp;Sierpinski.&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Question from audience&lt;/i&gt;: when will Mizar be open source?&lt;br /&gt;Adam has no problem with open sourcing Mizar.&lt;br /&gt;The specific barrier is not clear to me.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Interpreting Math texts in Naproche-SAD :: Peter Koepke&lt;/h3&gt;
Naproche = Natural Proof Checking&lt;br /&gt;
SAD = System of Automated Deduction&lt;br /&gt;
&lt;br /&gt;
The origin of Mizar is in a 1985 paper "Computer Aided Reasoning" by Blair and Trybulec&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Integrating ForTheL with Latex :: Adrian De Lon&lt;/h3&gt;
technique is to separate Latex text from math Latex and then develop separate grammars.&lt;br /&gt;
&lt;a href="https://github.com/adelon/nave"&gt;https://github.com/adelon/nave&lt;/a&gt;&amp;nbsp;- written in Haskell&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Guided tour of Formally verified constraint solvers :: Catherine Dubois&lt;/h3&gt;
bugs have been found in constraint programming&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-28T14:23:05.968Z</blogger:created>
    <published>2020-07-28T14:41:00Z</published>
    <updated>2020-07-28T15:00:00.661Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/notes-from-cicm-2020-13th-conference-on.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4824013316790516208</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Using OCaml to identify equivalent expressions</title>
    <content type='html'>OCaml: simplify expressions to basis for equivalence class&lt;br /&gt;
LaTeX --&amp;gt; OCaml AST, then compare against all other OCaml ASTs&lt;br /&gt;
&lt;br /&gt;
Scope is for +, -, * for integers&lt;br /&gt;
Next steps would be expand to real, then complex&lt;br /&gt;
&lt;br /&gt;
Use case: find other equivalent expressions&lt;br /&gt;
&lt;br /&gt;
Use case: validation&lt;br /&gt;
&lt;br /&gt;
This requires typed variables (eg int, real, constant, real, complex, matrix, vector&lt;br /&gt;
&lt;br /&gt;
Rules:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;addition rule of equality&lt;/li&gt;
&lt;li&gt;multiplication rule of equality&lt;/li&gt;
&lt;li&gt;substitution property of equality&lt;/li&gt;
&lt;li&gt;associative property&lt;/li&gt;
&lt;li&gt;commutative property&lt;/li&gt;
&lt;li&gt;transitive property&lt;/li&gt;
&lt;li&gt;symmetric property&lt;/li&gt;
&lt;li&gt;additive inverse property&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-31T02:19:30.482Z</blogger:created>
    <published>2019-12-31T02:19:00.002Z</published>
    <updated>2019-12-31T02:19:30.638Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/using-ocaml-to-identify-equivalent.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4871702908109505984</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>upgrading Ubuntu 18.04 to 20.04 on DigitalOcean VPS droplet</title>
    <content type='html'>&lt;p&gt;I've been running a DigitalOcean droplet for $5/month for the past 6 months. Because I was new and didn't know better, I selected the Ubuntu 18.04 droplet.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Now I want to update to Ubuntu 20.04 LTS.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-ubuntu-20-04-focal-fossa"&gt;The guide&lt;/a&gt; recommends starting with a fresh 20.04 image instead of upgrading.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The following is a record of the steps I took in this process.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Total duration: 2 hours. The process took longer than expected because I hadn't previously configured the website from a bare Ubuntu server. Also, I had made a few changes since the initial installation that weren't documented.&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Step 1: collect all data prior to turning off the server&lt;/h3&gt;&lt;p&gt;Used scp to copy data from the droplet to my mac&lt;/p&gt;&lt;p&gt;
  &lt;span style="font-family: courier;"&gt;
scp user@IP:/home/pdg/arxiv_rss/rss_filter_email.py .&lt;br /&gt;
scp user@IP:/home/pdg/arxiv_rss/.env .&lt;br /&gt;
scp user@IP:/home/pdg/videos/* .&lt;br /&gt;
scp user@IP:/home/pdg/.bash_history .&lt;br /&gt;
scp user@IP:/home/pdg/.bashrc .&lt;br /&gt;
scp user@IP:/home/pdg/.python_history .&lt;br /&gt;
scp user@IP:/home/pdg/.sqlite_history .&lt;br /&gt;
cd proofofconcept/v7_pickle_web_interface/&lt;br /&gt;
scp user@IP:/home/pdg/proofofconcept/v7_pickle_web_interface/.env .&lt;br /&gt;
scp user@IP:/home/pdg/proofofconcept/v7_pickle_web_interface/certs/* .&lt;br /&gt;
scp user@IP:/home/pdg/proofofconcept/v7_pickle_web_interface/flask/logs/* .&lt;br /&gt;
scp user@IP:/home/pdg/.ssh/authorized_keys .&lt;br /&gt;
    &lt;/span&gt;
&lt;/p&gt;&lt;p&gt;Grab the crontab entry&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;0 0 * * * /usr/bin/python3 /home/user/arxiv_rss/rss_filter_email.py &amp;gt;&amp;gt; /home/user/arxiv_rss/cron.log 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Step 2: power off the server and take a snapshot&lt;/h3&gt;&lt;p&gt;&lt;a href="https://www.digitalocean.com/docs/images/snapshots/how-to/snapshot-droplets/"&gt;https://www.digitalocean.com/docs/images/snapshots/how-to/snapshot-droplets/&lt;/a&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Step 3: Start a new droplet&lt;/h3&gt;&lt;div&gt;Selected Ubuntu 20.04&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Step 4: configure accounts and access&lt;/h3&gt;&lt;div&gt;see&amp;nbsp;&lt;a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04"&gt;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;adduser pdg&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;usermod -aG sudo pdg&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;ufw allow OpenSSH&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;ufw enable&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Instead of creating new SSH key pairs,&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04&lt;/a&gt;&lt;/div&gt;&lt;div&gt;I imported my authorized_keys file to /home/pdg/.ssh/&lt;/div&gt;&lt;div&gt;&lt;br /&gt;To get the authorized_keys file I temporarily allowed password-based authentication for scp using&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo vim /etc/ssh/sshd_config&lt;/span&gt;&lt;/div&gt;&lt;div&gt;change "PasswordAuthentication No" to "PasswordAuthentication Yes"&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo service ssh restart&lt;/span&gt;&lt;/div&gt;&lt;div&gt;While I was there, I also ran&lt;/div&gt;&lt;div&gt;change "PermitRootLogin yes" to "permitRootLogin no"&lt;/div&gt;&lt;div&gt;&lt;div&gt;Once I had transferred the authorized_keys file, I reverted to "PasswordAuthentication No" and ran&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo service ssh restart&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;See also&amp;nbsp;&lt;a href="https://www.thegeekstuff.com/2011/05/openssh-options/"&gt;https://www.thegeekstuff.com/2011/05/openssh-options/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo ufw allow 443&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo ufw allow 80&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Step 5: update OS&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo apt-get update&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo apt-get upgrade&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Step 6: install metrics&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.digitalocean.com/docs/monitoring/how-to/upgrade-legacy-agent/"&gt;https://www.digitalocean.com/docs/monitoring/how-to/upgrade-legacy-agent/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo apt-get purge do-agent&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;curl -sSL https://repos.insights.digitalocean.com/install.sh -o /tmp/install.sh&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo bash /tmp/install.sh&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;/opt/digitalocean/bin/do-agent --version&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Step 7: install Docker and Docker-Compose&lt;/h3&gt;&lt;div&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-20-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-20-04&lt;/a&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Step 8: certs&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;sudo apt install certbot python3-certbot-nginx&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div&gt;sudo certbot certonly --webroot \&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;-w /home/pdg/proofofconcept/v7_pickle_web_interface/certs \&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;--server https://acme-v02.api.letsencrypt.org/directory \&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;-d derivationmap.net -d www.derivationmap.net&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;span&gt;Your certificate and chain have been saved at:&lt;/span&gt;&lt;/div&gt;&amp;nbsp; &amp;nbsp;/etc/letsencrypt/live/derivationmap.net/fullchain.pem&amp;nbsp; &amp;nbsp;Your key file has been saved at:&amp;nbsp; &amp;nbsp;/etc/letsencrypt/live/derivationmap.net/privkey.pem&amp;nbsp; &amp;nbsp;Your cert will expire on 2021-01-09.&lt;br /&gt;&lt;div&gt;https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters&lt;/div&gt;&lt;span style="font-family: courier;"&gt;cd&amp;nbsp;/etc/ssl/certs&lt;/span&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;sudo openssl dhparam -out dhparam.pem 4096&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;cp dhparam.pem ~/proofofconcept/v7_pickle_web_interface/certs/&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Step 9: restore data from backup&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;git clone&amp;nbsp;https://github.com/allofphysicsgraph/proofofconcept.git&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;scp .env user@IP:/home/pdg/proofofconcept/v7_pickle_web_interface/&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;cd&amp;nbsp;proofofconcept/v7_pickle_web_interface/&lt;/span&gt;&lt;span style="font-family: courier;"&gt;flask&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;cp users_sqlite.db_TEMPLATE users_sqlite.db&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;cd ..&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;docker-compose up --build --remove-orphans --detach&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-10-11T19:41:13.208Z</blogger:created>
    <published>2020-10-11T22:19:00.005Z</published>
    <updated>2020-10-11T23:59:30.023Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='ubuntu'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='digitalocean'/>
    <blogger:filename>/2020/10/upgrading-ubuntu-1804-to-2004-on.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4887387030797511252</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>OpenModelica on Mac using Docker -- command line and GUI</title>
    <content type='html'>&lt;blockquote&gt;"Modelica is a non-proprietary, object-oriented, equation based language to conveniently model complex physical systems."&lt;/blockquote&gt;
&lt;p&gt;(&lt;a href="https://marcobonvini.com/modelica/2017/01/02/modelica-in-action.html"&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;"Modelica is the language for solving systems of ordinary differential, algebraic, continuous, and discrete equations."&lt;/blockquote&gt;
&lt;p&gt;(&lt;a href="https://www.reddit.com/r/Python/comments/dcj6fy/jmodelica_combining_the_power_of_python_and/"&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://modelica.org/tools.html"&gt;https://modelica.org/tools.html&lt;/a&gt;&lt;br /&gt;
  &lt;a href="https://openmodelica.org/"&gt;https://openmodelica.org/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href="https://github.com/OpenModelica/OpenModelica"&gt;https://github.com/OpenModelica/OpenModelica&lt;/a&gt;

&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Running &lt;a href="https://en.wikipedia.org/wiki/Modelica"&gt;Modelica&lt;/a&gt; using Docker&lt;/h2&gt;&lt;p&gt;In a terminal on your Mac, run:
&lt;/p&gt;&lt;pre&gt;ip=$(ifconfig en0 | grep inet | awk '$1=="inet" {print $2}') 
Xhost +$ip 
docker run -it -v ~/.Xauthority:/root/.Xauthority -e DISPLAY=$ip:0  openmodelica/openmodelica:v1.20.0-gui /bin/bash
&lt;/pre&gt;
Source: &lt;a href="https://openmodelica.org/forum/default-topic/3490-docker-instructions-for-mac"&gt;Docker instructions&lt;/a&gt;, which also had the commands for linux:
&lt;pre&gt;docker run -it --rm -e "HOME=$HOME" -e "DISPLAY=$DISPLAY" --network=host --user "$UID" -v "$HOME:$HOME" -v "$PWD:$PWD" -w "$PWD" openmodelica/openmodelica:v1.20.0-gui
&lt;/pre&gt;

From &lt;a href="https://openmodelica.org/useresresources/userdocumentation/"&gt;https://openmodelica.org/useresresources/userdocumentation/&lt;/a&gt; see
&lt;a href="https://openmodelica.org/doc/OpenModelicaUsersGuide/OpenModelicaUsersGuide-latest.pdf"&gt;https://openmodelica.org/doc/OpenModelicaUsersGuide/OpenModelicaUsersGuide-latest.pdf&lt;/a&gt;


After launching the Docker container, in the command prompt I ran
&lt;pre&gt;root@54d835361dc8:/# OMShell-terminal
OMShell Copyright 1997-2022, Open Source Modelica Consortium (OSMC)
Distributed under OMSC-PL and GPL, see www.openmodelica.org

To get help on using OMShell and OpenModelica, type "help()" and press enter
Set shortOutput flag: true

&amp;gt;&amp;gt;&amp;gt; x := 1:12
{1,2,3,4,5,6,7,8,9,10,11,12}

&amp;gt;&amp;gt;&amp;gt; quit()
&lt;/pre&gt;

I launched the GUI using
&lt;pre&gt;# OMEdit 
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'
libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast
&lt;/pre&gt;

&lt;p&gt;
  On Mac using XQuartz I see&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiiA29nhg6SoKNKurpD9FJry1EgaIQ6ZYWLivx0n_BvZ1z2ZKKkkZIv1gMpyRXwDpZwwbhoMvDoTkZ_nYMHllf8hcSAIsJ9VgOwTqYjG1QnpZfRZWDLIbgZMjrUFJn0onx4JEU3_7s4sGo37GZYyrIzmR_ioNl3i6090uN2Qy1Sv7F701h_TKNLQDtduA/s1351/Screen%20Shot%202023-03-26%20at%206.14.13%20PM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="766" data-original-width="1351" height="362" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiiA29nhg6SoKNKurpD9FJry1EgaIQ6ZYWLivx0n_BvZ1z2ZKKkkZIv1gMpyRXwDpZwwbhoMvDoTkZ_nYMHllf8hcSAIsJ9VgOwTqYjG1QnpZfRZWDLIbgZMjrUFJn0onx4JEU3_7s4sGo37GZYyrIzmR_ioNl3i6090uN2Qy1Sv7F701h_TKNLQDtduA/w640-h362/Screen%20Shot%202023-03-26%20at%206.14.13%20PM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;

&lt;p&gt;Questions:
&lt;a href="https://stackoverflow.com/questions/tagged/openmodelica"&gt;https://stackoverflow.com/questions/tagged/openmodelica&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Comment threads:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=16013179"&gt;https://news.ycombinator.com/item?id=16013179&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=23690788"&gt;https://news.ycombinator.com/item?id=23690788&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-03-26T22:05:12.274Z</blogger:created>
    <published>2023-03-26T22:15:00.008Z</published>
    <updated>2023-03-26T23:01:47.036Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='modelica'/>
    <blogger:filename>/2023/03/openmodelica-on-mac-using-docker.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4951032869667945367</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>steps I took to add a picture to the website frontpage</title>
    <content type='html'>&lt;p&gt;The current iteration of&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;&amp;nbsp;uses data from a JSON file to dynamically generate page content.&amp;nbsp;&lt;/p&gt;&lt;p&gt;On the front page of&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt; there's currently an SVG. I wanted to place a PNG next to the SVG. Before placing the PNG, I wanted to make the SVG narrower. Looking at the source code for the page index.html, I see&lt;/p&gt;

&lt;pre&gt;&amp;lt;svg id='viz'&amp;gt;&amp;lt;/svg&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Inspecting the source code of the rendered page, I see&lt;/p&gt;

&lt;pre&gt;var width = 600;&lt;/pre&gt;

&lt;p&gt;which comes from&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v7_pickle_web_interface/flask/templates/_d3_js.html#L29"&gt;https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v7_pickle_web_interface/flask/templates/_d3_js.html#L29&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To test out a change to a narrower width, I start "Docker desktop" on my Mac and, in the directory &lt;code&gt;allofphysicsgraph/proofofconcept/v7_pickle_web_interface&lt;/code&gt;, run the command&lt;/p&gt;

&lt;pre&gt;docker-compose up --build --remove-orphans
&lt;/pre&gt;

&lt;p&gt;In a web browser I was then able to access &lt;a href="http://localhost:80"&gt;http://localhost:80&lt;/a&gt;&amp;nbsp;and got a warning from Chrome that the certs were invalid. Incognito mode seemed to be working better.&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-11-20T18:27:34.152Z</blogger:created>
    <published>2022-11-20T18:58:00.004Z</published>
    <updated>2022-11-20T18:58:42.621Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/11/steps-i-took-to-add-picture-to-website.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4962152497686975636</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Omniscient project management </title>
    <content type='html'>&lt;p&gt;The Physics Derivation Graph relies on a diverse set of skills. To speed up the development process we could identify separable tasks and then spread the tasks among a team of contributors. Collaboration requires coordination, and that coordination can be top-down or organic or a mixture.&lt;/p&gt;

&lt;p&gt;This post focuses on the top-down approach and assumes an omniscient view.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;A standard data structure in project management is the Gantt chart. A Gantt chart uses information about tasks, task dependencies, task durations, and dates to create a visualization associated with a project.&lt;/p&gt;

&lt;table border="1"&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;task ID&lt;/th&gt;
    &lt;th&gt;task description&lt;/th&gt;
    &lt;th&gt;task duration [days]&lt;/th&gt;
    &lt;th&gt;depends on tasks&lt;/th&gt;
    &lt;th&gt;earliest start date&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;14235&lt;/td&gt;
    &lt;td&gt;something useful&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;N/A&lt;/td&gt;
    &lt;td&gt;2022-03-01&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;25532&lt;/td&gt;
    &lt;td&gt;hard work&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;[14235]&lt;/td&gt;
    &lt;td&gt;N/A&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3456252&lt;/td&gt;
    &lt;td&gt;keeping busy&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;[25532]&lt;/td&gt;
    &lt;td&gt;N/A&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;That table can be visualized with tasks versus time:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCzSXPGe-LjtBkjyfPX-8VWh8pepZbsKXuz1bge4PNCyJo5DVFDynBQsV7RXDO3BBiHbxSTL39p6ZhdvhI7MfRTI-2WbsJKUyDFuCUmOzwFN89zbl1vGn_TJDkSAEQK_Qgj_wT6qq1sUj2KOJdke-JaJes_mjoQgnuWJsY4sz5FvmQtoj49MhW6TXXng/s499/Screen%20Shot%202023-05-01%20at%209.47.26%20PM.png" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="345" data-original-width="499" height="442" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCzSXPGe-LjtBkjyfPX-8VWh8pepZbsKXuz1bge4PNCyJo5DVFDynBQsV7RXDO3BBiHbxSTL39p6ZhdvhI7MfRTI-2WbsJKUyDFuCUmOzwFN89zbl1vGn_TJDkSAEQK_Qgj_wT6qq1sUj2KOJdke-JaJes_mjoQgnuWJsY4sz5FvmQtoj49MhW6TXXng/w640-h442/Screen%20Shot%202023-05-01%20at%209.47.26%20PM.png" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Visualization of a Gantt chart. Four tasks. Task 2 and 3 depend on task 1 being completed. Task 4 depends on task 2 being completed.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&amp;nbsp;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;That data structure doesn't account for staffing, skills, equipment, or budget. The&amp;nbsp; Gantt chart doesn't account for uncertainty of task duration, nor alternative paths.&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;Gantt charts present a single path&lt;/h2&gt;&lt;p&gt;Project management involves contingency planning.&amp;nbsp;&amp;nbsp;&lt;/p&gt;

&lt;pre&gt;IF this THEN
   that 
ELSE
   other&lt;/pre&gt;

&lt;p&gt;Every conditional statement is a branching of possible paths, each a separate Gantt chart.&lt;/p&gt;

&lt;p&gt;A single Gantt chart is a snapshot of a single path.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 style="text-align: left;"&gt;Staffing, budget, equipment, skills, uncertainty&lt;/h2&gt;&lt;div&gt;Augmenting the basic Gantt chart means extending the table data structure to something like&lt;/div&gt;

&lt;table border="1"&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;task ID&lt;/th&gt;
    &lt;th&gt;task description&lt;/th&gt;
    &lt;th&gt;task duration [days]&lt;/th&gt;
    &lt;th&gt;depends on tasks&lt;/th&gt;
    &lt;th&gt;earliest start date&lt;/th&gt;
    &lt;th&gt;depends on equipment&lt;/th&gt;
    &lt;th&gt;minimum skill set and level&lt;/th&gt;
    &lt;th&gt;uncertainty in duration [days]&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;14235&lt;/td&gt;
    &lt;td&gt;something useful&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;N/A&lt;/td&gt;
    &lt;td&gt;2022-03-01&lt;/td&gt;
    &lt;td&gt;[Photoshop]&lt;/td&gt;
    &lt;td&gt;photo editing, intermediate&lt;/td&gt;
    &lt;td&gt;+/-1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;25532&lt;/td&gt;
    &lt;td&gt;hard work&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;[14235]&lt;/td&gt;
    &lt;td&gt;N/A&lt;/td&gt;
    &lt;td&gt;[Excel]&lt;/td&gt;
    &lt;td&gt;math, beginner; text editing, beginner&lt;/td&gt;
    &lt;td&gt;+2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3456252&lt;/td&gt;
    &lt;td&gt;keeping busy&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;[25532]&lt;/td&gt;
    &lt;td&gt;N/A&lt;/td&gt;
    &lt;td&gt;Chrome browser&lt;/td&gt;
    &lt;td&gt;clicking on links, beginner&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;That information needs to be augmented with a cost table for equipment:&lt;/p&gt;

&lt;table border="1"&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;equipment&lt;/th&gt;
    &lt;th&gt;cost per day [USD]&lt;/th&gt;
    &lt;th&gt;acquisition cost [USD]&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Photoshop&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;100&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Excel&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;20&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Chrome browser&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Lastly, we need people who can do the tasks.&lt;/p&gt;
&lt;table border="1"&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;person name&lt;/th&gt;
    &lt;th&gt;hourly cost [USD]&lt;/th&gt;
    &lt;th&gt;skill and level&lt;/th&gt;
    &lt;th&gt;dates available&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Alice&lt;/td&gt;
    &lt;td&gt;20&lt;/td&gt;
    &lt;td&gt;Excel, beginner; text editing, intermediate&lt;/td&gt;
    &lt;td&gt;[2022-01-02, 2022-01-03, 2022-01-04]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Bob&lt;/td&gt;
    &lt;td&gt;15&lt;/td&gt;
    &lt;td&gt;Excel, intermediate; Math, beginner&lt;/td&gt;
    &lt;td&gt;[2022-02-01, 2022-02-15, 2022-02-24]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Charlie&lt;/td&gt;
    &lt;td&gt;24&lt;/td&gt;
    &lt;td&gt;photo editing, beginner&lt;/td&gt;
    &lt;td&gt;[2022-01-12, 2022-01-23, 2022-01-24]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;i&gt;Caveat&lt;/i&gt;: the above model is focused exclusively on experts doing tasks using equipment. The model does not account for managers, nor does the model account for support staff. The model could include any scope of tasks, but a boundary needs to be drawn somewhere to avoid becoming &lt;a href="https://en.wikipedia.org/wiki/Psychohistory_(fictional)"&gt;Seldon's psychohistory&lt;/a&gt;. The problem of tasks existing outside the model is the risk that out-of-model tasks block project progress or alter the project cost. Anything outside the model could be an invisible dependency.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Derived project views&lt;/h2&gt;&lt;div&gt;The following views can be derived from the three tables above:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;standard task Gantt chart&lt;/li&gt;&lt;li&gt;project duration histogram. (Each "task duration" has an uncertainty that can be aggregated and results in variance.)&lt;/li&gt;&lt;li&gt;per-person activity schedule -- who works on what when. A prioritization based on task dependencies and when people with skills are available&lt;/li&gt;&lt;li&gt;cost per day -- the spend rate&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Blockers inhibiting the omniscient project management view&lt;br /&gt;&lt;/h2&gt;&lt;p style="text-align: left;"&gt;Even though the issue can be formulated into a set of data structures&lt;/p&gt;&lt;p style="text-align: left;"&gt;Blockers are the amount of time needed to&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;gather the relevant information and keep the information up-to-date as the situation evolves&lt;/li&gt;&lt;li&gt;document the information and tune the model&lt;/li&gt;&lt;li&gt;survey the skills of the workforce&lt;/li&gt;&lt;li&gt;have the workforce track their time spent on a&amp;nbsp;task&lt;/li&gt;&lt;li&gt;define each task, along with a "definition of done"&lt;/li&gt;&lt;li&gt;track costs of the workforce and equipment&lt;/li&gt;&lt;li&gt;identifying conditional paths and tracking which alternative was selected&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Blockers that aren't time-based:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;inability to break project into atomic tasks (where "atomic" is based on skill set and skill level)&lt;/li&gt;&lt;li&gt;can break project into tasks, but unable to identify relevant skills for task&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The centralization of this model is merely to construct a narrative. Software like Atlassian's Jira is a way of distributing the task tracking rather than try to administer the project in a centralized top-down approach.&lt;/div&gt;&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The top-down omniscient view of project management is an unrealistic fantasy. However, it might be a helpful artifact for negotiation among decision makers. The alternative (where decision makers don't have a quantitative model to argue about) devolves into reliance on personal relationships, turf battles, and political factions. Bureaucratic processes evolve as a substitute for the lack of top-down omniscient view of project management.&amp;nbsp;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-04-30T14:18:19.562Z</blogger:created>
    <published>2023-05-02T02:56:00.001Z</published>
    <updated>2023-05-02T02:56:55.039Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2023/05/omniscient-project-management.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4967370428468531567</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Latex math expressions that case Sympy's Latex parser to fail</title>
    <content type='html'>&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ git clone https://github.com/allofphysicsgraph/proofofconcept.git&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ cd proofofconcept/v7_pickle_web_interface/flask&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ make dockerlive&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ python&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.__version__&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;'1.5.1'&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import json&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; with open('data.json') as json_file:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;...&amp;nbsp; &amp;nbsp; &amp;nbsp;dat = json.load(json_file)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; for expr_id, expr_dict in dat['expressions'].items():&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;...&amp;nbsp; &amp;nbsp; &amp;nbsp;print(expr_dict['latex'])&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; for expr_id, expr_dict in dat['expressions'].items():&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; try:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x = parse_latex(expr_dict['latex'])&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; except Exception as er:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print('expr ID =', expr_id)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print(er)&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Using that approach, I found the following problems in the current (valid) Latex expressions used in the Physics Derivation Graph.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
Subscripts with spaces&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 8871333437&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: Courier New, Courier, monospace;"&gt;PE_{\rm Earth\ surface}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 7053449926&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: Courier New, Courier, monospace;"&gt;r_{\rm geostationary\ orbit}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;
&lt;span style="font-family: inherit;"&gt;Use of "\left."&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 0439492440&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;\frac{1}{a^2} = \frac{1}{2}W - \frac{1}{2}\left. \frac{W}{2n\pi}\sin\left(\frac{2n\pi}{W} x\right) \right|_0^W&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;
&lt;span style="font-family: inherit;"&gt;Spaces in subscript&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 7575859306&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;\left( \delta^{l}_{\ \ j} \delta^{m}_{\ \ k} - \delta^{l}_{\ \ k} \delta^{m}_{\ \ h} \right) \hat{x}_i \nabla_j \nabla^m E^n = \vec{ \nabla}( \vec{ \nabla} \cdot \vec{E} - \nabla^2 \vec{E})&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 7575859308&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;\left( \delta^{l}_{\ \ j} \delta^{m}_{\ \ k} \hat{x}_i \nabla_j \nabla^m E^n\right)-\left( \delta^{l}_{\ \ k} \delta^{m}_{\ \ h} \hat{x}_i \nabla_j \nabla^m E^n \right)&amp;nbsp; = \vec{ \nabla}( \vec{ \nabla} \cdot \vec{E} - \nabla^2 \vec{E})&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;h2&gt;
&lt;span style="font-family: inherit;"&gt;Apostrophe&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 4662369843&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;x' = \gamma (x - v t)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 2983053062&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;x = \gamma (x' + v t')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 3426941928&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;x = \gamma ( \gamma (x - v t) + v t' )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;h2&gt;
&lt;span style="font-family: inherit;"&gt;Comma in subscript&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 9973952056&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I expected something else here&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;-g t = v_y - v_{0, y}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 7391837535&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I expected something else here&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;\cos(\theta) = \frac{v_{0, x}}{v_0}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 8949329361&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I expected something else here&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;v_0 \sin(\theta) = v_{0, y}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;h2&gt;
&lt;span style="font-family: inherit;"&gt;Spaces&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 3920616792&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;T_{\rm geostationary orbit} = 24\ {\rm hours}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;h2&gt;
&lt;span style="font-family: inherit;"&gt;Much greater than&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;expr ID = 9674924517&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;I don't understand this&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;K &amp;gt;&amp;gt; G&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;~~~^&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-12T17:36:43.363Z</blogger:created>
    <published>2020-08-12T17:41:00.001Z</published>
    <updated>2020-08-12T17:41:17.322Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/latex-math-expressions-that-case-sympys.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4969748516154211601</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>verifying dimensions, checking unit conversions, and using constants</title>
    <content type='html'>There are multiple checks that can be performed for a step.&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;apply inference rule to expressions, verify change to AST is correct&lt;/li&gt;
&lt;li&gt;verify that the dimensionality of variables is consistent&lt;/li&gt;
&lt;li&gt;if units are present, validate unit conversions and consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
The existence of the AST depends on having all symbols in the expression accounted for.&lt;/div&gt;
&lt;div&gt;
The ability to verify dimensions relies on having the AST.&lt;/div&gt;
&lt;div&gt;
The ability to check units requires dimension validation.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
My prioritization is to validate the scope of coverage. The claim of coverage means&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;all domains (e.g., electrodynamics, classical mechanics, quantum mechanics, thermodynamics)&lt;/li&gt;
&lt;li&gt;all symbols&amp;nbsp;&lt;/li&gt;
&lt;li&gt;all expressions (e.g., E=mc^2, F=ma, Schrodinger, Maxwell, wave equation)&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
Even though my prioritization is scope, it would be foolish to tackle scope and then later realize the PDG infrastructure does not handle checking inference rules, checking dimensionality, and checking units.&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Therefore, I should pause adding derivations and verify that, for a given derivation, I can check dimensionality and units.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-27T01:31:25.657Z</blogger:created>
    <published>2020-05-27T01:42:00.001Z</published>
    <updated>2020-05-30T20:47:35.395Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/verifying-dimensions-checking-unit.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-4977523673658152657</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>d3js for hire on freelancer</title>
    <content type='html'>I like d3js as a presentation method but don't have a lot of motive to learn javascript.

&lt;br /&gt;
There's a backlog of d3js tasks that are well defined: https://github.com/allofphysicsgraph/proofofconcept/issues?q=is%3Aissue+is%3Aopen+label%3Ad3js

&lt;br /&gt;
&lt;br /&gt;
I'm thinking about paying a developer (or multiple developers) to implement very specific features. I would provide a working example as a JSfiddle and then I would ask for a specific feature (like "prevent images from overlapping" or
"hyperlink images") with the solution being a modification to the JSfiddle with no dependencies other than d3js.

&lt;br /&gt;
&lt;br /&gt;
On the site Freelancer I posted $120 to my account (with a $3.06 charge). Then I had to verify the card.&lt;br /&gt;
&lt;a href="https://www.freelancer.com/projects/javascript/javascript-visualization-graph-hyperlink/proposals"&gt;https://www.freelancer.com/projects/javascript/javascript-visualization-graph-hyperlink/proposals&lt;/a&gt;&lt;br /&gt;
I quickly got a bid and awarded the $20 since the bidder provided a video showing they had a working solution. I inspected the result and it wasn't quite what I wanted -- they had hyperlinked the node circle rather than the node image. They made the change and I sent them the award.&lt;br /&gt;
Freelancer charged $3 for the transaction.&lt;br /&gt;
&lt;br /&gt;
Balance: $123.06 - ($3.06 loading fee to freelancer) - ($20 to bidder) - ($3 fee to freelancer) = $97</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-21T16:24:17.438Z</blogger:created>
    <published>2020-05-21T16:56:00Z</published>
    <updated>2020-05-27T01:30:39.233Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/d3js-for-hire.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5018254062461723381</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>derivations versus identities</title>
    <content type='html'>A derivation in physics is distinct from a mathematical identity</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-14T01:43:37.801Z</blogger:created>
    <published>2015-09-14T01:43:00.002Z</published>
    <updated>2015-09-14T01:43:37.816Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/derivations-versus-identities.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5030379529478346613</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>a terrible hack to get JSON into a database</title>
    <content type='html'>I've been using JSON to store Physics Derivation Graph content. The motive is that JSON is capable of storing data in a way that most closely reflects how I think of the data structure in Python (nested dictionaries and lists).&lt;br /&gt;
&lt;br /&gt;
To support multiple concurrent users, JSON doesn't work. The multiple users with concurrent writes would require locks to ensure changes are not lost.&lt;br /&gt;
Migrating from JSON to a table-based data structure (e.g., MySQL, PostGRESQL, SQLite) incurs a significant rewrite. Another option would be to use Redis, specifically the ReJSON plugin that alters the flat hashes in Redis to a nested structure closer to JSON.&lt;br /&gt;
&lt;br /&gt;
I'm wary of using a plugin for data storge, and I'm reluctant to rewrite the PDG as tables.&lt;br /&gt;
There is a terrible hack that allows me to stick with JSON while also resolving the concurrency issue that doesn't require a significant rewrite: I could serialize the JSON and store it in Redis as a very long string.&lt;br /&gt;
&lt;br /&gt;
Redis has a maximum string length of 512 MB (!) according to&lt;br /&gt;
&lt;a href="https://redis.io/topics/data-types"&gt;https://redis.io/topics/data-types&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
What I'm currently doing:&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import json&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; path_to_db = 'data.json'&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; with open(path_to_db) as json_file:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;dat = json.load(json_file)&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Terrible hack:&lt;br /&gt;
&lt;br /&gt;
Read the content as text, then save to redis&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; with open(path_to_db) as jfil:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; jcontent = jfil.read()&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; rd.set(name='data.json', value=jcontent)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;True&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
which can be simplified to&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; with open(path_to_db) as jfil:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; rd.set(name='data.json', value=jfil.read())&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Then, to read the file back in, use&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; file_content = rd.get('data.json')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; dat = json.loads(file_content)&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-08T19:28:22.593Z</blogger:created>
    <published>2020-04-08T19:38:00.002Z</published>
    <updated>2020-04-08T22:24:34.012Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='hack'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='JSON'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='storage'/>
    <blogger:filename>/2020/04/a-terrible-hack-to-get-json-into.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5041901209320655483</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>snapshot of milestones for the Physics Derivation Graph</title>
    <content type='html'>&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieDiKLSOxz-0eLN6bI65fYFFGitD18xeo_6ncJVgJ6vt-NerebKhqUBhY3zfzLsHFKqjchUip1ifLfiozzsjJBO6IKvL040ySnnU6eAOrXV3JdBXuwMaz2H_VqRBT4wHcufvITZQUEnH1x/s1600/Physics+Derivation+Graph+milestones+snapshot.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="575" data-original-width="827" height="444" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieDiKLSOxz-0eLN6bI65fYFFGitD18xeo_6ncJVgJ6vt-NerebKhqUBhY3zfzLsHFKqjchUip1ifLfiozzsjJBO6IKvL040ySnnU6eAOrXV3JdBXuwMaz2H_VqRBT4wHcufvITZQUEnH1x/s640/Physics+Derivation+Graph+milestones+snapshot.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
Each node is a milestone/task. The task points towards a follow-on task.&lt;br /&gt;
&lt;br /&gt;
There are two components; one of which is focused on Latex-based input and the other to do with syntactically-meaningful content.</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-08T01:05:30.733Z</blogger:created>
    <published>2018-07-08T01:11:00.001Z</published>
    <updated>2018-07-08T01:11:45.870Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/snapshot-of-milestones-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5046698236758799433</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>latex to sympy and sympy to latex</title>
    <content type='html'>&lt;br /&gt;
From Latex to Sympy:&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ &lt;b&gt;python&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Python 3.6.9 (default, Apr 18 2020, 01:56:04) &lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;[GCC 8.4.0] on linux&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;import sympy&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;from sympy.parsing.latex import parse_latex&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;sympy.srepr(parse_latex('\\frac{p}{\\hbar} = k'))&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;"Equality(Mul(Pow(Symbol('hbar'), Integer(-1)), Symbol('p')), Symbol('k'))"&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
A more complicated example&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;sympy.srepr(parse_latex('\\frac{\\partial}{\\partial t} \\psi( r,t)'))&lt;/b&gt;&lt;br /&gt;"Derivative(Function('psi')(Symbol('r'), Symbol('t')), Tuple(Symbol('t'), Integer(1)))"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;Check that Sympy-to-Latex produces the same:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;b style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;sympy.latex(sympy.Derivative(sympy.Function('psi')(sympy.Symbol('r'), sympy.Symbol('t')), sympy.Tuple(sympy.Symbol('t'), sympy.Integer(1))))&lt;/b&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;
'\\frac{\\partial}{\\partial t} \\psi{\\left(r,t \\right)}'&lt;/span&gt;&lt;br /&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-06-20T14:06:12.377Z</blogger:created>
    <published>2020-06-20T14:09:00.002Z</published>
    <updated>2020-06-20T14:09:38.990Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/06/latex-to-sympy-and-sympy-to-latex.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5048793787021560697</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>the role of a lexer and parser</title>
    <content type='html'>A lexer detects patterns in a sequence of characters (the input string). The patterns are specified as regex in a grammar file (e.g., ANTLR's .g4 file).&lt;br /&gt;
&lt;br /&gt;
The lexer produces a stream of tokens consumed by the parser.&lt;br /&gt;
&lt;br /&gt;
A parser assembles an AST&lt;br /&gt;
The nodes of the AST are tokens.&lt;br /&gt;
The parser then has a set of rules which are used to apply actions.&lt;br /&gt;
For example (in the context of the Physics Derivation Graph), the rules produce Sympy expressions.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
For the Physics Derivation Graph, the lexer will be consuming math latex.&lt;br /&gt;
&lt;br /&gt;
The math latex strings are expected to be agnostic to which Physics domain the .tex file is from.&lt;br /&gt;
In contrast, the parser rules may be domain-specific.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-06-07T02:04:58.847Z</blogger:created>
    <published>2020-06-07T02:12:00.001Z</published>
    <updated>2020-06-07T20:12:00.807Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/06/the-role-of-lexer-and-parser.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5085747974267335108</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>abstract syntax trees for expressions</title>
    <content type='html'>&lt;a href="https://tug.org/TUGboat/tb12-3-4/tb33arnon.pdf"&gt;https://tug.org/TUGboat/tb12-3-4/tb33arnon.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.5712&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.5712&amp;amp;rep=rep1&amp;amp;type=pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://pdfs.semanticscholar.org/7214/d4805660042521d4b825eb3324742b215072.pdf"&gt;https://pdfs.semanticscholar.org/7214/d4805660042521d4b825eb3324742b215072.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://mathlex.org/doc/how-mathlex-works"&gt;http://mathlex.org/doc/how-mathlex-works&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://calculem.us/abstract-binding-trees-1/"&gt;https://calculem.us/abstract-binding-trees-1/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://semantic-domain.blogspot.com/2015/03/abstract-binding-trees.html"&gt;https://semantic-domain.blogspot.com/2015/03/abstract-binding-trees.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://arxiv.org/abs/1601.06298"&gt;https://arxiv.org/abs/1601.06298&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2019-07-28T20:39:43.745Z</blogger:created>
    <published>2019-12-12T03:23:00Z</published>
    <updated>2019-12-12T03:23:54.282Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/abstract-syntax-trees-for-expressions.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5115771062312500292</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>assessment of current status of the Physics Derivation Graph and plans for what is next</title>
    <content type='html'>&lt;h3 style="text-align: left;"&gt;What has been done&lt;/h3&gt;
&lt;div&gt;
  &lt;ul style="text-align: left;"&gt;
    &lt;li&gt;developed content for multiple derivations that are linked&lt;/li&gt;
    &lt;li&gt;identified common symbols within and across derivations&lt;/li&gt;&lt;li&gt;created a data structure (currently JSON) for capturing all the content&lt;/li&gt;&lt;li&gt;created a website for displaying and interacting with content&lt;/li&gt;
    &lt;li&gt;validated steps within derivations using a computer algebra system (SymPy)&lt;/li&gt;&lt;li&gt;validated dimensions and units for expressions&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;br /&gt;&lt;/div&gt;
  &lt;h3 style="text-align: left;"&gt;Problems with the current approach&lt;/h3&gt;
&lt;div&gt;(1) In the process of showing that the math in a paper is correct, I decouple the math from the original paper. There is no connection between the equations in the text of a paper and the mathematical validation. As consequences,&lt;/div&gt;
  &lt;div&gt;
    &lt;ul style="text-align: left;"&gt;
      &lt;li&gt;errors could occur if there is inconsistency between the paper and the formalized derivation&lt;/li&gt;
      &lt;li&gt;reader needs to context switch between the paper and the formalized derivation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div&gt;(2) There is a second decoupling between the latex and the computer algebra system representation.&lt;/div&gt;
  &lt;div&gt;&lt;br /&gt;&lt;/div&gt;
  &lt;div&gt;(3) Not all steps needed for a formalized derivation are present in the text of a paper, so a way of including those is needed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;(4) Some expressions for a derivation are inline text rather than numbered expressions. It is possible to number and label inline equations; see &lt;a href="https://tex.stackexchange.com/questions/78579/labelled-in-line-equation"&gt;https://tex.stackexchange.com/questions/78579/labelled-in-line-equation&lt;/a&gt; and &lt;a href="https://latex.org/forum/viewtopic.php?t=11524"&gt;https://latex.org/forum/viewtopic.php?t=11524&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Defining a gold standard&lt;/h3&gt;&lt;div&gt;The unique value of the physics derivation graph is the mathematical correctness of statements made in a paper, and forcing the enumeration of assumptions and approximations. On a larger scale, papers could reference each other's equations, based on the assumption the variables are consistent.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A useful exercise is to imagine the ideal outcome.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;An appendix with CAS verified derivation&amp;nbsp;&lt;/li&gt;&lt;li&gt;Semantic tagging of text and derivation&amp;nbsp;&lt;/li&gt;&lt;li&gt;linking semantic tags with pre-existing databases.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;There is a version of owl for physics variables? QUDT&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-13T12:43:56.894Z</blogger:created>
    <published>2021-08-14T11:01:00.003Z</published>
    <updated>2021-08-14T11:01:26.645Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5151444482988777388</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>articles that claim to contain derivations but are inscrutable</title>
    <content type='html'>"Standard errors of the geometric and harmonic means and their application to index numbers" by Norris (1940)&lt;br /&gt;
&lt;a href="https://projecteuclid.org/download/pdf_1/euclid.aoms/1177731830"&gt;https://projecteuclid.org/download/pdf_1/euclid.aoms/1177731830&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-26T19:25:47.499Z</blogger:created>
    <published>2020-07-26T19:38:00.001Z</published>
    <updated>2020-07-26T19:38:26.559Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/articles-that-claim-to-contain.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5227990811585977853</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>HTML arxiv papers, semantic tagging, and formal verification</title>
    <content type='html'>&lt;p&gt;arxiv recently started experimenting with converting .tex files to HTML: &lt;a href="https://info.arxiv.org/about/accessible_HTML.html"&gt;https://info.arxiv.org/about/accessible_HTML.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first official announcement was in February 2022:
&lt;br /&gt;&lt;a href="https://blog.arxiv.org/2022/02/21/arxiv-articles-as-responsive-web-pages/"&gt;https://blog.arxiv.org/2022/02/21/arxiv-articles-as-responsive-web-pages/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The HTML from .tex effort is a collaboration between Deyan Ginev (a student of Dr. Kohlhase) and Bruce Miller (at NIST - &lt;a href="https://www.nist.gov/people/bruce-r-miller"&gt;https://www.nist.gov/people/bruce-r-miller&lt;/a&gt;). 
Kohlhase's group (&lt;a href="https://kwarc.info/research/"&gt;https://kwarc.info/research/&lt;/a&gt;) focuses on semantic enrichment of Latex. Bruce provided the software to convert Latex.

&lt;/p&gt;&lt;p&gt;The reason for this Latex to HTML conversion is because it's the first step for enabling semantic enrichment of content on the arxiv. There's immediate benefit for arxiv being able to support HTML, which I suspect is why arxiv cooperated with Kohlhase's group. 

&lt;/p&gt;&lt;p&gt;In the long term I see a need to connect semantic tagging (the focus of Kohlhase's group) with formal verification (e.g., derivations-as-proofs using Lean). The formally verified math expressions need to be tied to use in narrative text (e.g., arxiv papers).  For example, if I'm referring to "x" in a publication, is that the same "x" specified in a Lean-based proof? One way of answering is to use tags like
&lt;/p&gt;&lt;pre&gt;&amp;lt;unique_variable_id=42&amp;gt;x&amp;lt;/unique_variable_id&amp;gt;
 &lt;/pre&gt;
in the narrative text document, and then have Lean reference the ID 42 in derivations.
There are more conventional uses of tags like
  &lt;pre&gt;&amp;lt;properties name_of_variable="distance" dimension_of_variable="length"&amp;gt;x&amp;lt;/properties&amp;gt;
&lt;/pre&gt;
but those tags don't address the question of whether two variables refer to the same concept. 

&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I predict that the conversion of arxiv .tex files to HTML will enable semantic tagging. 
This will intersect with the challenge of "how do I relate the use of variables and expressions across multiple proofs in Lean?"&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-08-26T12:02:11.902Z</blogger:created>
    <published>2023-08-26T12:10:00.001Z</published>
    <updated>2023-08-26T12:10:13.432Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lean'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='prediction'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='arxiv'/>
    <blogger:filename>/2023/08/html-arxiv-papers-semantic-tagging-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5236818862464205071</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>comparison of Latex versus knowledge management efforts</title>
    <content type='html'>&lt;p&gt;In this post I assess why Latex is widely use and knowledge management efforts are not.&amp;nbsp;&lt;br /&gt;I'm using the spectrum documented in &lt;a href="https://physicsderivationgraph.blogspot.com/2021/08/spectrum-of-formalized-scientific.html"&gt;this previous post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Latex for typesetting scientific documents&lt;/h3&gt;&lt;p&gt;Latex was free, open source, well designed, solved a specific problem that had been unaddressed, the problem was felt by the content creators, is comprehensive, written by a single author, and the author was famous.&lt;/p&gt;&lt;p&gt;Now Latex has a user community, developers, libraries of software, reference books, support on multiple operating systems as well as the web.&lt;/p&gt;&lt;p&gt;Anything seeking to augment or displace Latex will need a value differentiation that is felt by content creators.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Semantic enrichment&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt; Start with Latex and manually annotate&lt;/li&gt;
&lt;li&gt; Start with Latex; use manually annotated corpus to train supervised machine learning model&lt;/li&gt;
  &lt;li&gt; Start with a custom domain specific language &lt;/li&gt;
  &lt;/ul&gt;
  
&lt;p&gt;Manual annotation or supervised machine learning may be incomplete if there are missing steps or assumptions.&lt;/p&gt;&lt;p&gt;"Better search" isn't a problem felt by content creators. This need is somewhat addressed by citations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I'm not aware of any models of success for semantic enrichment.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Controlled Natural Languages&lt;/h3&gt;&lt;div&gt;Not widely adopted: Mizar, ForTheL, Physics Derivation Graph&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I'm not aware of any models of success for CNLs.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Formal Verification&lt;/h3&gt;&lt;div&gt;Lean, Coq, Isabelle,&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Burdensome to learn and to use.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-02T01:23:36.968Z</blogger:created>
    <published>2021-08-08T15:26:00.002Z</published>
    <updated>2021-08-08T15:26:38.759Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/08/comparison-of-latex-versus-knowledge.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5274723136952713344</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>assumptions about formalizing Math or Physics based on a corpus like arxiv</title>
    <content type='html'>I'm still reeling from the disconnect between what was proposed in the QED manifesto in 1994 and the current state of formalization of Math (and Physics) research in 2020.&lt;br /&gt;
&lt;br /&gt;
In this post I'll write down what assumptions and what truths I understand about the problem in the context of papers posted to arXiv. In no particular order,&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;assumption&lt;/i&gt;: There is an intentional meaning for each symbol and each expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;truth&lt;/i&gt;: The meaning of each symbol and expression is not stated explicitly in writing.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;assumption&lt;/i&gt;: An article is self-consistent in terms of both jargon and math expressions&lt;/li&gt;
&lt;li&gt;&lt;i&gt;truth&lt;/i&gt;: The syntax used for jargon and math is not consistent across different papers.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;truth&lt;/i&gt;: There are conventions (often more than one) and which convention is being used is rarely stated explicitly.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;assumption&lt;/i&gt;: Content of a given paper has information contextualized by other references,&lt;/li&gt;
&lt;li&gt;&lt;i&gt;assumption&lt;/i&gt;: the context of information is only partially known to the author of a paper.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
The consequence of inconsistent use of conventions and use of implicit associations is that developing a grammar for parsing article text and math will necessarily yield incomplete and incorrect results.&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-29T17:29:42.328Z</blogger:created>
    <published>2020-07-29T18:41:00.001Z</published>
    <updated>2020-07-29T18:46:11.544Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/assumptions-about-formalizing-math-or.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5316854527534237739</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>vectors in SymPy and use of dot cross and the Laplacian</title>
    <content type='html'>&lt;p&gt;Converting "\vec{\psi}(r, t)" into SymPy is feasible&lt;br /&gt;&lt;span style="font-family: courier;"&gt;Function('vecpsi')(Symbol('r'), Symbol('t'))&lt;br /&gt;&lt;/span&gt;
  but I can't figure out how to apply the dot product with a vector:&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&lt;br /&gt;
  &amp;gt;&amp;gt;&amp;gt; from sympy import *&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.vector import CoordSys3D, Del, curl, divergence, gradient&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;Symbol('vecp').dot( Function('vecpsi')(Symbol('r'), Symbol('t')) )&lt;/b&gt;&lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;AttributeError: 'Symbol' object has no attribute 'dot'&lt;/span&gt;&lt;/p&gt;&lt;div&gt;The issue is that a vector needs to be specified in a specific dimension (e.g., 3) and have specific coefficients with respect to the basis.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;see &lt;a href="https://stackoverflow.com/a/45550053/1164295"&gt;https://stackoverflow.com/a/45550053/1164295&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;N = CoordSys3D('N')&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;v1 = Symbol('a')*N.i+Symbol('b')*N.j + Symbol('c')*N.k&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;v2 = Symbol('f')*N.i+Symbol('g')*N.j + Symbol('k')*N.k&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;v1.dot(v2)&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;a*f + b*g + c*k&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;v1.cross(v2)&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;(b*k - c*g)*N.i + (-a*k + c*f)*N.j + (a*g - b*f)*N.k&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;see&amp;nbsp;https://en.wikipedia.org/wiki/Del&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;delop = Del()&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;delop(Symbol('a'))&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;delop(v1)&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;(Derivative(a*N.i + b*N.j + c*N.k, N.x))*N.i + (Derivative(a*N.i + b*N.j + c*N.k, N.y))*N.j + (Derivative(a*N.i + b*N.j + c*N.k, N.z))*N.k&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;v1&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;a*N.i + b*N.j + c*N.k&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;curl(v1)&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;divergence(v1)&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;Laplacian(v1)&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;Laplacian(a*N.i + b*N.j + c*N.k)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Also, operators can't be defined since using Laplacian requires an argument:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;Laplacian()&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;Traceback (most recent call last):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;nbsp; File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;TypeError: __new__() missing 1 required positional argument: 'expr'&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-20T18:19:59.524Z</blogger:created>
    <published>2020-09-20T18:49:00.008Z</published>
    <updated>2022-03-04T20:43:25.464Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <blogger:filename>/2020/09/vectors-in-sympy-and-use-of-dot-cross.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5340034715744558843</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>unable to SSH into VPS after upgrade of Ubuntu from 20 to 22 LTS</title>
    <content type='html'>&lt;p&gt;Prior to upgrading from Ubuntu 20 to 22 LTS I was able to SSH from my local laptop to a remote VPS using the command&lt;/p&gt;
&lt;pre&gt;ssh -v username@IPaddress
&lt;/pre&gt;

&lt;p&gt;After the upgrade I got
&lt;/p&gt;&lt;pre&gt;ssh -v username@IPaddress
OpenSSH_9.7p1, LibreSSL 3.3.6
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 21: include /etc/ssh/ssh_config.d/* matched no files
debug1: /etc/ssh/ssh_config line 54: Applying options for *
debug1: Authenticator provider $SSH_SK_PROVIDER did not resolve; disabling
debug1: Connecting to IPaddress [IPaddress] port 22.
debug1: connect to address IPaddress port 22: Operation timed out
ssh: connect to host IPaddress port 22: Operation timed out&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;!--more--&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;Via the recovery console on the remote VPS I ran
&lt;/p&gt;&lt;pre&gt;sudo systemctl status ssh
&lt;/pre&gt;
and got 
&lt;pre&gt;Active: active (running)
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;
&lt;/p&gt;&lt;p&gt;Via the recovery console on the remote VPS I ran
&lt;/p&gt;&lt;pre&gt;sudo service ssh stop
sudo service ssh start
sudo service ssh restart
&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://askubuntu.com/questions/462968/take-changes-in-file-sshd-config-file-without-server-reboot"&gt;https://askubuntu.com/questions/462968/take-changes-in-file-sshd-config-file-without-server-reboot&lt;/a&gt;&amp;nbsp;
&lt;/p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;!--more--&gt;&lt;/span&gt;&lt;p&gt;On the remote VPS I reviewed the contents of &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I verified that SSH is exposed on port 22 using&lt;/p&gt;
&lt;pre&gt;sudo lsof -Pi | grep ssh&lt;/pre&gt;

&lt;p&gt;On the VPS I monitored
&lt;/p&gt;&lt;pre&gt;sudo tail -f /var/log/auth.log&lt;/pre&gt;
and concurrent attempted to log in from my local laptop
&lt;pre&gt;ssh -v username@IPaddress
&lt;/pre&gt;
Since no entries were showing up in auth.log, maybe there's a firewall configured?

&lt;p&gt;Yes, firewall exists; see &lt;a href="https://physicsderivationgraph.blogspot.com/2020/09/ufw-allow-status-numbered-delete.html"&gt;https://physicsderivationgraph.blogspot.com/2020/09/ufw-allow-status-numbered-delete.html  
&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;$ sudo ufw status verbose
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), deny (routed)
New profiles: skip
&lt;/pre&gt;

I temporarily disabled the firewall on the VPS using
&lt;pre&gt;sudo ufw disable&lt;/pre&gt;
as per https://ubuntu.com/server/docs/firewalls and then monitored 
&lt;pre&gt;sudo tail -f /var/log/auth.log&lt;/pre&gt;
while trying to SSH from my laptop, but that didn't make a difference. Therefore I can rule out the firewall as blocking SSH. I then ran
&lt;pre&gt;sudo ufw enable&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;Next I enabled password-based auth in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; with
  &lt;/p&gt;&lt;pre&gt;PasswordAuthentication yes&lt;/pre&gt;
and then
&lt;pre&gt;sudo service ssh restart&lt;/pre&gt;
Then tried to SSH from my laptop but still no difference -- just a time-out and no new lines in &lt;code&gt;/var/log/auth.log&lt;/code&gt;.

&lt;hr /&gt;
&lt;pre&gt;ping google.com
ping: google.com: Temporary failure in name resolution&lt;/pre&gt;

I inspected the content of 
&lt;pre&gt;/etc/resolv.conf&lt;/pre&gt;
which has the line
&lt;pre&gt;nameserver 127.0.0.53
options edns0 trust-ad
search .&lt;/pre&gt;

&lt;pre&gt;resolvectl status&lt;/pre&gt;

&lt;pre&gt;journalctl -u systemd-resolved -f&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Actually, my DNS might not be the issue:&lt;/p&gt;
&lt;pre&gt;ping 8.8.8.8
ping: connect: network is unreachable
&lt;/pre&gt;

&lt;p&gt;The DNS problem is described on https://askubuntu.com/questions/1452215/dns-resolution-broken-after-upgrading-ubuntu-20-04-to-22-04 but 
&lt;/p&gt;&lt;pre&gt;sudo dpkg-reconfigure resolveconf&lt;/pre&gt;but that doesn't work:
&lt;pre&gt;dpkg-query: package 'resolveconf' is not installed and no information is available.&lt;/pre&gt;

&lt;p&gt;The thread https://askubuntu.com/questions/1436144/no-network-after-upgrading-from-ubuntu-20-04-to-ubuntu-22-04 also didn't provide any insights for my situation.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2024-09-02T16:55:00.422Z</blogger:created>
    <published>2024-09-02T17:33:00Z</published>
    <updated>2024-09-02T19:07:05.035Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='ssh'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='network'/>
    <blogger:filename>/2024/09/unable-to-ssh-into-vps-after-upgrade-of.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5351043143604055209</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>automating entry of derivations into the Physics Derivation Graph website</title>
    <content type='html'>&lt;p&gt;&lt;/p&gt;&lt;div&gt;What would it take to integrate support for symbol detection and conversion to SymPy for a single step in a derivation?&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;user provides initial expression in Latex to web UI.&lt;/li&gt;&lt;li&gt;computer parses symbols and operators from Latex&lt;/li&gt;&lt;li&gt;computer searches&amp;nbsp;Physics Derivation Graph database of symbols and operators to find candidate symbols&lt;/li&gt;&lt;li&gt;computer provides candidate symbols to user and prompts, "which of the following symbols were you referring to?"&lt;/li&gt;&lt;li&gt;computer parses expression to SymPy, returns AST to user, and prompts, "is this the AST you meant?"&lt;/li&gt;&lt;li&gt;if yes, continue; if no, go back to step 1 or provide corrections to AST.&lt;/li&gt;&lt;li&gt;user provides next expression in Latex&lt;/li&gt;&lt;li&gt;computer parses symbols and operators from Latex&lt;/li&gt;&lt;li&gt;if symbols match symbols used in this derivation, then associate with those; otherwise&amp;nbsp;&lt;/li&gt;&lt;li&gt;computer searches&amp;nbsp;Physics Derivation Graph database of symbols and operators to find candidate symbols&lt;/li&gt;&lt;li&gt;if computer had to search PDG database, then computer provides candidate symbols to user and prompts, "which of the following symbols were you referring to?"&lt;/li&gt;&lt;li&gt;computer parses expression from step 7 to SymPy, returns AST to user, and prompts, "is this the AST you meant?"&lt;/li&gt;&lt;li&gt;computer uses brute force to check every inference rule using a CAS against the provided expressions to "guess" the inference rule.&amp;nbsp;&lt;/li&gt;&lt;li&gt;if valid inference rule is found, continue to next expression; if no valid inference rule is found, prompt user to provide inference rule.&lt;/li&gt;&lt;li&gt;Given the inference rule and associated expressions, use the CAS to verify the step.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-10T20:53:53.773Z</blogger:created>
    <published>2023-06-10T21:03:00.002Z</published>
    <updated>2023-06-10T21:03:13.023Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='automation'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='cas'/>
    <blogger:filename>/2023/06/automating-entry-of-derivations-into.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5387172693321554971</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Finding Derivations of Newton's Law of Universal Gravitation online</title>
    <content type='html'>&lt;p&gt;&lt;i&gt;Question&lt;/i&gt;: was Newton's law of universal gravitation found empirically (from measurements) or can it be derived mathematically? The short answer is yes -- both. The historical process is separate from what can be done now.&lt;/p&gt;

&lt;h2&gt;Empirical (historical) route&lt;/h2&gt;
&lt;p&gt;The second paragraph of &lt;a href="https://en.wikipedia.org/wiki/Newton%27s_law_of_universal_gravitation"&gt;the Wikipedia article on Newton's Law of Universal Gravitation&lt;/a&gt; says, "This is a general physical law derived from empirical observations by what Isaac Newton called inductive reasoning." There's a &lt;a href="https://www.youtube.com/watch?v=Ki5g0CpRj1I"&gt;video on YouTube&lt;/a&gt; describing that Newton started with 
  &lt;/p&gt;

&lt;ul style="text-align: left;"&gt;
  &lt;li&gt;acceleration of gravity on earth, g = 9.8 m/s^2&lt;/li&gt;
  &lt;li&gt;distance between Earth and Moon = 60*(radius of earth)&lt;/li&gt;
  &lt;li&gt;radius of Earth =&amp;nbsp;&lt;/li&gt;
  &lt;li&gt;orbital period of moon = 27.32 days&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Newton figured out how fast the Moon is circling the Earth using&lt;/p&gt;
&lt;pre&gt; velocity = distance/time&lt;/pre&gt;
where, in the case of the moon circling the Earth, 
&lt;pre&gt; distance the moon travels around the Earth = circumference = 2*pi*r_{orbit of Moon}&lt;/pre&gt;
&lt;p&gt;Plugging in numbers, &lt;code&gt;velocity of Moon around Earth = 1022 m/s&lt;/code&gt;. 
  That can then be plugged into the centripetal acceleration,
&lt;/p&gt;&lt;pre&gt;a_{centripetal} = v^2/r&lt;/pre&gt;
How does &lt;code&gt;a_{centripetal}&lt;/code&gt; compare to the gravitational acceleration &lt;code&gt;g&lt;/code&gt;?
&lt;pre&gt;g/a_{centripetal} = 60^2&lt;/pre&gt;
&lt;p&gt;Noticing the 60 is common to the ratio and the distance between the Earth and the Moon, Newton figures that gravitation follows an inverse square law. Newton then checked this against data from observational studies of planets.
  
&lt;/p&gt;&lt;p&gt;That's a big leap to &lt;code&gt;F = G*(M*m)/(r^2)&lt;/code&gt;, so are there more mathematical routes?
  
&lt;/p&gt;&lt;h2&gt;Mathematical Derivations&lt;/h2&gt;

&lt;h3&gt;From nasa.gov&lt;/h3&gt;
&lt;p&gt;I first found &lt;a href="https://imagine.gsfc.nasa.gov/observatories/learning/swift/classroom/law_grav_derivation.html"&gt;NASA's classroom materials&lt;/a&gt;. There are some leaps that I wasn't able to follow. The same content of that page is duplicated on &lt;a href="https://imagine.gsfc.nasa.gov/educators/programs/swift/classroom/law_grav_derivation.html"&gt;a related NASA page&lt;/a&gt;. The derivation starts with &lt;code&gt;F=ma&lt;/code&gt; and &lt;code&gt;a_{centripetal} = v^2/r&lt;/code&gt;. The author mentions Kepler's Third Law but says &lt;code&gt;T^2 \approx R^3&lt;/code&gt; (which is dimenionally inconsistent) when they mean &lt;code&gt;T^2 \propto R^3&lt;/code&gt;. The misuse of &lt;code&gt;\approx&lt;/code&gt; and &lt;code&gt;\propto&lt;/code&gt; continues throughout the rest of the derivation. 
  
&lt;/p&gt;&lt;pre&gt;velocity = distance/time&lt;/pre&gt;and the &lt;code&gt;distance&lt;/code&gt; here is the circumfrence, &lt;code&gt;2*pi*r&lt;/code&gt;, so 
&lt;pre&gt;period T = (2*pi*R)/v&lt;/pre&gt;
&lt;p&gt;Drop the &lt;code&gt;2*pi&lt;/code&gt; to get
&lt;/p&gt;&lt;pre&gt;period v \approx R/T&lt;/pre&gt;
Square both sides and apply Kepler's Third law
&lt;pre&gt;T^2 \propto R^3&lt;/pre&gt;
to get 
&lt;pre&gt;v^2 \propto 1/R&lt;/pre&gt;
&lt;p&gt;The second source of my confusion is subscripting versus superscripting -- &lt;code&gt;v_2&lt;/code&gt; versus &lt;code&gt;v^2&lt;/code&gt;. 
&lt;/p&gt;&lt;pre&gt;F = (m*(v^2))/R&lt;/pre&gt;

&lt;p&gt;I tried submitting a correction to &lt;a href="https://imagine.gsfc.nasa.gov/cgi-bin/ideas.pl"&gt;NASA's feedback page&lt;/a&gt; but couldn't since the Captcha is missing. :(

&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;From a tutorial&lt;/h3&gt;
&lt;p&gt;Next I found &lt;a href="https://protonstalk.com/gravitation/newtons-law-of-gravitation/"&gt;another student-oriented page&lt;/a&gt; that has a derivation which is even less helpful than NASA's. The derivation presented starts from angular speed and &lt;code&gt;F=mr\omega^2&lt;/code&gt;.
  
&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;YouTube tutorial&lt;/h3&gt;
&lt;p&gt;Happily I found this helpful &lt;a href="https://www.youtube.com/watch?v=fJYdFIZlD8k"&gt;video from Daniel M, "Deriving Newton's Law of Universal Gravitation"&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-10T21:03:19.494Z</blogger:created>
    <published>2023-06-10T22:14:00.001Z</published>
    <updated>2023-06-10T23:22:53.535Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='process documentation'/>
    <blogger:filename>/2023/06/finding-derivations-of-newtons-law-of.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5411090143917900166</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Increasing levels of formality in a trivial physics statement</title>
    <content type='html'>In this post I start with a trivial observation about Physics concepts and attempt to add layers of formalization through semantic enrichment. Inspired by &lt;a href="https://kwarc.info/systems/sTeX/"&gt;sTeX&lt;/a&gt;, I use pseudo-Latex which has no supported implementation. &lt;a href="https://en.wikipedia.org/wiki/Resource_Description_Framework"&gt;RDF&lt;/a&gt; tags might be more appropriate.&lt;br /&gt;
&lt;br /&gt;
The initial observation is&lt;br /&gt;
&lt;blockquote&gt;
The relation between period, T, and linear frequency, f, is T = 1/f. Thus frequency as a function of period is f = 1/T.
&lt;/blockquote&gt;
The purpose of using this as a starting point is that it is simple and easily understood by a human.&lt;br /&gt;
The rest of this post explores what semantic additions would be needed for a computer to parse the text.&lt;br /&gt;
&lt;br /&gt;
Each of these transitions can be identified manually. I don't have reliable ways of automating this process.&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
*********************&lt;br /&gt;
The first change is conversion from ASCII to Latex, a common presentation method in Math and Physics. This change only alters presentation. I've highlighted the changes in red.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;The relation between period, &lt;span style="color: red;"&gt;$&lt;/span&gt;T&lt;span style="color: red;"&gt;$&lt;/span&gt;, and linear frequency, &lt;span style="color: red;"&gt;$&lt;/span&gt;f&lt;span style="color: red;"&gt;$&lt;/span&gt;, is&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;T = 1/f.&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Thus frequency as a function of period is&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;f = 1/T.&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
*********************&lt;br /&gt;
&lt;br /&gt;
The next change is to bound claims being made.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: red;"&gt;\claim{1}{&lt;/span&gt;The relation between period, $T$, and linear frequency, $f$, is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; T = 1/f.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Thus&amp;nbsp;&lt;span style="color: red;"&gt;\claim{2}{&lt;/span&gt;frequency as a function of period is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; f = 1/T.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
*********************&lt;br /&gt;
&lt;br /&gt;
Replace "thus" with the relation between claims.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: red;"&gt;\claim{1}{&lt;/span&gt;The relation between period, $T$, and linear frequency, $f$, is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; T = 1/f.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: red;"&gt;\relation_between_claims{claim 2 is derivable from claim 1}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: red;"&gt;\claim{2}{&lt;/span&gt;frequency as a function of period is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; f = 1/T.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
*********************&lt;br /&gt;
&lt;br /&gt;
Within each claim there are variables and symbols. Identify those.&lt;br /&gt;
I've inserted parenthesis to make the order of operations clear.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\claim{1}{The relation between &lt;span style="color: red;"&gt;\named_variable{&lt;/span&gt;period&lt;span style="color: red;"&gt;}&lt;/span&gt;, &lt;span style="color: red;"&gt;\symbol{&lt;/span&gt;T&lt;span style="color: red;"&gt;}&lt;/span&gt;, and &lt;span style="color: red;"&gt;\named_variable{&lt;/span&gt;linear frequency&lt;span style="color: red;"&gt;}&lt;/span&gt;, &lt;span style="color: red;"&gt;\symbol{&lt;/span&gt;f&lt;span style="color: red;"&gt;}&lt;/span&gt;, is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &lt;span style="color: red;"&gt;\symbol{&lt;/span&gt;T&lt;span style="color: red;"&gt;} \operator{&lt;/span&gt;=&lt;span style="color: red;"&gt;} &lt;b&gt;(&lt;/b&gt;\integer{&lt;/span&gt;1&lt;span style="color: red;"&gt;}\operator{&lt;/span&gt;/&lt;span style="color: red;"&gt;}\symbol{&lt;/span&gt;f&lt;span style="color: red;"&gt;}&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\relation_between_claims{claim 2 is derivable from claim 1}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\claim{2}{The &lt;span style="color: red;"&gt;\named_variable{&lt;/span&gt;frequency&lt;span style="color: red;"&gt;}&lt;/span&gt; as a function of &lt;span style="color: red;"&gt;\named_variable{&lt;/span&gt;period&lt;span style="color: red;"&gt;}&lt;/span&gt; is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &lt;span style="color: red;"&gt;\symbol{&lt;/span&gt;f&lt;span style="color: red;"&gt;} \operator{&lt;/span&gt;=&lt;span style="color: red;"&gt;} &lt;b&gt;(&lt;/b&gt;\integer{&lt;/span&gt;1&lt;span style="color: red;"&gt;}\operator{&lt;/span&gt;/&lt;span style="color: red;"&gt;}\symbol{&lt;/span&gt;T&lt;span style="color: red;"&gt;}&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Visually, this could be represented by color-coded boxing&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjjwYVvwhQbuEQUihtn7SrXA5_lI7ArVMB5YhxvwUAv6DoSJlLDjFT_X40riAeHco_eNKHr9yxfcKFQK0lXW5euSdoMPvTQ-BaDmNJUfZxhNuvaHyko9aMaLrO2o9Epf_18sLdvpROlWpqN/s1600/natural+language+to+structured+relations.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="309" data-original-width="748" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjjwYVvwhQbuEQUihtn7SrXA5_lI7ArVMB5YhxvwUAv6DoSJlLDjFT_X40riAeHco_eNKHr9yxfcKFQK0lXW5euSdoMPvTQ-BaDmNJUfZxhNuvaHyko9aMaLrO2o9Epf_18sLdvpROlWpqN/s1600/natural+language+to+structured+relations.png" /&gt;&lt;/a&gt;&lt;/div&gt;
Here claims are red, connections are light green, expressions are dark green, named variables are pink, variables are blue, operators are light blue, and operators are purple.&lt;br /&gt;
&lt;br /&gt;
This visualization seems to relate to&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Discourse_representation_theory"&gt;discourse representation theory (DRT)&lt;/a&gt;&amp;nbsp;though I don't know how to leverage it. See box notation &lt;a href="https://plato.stanford.edu/entries/discourse-representation-theory/"&gt;here&lt;/a&gt; and &lt;a href="https://www.ims.uni-stuttgart.de/document/team/uwe/Papers/DRT.pdf"&gt;here&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
*********************&lt;br /&gt;
The "T" and "f" symbols are conventions that are used in other papers. We can indicate that by assigning universal identifiers.&lt;br /&gt;
Similarly, the operators "/" and "=" are defined in other papers. Those also get a universal ID.&lt;br /&gt;
The relation between named variables and symbols needs to be made explicit.&lt;br /&gt;
With those associations made, replace the symbols and operators in the expressions.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\def{symbol{T} = pdg2948}&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;% the symbol "T" has a (universal) Godel number&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\def{symbol{f} = pdg9215}&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;% the symbol "f" has a (universal) Godel number&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\def{operator{/} = pdg1340}&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;% the operator "/" has a (universal) Godel number&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\def{operator{=} = pdg8821}&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;% the operator "=" has a (universal) Godel number&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\def{named_variable{period} = symbol{T}}&amp;nbsp; &amp;nbsp; % the named variable "period" is equivalent to the symbol "T"&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: red; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\def{named_variable{frequency} = symbol{f}} % the named variable "frequency" is equivalent to the symbol "f"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\claim{1}{The relation between \named_variable{period}, &lt;span style="color: red;"&gt;pdg2948&lt;/span&gt;, and \named_variable{linear frequency}, &lt;span style="color: red;"&gt;pdg9215&lt;/span&gt;, is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &lt;span style="color: red;"&gt;pdg2948 pdg8821&lt;/span&gt; (\integer{1} &lt;span style="color: red;"&gt;pdg1340 pdg9215&lt;/span&gt;).&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\relation_between_claims{claim 2 is derivable from claim 1}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\claim{2}{The \named_variable{frequency} as a function of \named_variable{period} is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \begin{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &lt;span style="color: red;"&gt;pdg9215 pdg8821&lt;/span&gt; (\integer{1} &lt;span style="color: red;"&gt;pdg1340 pdg2948&lt;/span&gt;).&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \end{equation}&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;
One of the purposes of associating a symbol "T" with a universal identifier is that the type can be specified. Here "f" and "T" are both Real valued.&lt;br /&gt;
&lt;br /&gt;
At this point the relation between claims 1 and 2 could be converted to SymPy and verified; see&lt;br /&gt;
&lt;a href="https://derivationmap.net/review_derivation/884319/"&gt;https://derivationmap.net/review_derivation/884319/&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-31T13:49:38.853Z</blogger:created>
    <published>2020-07-31T14:07:00.003Z</published>
    <updated>2020-09-20T21:32:23.792Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='visualization'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='layers'/>
    <blogger:filename>/2020/07/increasing-levels-of-formality-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5436609653647383363</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>The Physics Derivation Graph is for workflow management</title>
    <content type='html'>There's no complicated math underlying the&amp;nbsp;Physics Derivation Graph. The code base is primarily about tracking numeric indices and strings in Python dictionaries and lists read from plain text CSVs.&lt;br /&gt;
&lt;br /&gt;
Similarly, there are no fancy algorithms in the software.&lt;br /&gt;
&lt;br /&gt;
The lack of complicated math and fancy algorithms is because the&amp;nbsp;Physics Derivation Graph is for workflow management of mathematical Physics. Encoding the logic and processes is merely management of simple data (numerical indices, strings to represent math).</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-12T01:23:14.883Z</blogger:created>
    <published>2018-07-12T01:26:00.002Z</published>
    <updated>2018-07-12T01:26:33.915Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/the-physics-derivation-graph-is-for.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5521843817982709526</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>moving from local terminal interface with CSV to web interface with a database backend</title>
    <content type='html'>The existing Physics Derivation Graph is centered on command-line input with PNG output. Recently I've been exploring use of d3js as a web frontend.&lt;br /&gt;
&lt;br /&gt;
I'm considering moving the Physics Derivation Graph to something which&amp;nbsp;supports a web frontend connected to a hosted database backend. No command-line interaction or installation required.&lt;br /&gt;
&lt;br /&gt;
I've been using CSV to store the data because it is the most common&amp;nbsp;format. That works fine as long as the PDG is local and command-line&amp;nbsp;driven. Now I want to move to a website, (ie openshift --&lt;br /&gt;
&lt;a href="https://openshift.redhat.com/app/console/application_type/" target="_blank"&gt;https://openshift.redhat.com/&lt;wbr&gt;&lt;/wbr&gt;app/console/application_type/&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;
I've set up a Django cartridge&lt;br /&gt;
&lt;br /&gt;
I realized I don't need to sketch a design for the PDG web interface.&amp;nbsp;Instead, I can start with determining minimum functionality:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;user login (don't want spammers writing to the database)&lt;/li&gt;
&lt;li&gt;user view existing content&lt;/li&gt;
&lt;li&gt;user add new content&lt;/li&gt;
&lt;/ul&gt;
I've used Flask previously, but I think the functionality I want is sufficiently complex that Flask wouldn't be enough.&lt;br /&gt;
&lt;br /&gt;
I don't know whether I could continue to use the existing CSV as a backend storage. At this point I don't need scalability in terms of user latency or amount of data.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Vision: enable users of the PDG to interact with content in a web interface&lt;br /&gt;
&lt;br /&gt;
Goal: use Django on Openshift to enable authentication, storage of content, and manipulating content&lt;br /&gt;
&lt;br /&gt;
Path:&lt;br /&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;Flask local instance&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hplgit.github.io/web4sciapps/doc/pub/._web4sa_flask006.html"&gt;https://hplgit.github.io/web4sciapps/doc/pub/._web4sa_flask006.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.tutsplus.com/tutorials/an-introduction-to-pythons-flask-framework--net-28822"&gt;http://code.tutsplus.com/tutorials/an-introduction-to-pythons-flask-framework--net-28822&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Flask read values from database - CSV&lt;/li&gt;
&lt;li&gt;convert PDG CSV to local SQL database&lt;/li&gt;
&lt;li&gt;read from local SQL database&lt;/li&gt;
&lt;li&gt;write to local SQL database -&amp;nbsp;&lt;a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/sqlite3.1.html"&gt;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/sqlite3.1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flask read values from database - SQL&lt;/li&gt;
&lt;li&gt;Django local instance&lt;/li&gt;
&lt;li&gt;Django local instance read values from database&lt;/li&gt;
&lt;li&gt;Django local instance write values from database&lt;/li&gt;
&lt;li&gt;Django on Openshift -&amp;nbsp;&lt;a href="http://physicsderivationgraph.blogspot.com/2015/11/django-and-openshift.html"&gt;http://physicsderivationgraph.blogspot.com/2015/11/django-and-openshift.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django on Openshift read values from database&lt;/li&gt;
&lt;li&gt;Django on Openshift write values from database&lt;/li&gt;
&lt;li&gt;Django on Openshift write values from database by authenticated user&lt;/li&gt;
&lt;/ol&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Database choices&lt;/h3&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems"&gt;https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/a-comparison-of-nosql-database-management-systems-and-models"&gt;https://www.digitalocean.com/community/tutorials/a-comparison-of-nosql-database-management-systems-and-models&lt;/a&gt;&lt;br /&gt;
&lt;h4&gt;
CSV&lt;/h4&gt;
&lt;h4&gt;
SQLite&lt;/h4&gt;
SQLite only supports a single writer at a time (meaning the execution of an individual transaction). SQLite locks the entire database when it needs a lock (either read or write) and only one writer can hold a write lock at a time.&lt;br /&gt;
SQLite 3.7.0 added a new journal mode called Write Ahead Locking that supports concurrent reading while writing.</content>
    <blogger:metaDescription/>
    <blogger:created>2015-11-28T22:11:25.229Z</blogger:created>
    <published>2015-11-30T16:09:00Z</published>
    <updated>2015-12-09T03:15:36.177Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/11/moving-from-local-terminal-interface.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5565090551498026379</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>sticking with the basics and avoiding dependencies</title>
    <content type='html'>There's a trade-off between "write all the code yourself" and "use external libraries."&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;The "use external libraries" approach allows for quicker time-to-market and leverages the expertise of other people. The downside is that if any of the providers change their code, you now have to keep up with those dependencies. This means refactoring as versions change.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;The "write all the code yourself" approach can take longer and incurs the burden of learning things outside the initial focus. The upside is that there's less risk associated with dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
Based on my observations of other projects not being durable due to the necessary upkeep of code when the "use external libraries" choice is selected, I've opted to write most of the code for the Physics Derivation Graph and thus minimize my risk associated with dependencies.&lt;br /&gt;
&lt;br /&gt;
An example of this is avoidance of jQuery and other external Javascript libraries.&lt;br /&gt;
I was happy to find the site&lt;br /&gt;
&lt;a href="https://plainjs.com/"&gt;https://plainjs.com/&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-08T16:21:55.274Z</blogger:created>
    <published>2020-05-08T16:35:00Z</published>
    <updated>2020-05-08T16:35:05.774Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/sticking-with-basics-and-avoiding.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5570701564916337738</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>troubleshooting why docker-compose does not successfully launch locally</title>
    <content type='html'>&lt;p&gt;Normally I make changes to the repo&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/v7_pickle_web_interface"&gt;https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/v7_pickle_web_interface&lt;/a&gt;&amp;nbsp;and then run &lt;code&gt;git pull&lt;/code&gt; on my DigitalOcean VPS Droplet. It has been a long time since I tried running the web server locally on my laptop.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Here's the process I went through to get the web server running locally.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;First I had populated the "certs" directory
&lt;/p&gt;&lt;pre&gt;/Users/username/version_controlled/allofphysicsgraph/proofofconcept/v7_pickle_web_interface/certs&lt;/pre&gt;
on my laptop from the remote VPS.&amp;nbsp;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Then I had to create&amp;nbsp;
&lt;/p&gt;&lt;pre&gt;/Users/username/version_controlled/allofphysicsgraph/proofofconcept/v7_pickle_web_interface/.env&lt;/pre&gt;
with the Google variables for login authentication.&amp;nbsp;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;In the directory on my laptop
&lt;/p&gt;&lt;pre&gt;/Users/username/version_controlled/allofphysicsgraph/proofofconcept/v7_pickle_web_interface&lt;/pre&gt;
running the command&amp;nbsp;&lt;code&gt;docker-compose up --build&amp;nbsp;&lt;/code&gt;failed. Specifically, the nginx and flask containers would start, but nginx would fail because the flask container wasn't responding. I added
&lt;pre&gt;restart: on-failure&lt;/pre&gt;
to the nginx section in docker-compose.yaml

&lt;P&gt;That didn't solve the flask issue, but it allowed the containers to persist while I inspected the logs. Even though I couldn't enter the flask container, I could review the logs produced by gunicorn by running the command&lt;div&gt;&lt;div&gt;&lt;pre&gt;tail -f flask/logs/gunicorn_error.log&lt;/pre&gt;which showed the causal issue

&lt;pre&gt;  File "&amp;lt;frozen importlib._bootstrap&amp;gt;", line 219, in _call_with_frames_removed
  File "/home/appuser/app/wsgi.py", line 15, in &amp;lt;module&amp;gt;
    from controller import app
  File "/home/appuser/app/controller.py", line 63, in &amp;lt;module&amp;gt;
    from secure import SecureHeaders  # type: ignore
ImportError: cannot import name 'SecureHeaders'
[2021-08-08 19:56:37 +0000] [11] [INFO] Worker exiting (pid: 11)
[2021-08-08 19:56:37 +0000] [1] [WARNING] Worker with pid 11 was terminated due to signal 15
[2021-08-08 19:56:37 +0000] [1] [INFO] Shutting down: Master
[2021-08-08 19:56:37 +0000] [1] [INFO] Reason: Worker failed to boot.
&lt;/pre&gt;&lt;i&gt;Root case&lt;/i&gt;: In my requirements.txt I hadn't pinned the version of the Python library &lt;code&gt;secure&lt;/code&gt;. According to &lt;a href="https://github.com/smicallef/spiderfoot/issues/1166"&gt;this issue&lt;/a&gt; there was &lt;a href="https://pypi.org/project/secure/#history"&gt;a recent update&lt;/a&gt;&amp;nbsp;. I ended up pinning secure==0.2.1 in requirements.txt&lt;p&gt;Now I am able to run &lt;code&gt;docker-compose up&lt;/code&gt; and get a web page at&amp;nbsp;https://localhost/&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-08T19:51:00.971Z</blogger:created>
    <published>2021-08-08T20:22:00.008Z</published>
    <updated>2021-08-08T20:22:57.988Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='docker-compose'/>
    <blogger:filename>/2021/08/troubleshooting-why-docker-compose-does.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5619362111611826853</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>what does comprehensive mean in the domain of Physics?</title>
    <content type='html'>To ensure coverage of Physics we need to enumerate what coverage would mean. Three paradigms are&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;topics-based scope; see&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Outline_of_physics#Branches_of_physics"&gt;https://en.wikipedia.org/wiki/Outline_of_physics#Branches_of_physics&lt;/a&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;classical mechanics&lt;/li&gt;
&lt;li&gt;thermodynamics&lt;/li&gt;
&lt;li&gt;quantum mechanics&lt;/li&gt;
&lt;li&gt;electrodynamics&lt;/li&gt;
&lt;li&gt;electrical circuits&lt;/li&gt;
&lt;li&gt;astrophysics&lt;/li&gt;
&lt;li&gt;particle physics&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;formula-based (or concept-based) scope; see&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Lists_of_physics_equations"&gt;https://en.wikipedia.org/wiki/Lists_of_physics_equations&lt;/a&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;F = m a&lt;/li&gt;
&lt;li&gt;E = m c^2&lt;/li&gt;
&lt;li&gt;Maxwell's equations&lt;/li&gt;
&lt;li&gt;Schrodinger's equation&lt;/li&gt;
&lt;li&gt;Wave equation&lt;/li&gt;
&lt;li&gt;conservation of momentum&lt;/li&gt;
&lt;li&gt;conservation of energy&lt;/li&gt;
&lt;li&gt;uncertainty principle&lt;/li&gt;
&lt;li&gt;equations of motion&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;symbol-based scope; see&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/List_of_common_physics_notations"&gt;https://en.wikipedia.org/wiki/List_of_common_physics_notations&lt;/a&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;energy&lt;/li&gt;
&lt;li&gt;wave function&lt;/li&gt;
&lt;li&gt;mass&lt;/li&gt;
&lt;li&gt;acceleration&lt;/li&gt;
&lt;li&gt;position&lt;/li&gt;
&lt;li&gt;momentum&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
If the Physics Derivation Graph can demonstrate utility in each category, that provides evidence towards the claim that the Graph can be comprehensive.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
That is distinct from a second, separate question of determining connectivity.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-22T15:29:02.088Z</blogger:created>
    <published>2020-05-22T15:38:00.001Z</published>
    <updated>2020-05-22T15:38:08.678Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/what-does-comprehensive-mean-in-domain.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5645984727033116739</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>historical evolution of a git repo </title>
    <content type='html'>JSON-like output
&lt;pre&gt;git log --date=format-local:'%Y-%m-%d %H:%M:%S' \
--pretty=format:'{%n  "commit": "%H",%n  "author": "%aN &amp;lt;%aE&amp;gt;",%n  "date": "%ad",%n  "message": "%f"%n},' &amp;gt; all_logs.dat&lt;/pre&gt;

&lt;p&gt;as per &lt;a href="https://stackoverflow.com/a/34778736/1164295"&gt;https://stackoverflow.com/a/34778736/1164295&lt;/a&gt; and&amp;nbsp;&lt;a href="https://gist.github.com/textarcana/1306223"&gt;https://gist.github.com/textarcana/1306223&lt;/a&gt; which points to&amp;nbsp;&lt;a href="https://gist.github.com/textarcana/1306223"&gt;https://gist.github.com/textarcana/1306223&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;python3 -c "import json; 
with open('all_entries','r') as fh:
    content = json.load(fh)
print(content)"
&lt;/pre&gt;&lt;b&gt;Single line is better&lt;/b&gt;:

&lt;pre&gt;git log --date=format-local:'%Y-%m-%d %H:%M:%S' --pretty=format:"%H%x09%ae%x09%ad%x09%s" &amp;gt; all_hash
&lt;/pre&gt;

&lt;p&gt;TODO:
  &lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;how many commits per year?
     &lt;/li&gt;&lt;li&gt;sample the git repo at a given frequency and count number of files in the sample
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;general approach:&lt;/p&gt;
&lt;pre&gt;git clone [remote_address_here] my_repo
cd my_repo
git reset --hard [ENTER HERE THE COMMIT HASH YOU WANT]
&lt;/pre&gt;
&lt;p&gt;as per &lt;a href="https://stackoverflow.com/a/3555202/1164295"&gt;https://stackoverflow.com/a/3555202/1164295&lt;/a&gt;&lt;/p&gt;
loop over relevant hashes:
&lt;pre&gt;git clone https://github.com/allofphysicsgraph/proofofconcept.git
cd proofofconcept
find . -type f | grep -v ".git" | wc -l
    3381
git reset --hard f12795798d2537d3fec80ba2b4d33396e52011bd
find . -type f | grep -v ".git" | wc -l
       2
&lt;/pre&gt;

number of commits in a year:
&lt;pre&gt;cat all_hash | grep 2014- | wc -l
      17
&lt;/pre&gt;
&lt;pre&gt;for year in {2014..2023}; do commits_per_year=`cat all_hash | grep ${year}- | wc -l`; echo $year $commits_per_year; done
2014 17
2015 234
2016 62
2017 41
2018 81
2019 30
2020 790
2021 67
2022 90
2023 5
&lt;/pre&gt;

&lt;pre&gt;for year in {2014..2023}; do this_hash=`cat all_hash | grep $year | head -n 1 | cut -c-40`; git reset --hard $this_hash; file_count=`find . -type f | grep -v ".git" | wc -l`; echo $this_hash $year $file_count; done &amp;gt; counts_per_year.dat
&lt;/pre&gt;

&lt;pre&gt;cat counts_per_year.dat | grep -v HEAD
4289c2a3311d4e051bdab3b0d99f49b25dab6bc3 2014 1027
b81d6ddba5a2015d328975607318d7e7755b27aa 2015 3339
26b0d9fc8c49ede12c897b4bf4cd050765747a81 2016 2098
eec25f59649a4cc9e9e8b166355793b58b742672 2017 2194
201822fd2025349f8749b9433533d0d54c7363b3 2018 3007
918245c17bece668f868ce7201976e2d49dc1743 2019 3022
bd4fb0528c1a46ed2fac13aa16f77508aaa43e67 2020 3150
7dd27b734673e20e405cd26acbdf7d237cf73e33 2021 3343
ad8dfc5931922788f32a21f10906d97c50f7ca36 2022 3384
9df026b16827dfe97fc8a44c4063e493c21a49d4 2023 3384
&lt;/pre&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-07T02:22:32.207Z</blogger:created>
    <published>2023-06-07T03:05:00Z</published>
    <updated>2023-06-07T03:05:31.984Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2023/06/historical-evolution-of-git-repo.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5653233527633647368</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Using EquationMap for content entry</title>
    <content type='html'>For the &lt;a href="http://allofphysicsgraph.github.io/proofofconcept/"&gt;Physics Derivation Graph&lt;/a&gt;, I started out entering expressions manually into a plaintext file. I then graduated to manually entering expressions into a XML, then CSV file. Rendering was done in GraphViz and then d3js. In the past few months, I created an interactive terminal prompt for a more automated entry using Python, still rendering with d3js. I experimented with a web-based interface using Flask, but recognized I was slowly evolving towards the &lt;a href="http://equationmap.com/"&gt;EquationMap&lt;/a&gt; interface for both display and entry.&lt;br /&gt;
&lt;br /&gt;
Instead of re-inventing &lt;a href="http://equationmap.com/"&gt;EquationMap&lt;/a&gt;, I realized I could use &lt;a href="http://equationmap.com/"&gt;EquationMap&lt;/a&gt; as a front end. I would then export the graph .tex file and parse it into the Physics Derivation Graph. This benefits both EquationMap and the Physics Derivation Graph: &lt;a href="http://equationmap.com/"&gt;EquationMap&lt;/a&gt; gets more traffic and more use cases, and PDG doesn't need to create a front-end.&lt;br /&gt;
&lt;br /&gt;
Here's two different examples of using EquationMap with Inference Rules:&lt;br /&gt;
&lt;a href="http://equationmap.com/#sSCdqOvUii"&gt;http://equationmap.com/#sSCdqOvUii&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://equationmap.com/#6NXnawarhb"&gt;http://equationmap.com/#6NXnawarhb&lt;/a&gt;&lt;br /&gt;
I like the second instance better.&lt;br /&gt;
&lt;br /&gt;
Here's an example of completing the square without inference rules&lt;br /&gt;
&lt;a href="http://equationmap.com/#OZbmPo15Ha"&gt;http://equationmap.com/#OZbmPo15Ha&lt;/a&gt;&lt;br /&gt;
and with inference rules&lt;br /&gt;
&lt;a href="http://equationmap.com/#7xXumkNaTH"&gt;http://equationmap.com/#7xXumkNaTH&lt;/a&gt;&lt;br /&gt;
and generalized symbolically&lt;br /&gt;
&lt;a href="http://equationmap.com/#xq8KZ0bnkT"&gt;http://equationmap.com/#xq8KZ0bnkT&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
I like the fact that I can easily refer to different iterations of the development&lt;br /&gt;
&lt;br /&gt;
The ease of entering Latex and connecting nodes is very convenient!&lt;br /&gt;
&lt;br /&gt;
The export function produces a combination of JSON and Latex. &lt;br /&gt;
I've written a parser for the .tex output from EquationMap&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/sandbox/equationMap_tex_parser"&gt;https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/sandbox/equationMap_tex_parser&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2015-12-03T04:20:57.001Z</blogger:created>
    <published>2015-12-03T04:21:00.001Z</published>
    <updated>2015-12-09T03:23:15.362Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/12/using-equationmap-for-content-entry.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5655892590299530142</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>notes from Preposterous Universe podcast episode 245</title>
    <content type='html'>&lt;p&gt;Notes from the podcast&amp;nbsp;&lt;a href="https://www.preposterousuniverse.com/podcast/2023/07/31/245-solo-the-crisis-in-physics/"&gt;https://www.preposterousuniverse.com/podcast/2023/07/31/245-solo-the-crisis-in-physics/&lt;/a&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Definitions of Understanding&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Strong understanding&lt;/b&gt; = unique, well-tested theory that accounts for all the data we have within the domain of applicability (defined by SMC at 14:00).&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Consequences&lt;/i&gt;: There are no competing theories. Modifications or extensions are feasible, but the domain is "solved." The theory won't be displaced.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Examples&lt;/i&gt;: general relativity, Newtonian dynamics, Newtonian gravity.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;Weak understanding&lt;/b&gt; = more than one theory can account for the data. Unable to discriminate which is relevant since theories make the same predictions. (defined by SMC at 15:44)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Consequences&lt;/i&gt;: Not clear theory which is right. Right theory may not have been invented yet.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Examples&lt;/i&gt;:&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Foundations of quantum mechanics (e.g., Copenhagen interpretation, Bohemian, many worlds, jaggets platz)&lt;/li&gt;&lt;li&gt;dark matter and dark energy in cosmology. Properties are known, but multiple theories&lt;/li&gt;&lt;ul&gt;&lt;li&gt;dark matter: WIMPS, axions,&amp;nbsp;&lt;/li&gt;&lt;li&gt;dark energy: vacuum energy, dynamical quintesense-like fields&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;No understanding&lt;/b&gt; = have data but no theory (defined by SMC at 18:20)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Examples&lt;/i&gt;: what happens at or before the big bang&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;u&gt;SMC's claim&lt;/u&gt;: We have either a strong or weak understanding of everything that is accessible through measurement. (at 21:40) There's nothing that's experimentally accessible and not understood. That's new!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Survey of domains and relations&lt;/h3&gt;&lt;div&gt;&lt;i&gt;What is it that we know?&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Newtonian dynamics. Space is separate from time. Deterministic Laplacian evolution.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Theory of relativity (1905, Einstein) explains space-time (as per Minkowski, 1907).&amp;nbsp; (SMC: 29:22)&lt;/div&gt;&lt;div&gt;&lt;a href="https://en.wikipedia.org/wiki/Special_relativity"&gt;Special Relativity&lt;/a&gt;: how space-time is when gravity is not important; when space-time is flat. (SMC 30:20)&lt;/div&gt;&lt;div&gt;General Relativity: space-time can be curved and that curvature is gravity. Predicts big bang, black holes. SMC 30:10)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Quantum Mechanics (1920, Heisenberg). &lt;br /&gt;Replaces classical mechanics -- SMC 32:10&lt;/div&gt;&lt;div&gt;QM is about continuous wave function defined by Schrodinger Equation.&amp;nbsp;&lt;/div&gt;&lt;div&gt;Solving Schrodinger's Equation results in discrete solutions -- SMC 35:55&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://en.wikipedia.org/wiki/Quantum_field_theory"&gt;Quantum Field Theory&lt;/a&gt;.&amp;nbsp;&lt;br /&gt;Under the umbrella of Quantum Mechanics -- SMC 32:33.&lt;br /&gt;QFT is compatible with Special Relativity -- SMC 32:42&lt;/div&gt;&lt;div&gt;The world is made of fields, not particles. -- SMC 34:40&lt;/div&gt;&lt;div&gt;Fields resolve into particles when the fields are observed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Relativistic QFT includes Special Relativity&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://en.wikipedia.org/wiki/Quantum_electrodynamics"&gt;Quantum Electrodynamics&lt;/a&gt; (QED) is the theory of interactions of electrons, positrons, photons.&lt;/div&gt;&lt;div&gt;Initial theory had infinities. Resolved infinities using renormalization by taking limit in a specific way.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Ken Wilson simulated QED using discretized space-time (rather than a continuous PDEs). &lt;br /&gt;--&amp;gt; &lt;a href="https://en.wikipedia.org/wiki/Lattice_field_theory"&gt;Lattice Quantum Field Theory&lt;/a&gt; eliminates the infinities.&amp;nbsp;&lt;/div&gt;&lt;div&gt;Infinities (represented as loops of &lt;a href="https://en.wikipedia.org/wiki/Feynman_diagram"&gt;Feynman diagrams&lt;/a&gt;) are reduced to (non-infinite) tree diagrams in Feynman diagrams.&amp;nbsp;&lt;/div&gt;&lt;div&gt;Rather than arbitrarily large momentum (small space), discretization constraints the infinities.&lt;/div&gt;&lt;div&gt;Limitation on the domain of applicability is the &lt;a href="https://en.wikipedia.org/wiki/Planck_units"&gt;Planck scale&lt;/a&gt;. -- SMC 45:20&lt;/div&gt;&lt;div&gt;This is the ultraviolet &lt;a href="https://en.wikipedia.org/wiki/Cutoff_(physics)"&gt;cut-off&lt;/a&gt;. There's an energy above which we don't know what's going on. -- SMC 46:05&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;stopped at 53:30&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-09-03T17:21:53.410Z</blogger:created>
    <published>2023-09-03T18:47:00.002Z</published>
    <updated>2023-09-03T19:23:43.378Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2023/09/notes-from-preposterous-universe.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5729908637771102795</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Neo4j for the Physics Derivation Graph</title>
    <content type='html'>I've been focusing my efforts on the &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v4_file_per_expression/interactive_user_prompt.py"&gt;interactive user prompt&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Python_(programming_language)"&gt;Python&lt;/a&gt;-based &lt;a href="https://en.wikipedia.org/wiki/Command-line_interface"&gt;CLI&lt;/a&gt; for the &lt;a href="http://allofphysicsgraph.github.io/proofofconcept/"&gt;Physics Derivation Graph&lt;/a&gt;. Effectively, I'm working through a &lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine"&gt;finite state machine&lt;/a&gt; with associated actions for each option. (Tangential task: a pictorial representation of the state machine would be useful.)&lt;br /&gt;
&lt;br /&gt;
I've use Neo4j for other tasks associated with knowledge representation, so I'm surprised I haven't considered property graphs for storing the PDG (there's no mention in &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/doc/physics_graph_notes.log"&gt;my old notes&lt;/a&gt; or &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues?utf8=%E2%9C%93&amp;amp;q=neo4j"&gt;issues&lt;/a&gt; or anything meaningful besides &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/wiki/similar-projects"&gt;a generic link on the wiki&lt;/a&gt;.)&lt;br /&gt;
&lt;br /&gt;
One of the potential benefits of using a property graph over a normal graph is the labeling of edges. Currently when there are multiple input expressions or feeds to an inference rule, it's not clear which input is referenced. For example, consider "IntOverFromTo" which has &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v4_file_per_expression/inference_rules/IntOverFromTo_latex_20151229.tex"&gt;the LaTeX expansion&lt;/a&gt;, "Integrate Eq.~\ref{eq:#4} over $#1$ from lower limit $#2$ to upper limit $#3$." There are three feeds. Without labeling which feed is which, the substitution is undetermined.&lt;br /&gt;
&lt;br /&gt;
With a property graph, the inference rule would have pre-defined labeled edges, ie "lower_limit" and "upper_limit" and "integrate_wrt."&lt;br /&gt;
&lt;br /&gt;
Benefits to using the property graph include&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;visualization tools are more likely to exist, rather than me having to code up a d3js-based web display.&lt;/li&gt;
&lt;li&gt;querying and editing the graph uses standard syntax, rather than relying on me creating a Python-based CLI with pre-set abilities.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;the current data structure is a list of dictionaries in memory and a set of CSV files in directories; using Neo4j I wouldn't need to manage the data structure and could still translate back to plain text&lt;/li&gt;
&lt;li&gt;adding additional properties (ie LaTeX for expressions versus SymPy, comments, weblinks) would be more scalable than the current data structure and schema which is manually crafted.&lt;/li&gt;
&lt;li&gt;cross-platform compatibility is not lost&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-08-04T18:03:57.566Z</blogger:created>
    <published>2018-08-04T18:21:00.004Z</published>
    <updated>2018-08-04T18:22:31.164Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/08/neo4j-for-physics-derivation-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5755501110249529787</id>
    <blogger:parent>tag:blogger.com,1999:blog-7761348728894775915.post-6098779109076116008</blogger:parent>
    <blogger:inReplyTo/>
    <blogger:type>COMMENT</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <content type='html'>make docmac

cd /scratch/sympy/sympy/parsing/latex
java -jar /usr/local/lib/antlr-4.7.2-complete.jar LaTeX.g4 -no-visitor -no-listener -o _antlr
python rename.py
cd /scratch/sympy/
python setup.py install
exit

cd sympy/
git status
git add sympy/parsing/latex/_antlr/latexlexer.py sympy/parsing/latex/_antlr/latexparser.py
git commit -m &amp;quot;corrected version of Antlr from 4.8 to 4.7.2&amp;quot;
git push</content>
    <blogger:created>2020-08-17T00:55:54.325Z</blogger:created>
    <published>2020-08-17T00:55:54.325Z</published>
    <updated>2020-08-17T00:55:54.325Z</updated>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5781074344905401877</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>when to use a dropdown menu versus list of links in the web interface</title>
    <content type='html'>For the web interface, there are multiple pages that have a list from which a user can select. One way to render the list would be a set of hyperlinks; another way would be a dropdown menu.&lt;br /&gt;
&lt;br /&gt;
Suppose the user needs to select an inference rule for a step. They should only chose one, so a dropdown is the preferred method.&lt;br /&gt;
--&amp;gt; when the user should be restricted to one option, use a dropdown menu.&lt;br /&gt;
&lt;br /&gt;
Suppose the user is presented with a list of derivations to view. They could chose one or more (to open in new tabs), so a list is the preferred method.&lt;br /&gt;
--&amp;gt; when the user can chose one or more options, use a dynamically generated list of hyperlinks.</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-25T14:18:44.581Z</blogger:created>
    <published>2019-12-25T14:23:00.002Z</published>
    <updated>2019-12-25T14:23:45.968Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/when-to-use-dropdown-menu-versus-list.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5812844721101171551</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>how I validate changes and deploy updates to derivationmap.net website</title>
    <content type='html'>On my local server, I make changes to the local file and then validate using
&lt;pre&gt;cd ~/version_controlled/allofphysicsgraph/proofofconcept/v7_pickle_web_interface
docker-compose up --build --remove-orphans
&lt;/pre&gt;&lt;div&gt;Build time is 10 minutes when layers are not cached.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
Check the result in a local web browser by visiting &lt;code&gt;http://localhost&lt;/code&gt;

If I'm happy with the content,
&lt;pre&gt;git add filename
git commit -m "a message"
git push
&lt;/pre&gt;

SSH to the DigitalOcean droplet VPS (virtual private server)
&lt;pre&gt;cd ~/proofofconcept/v7_pickle_web_interface
git pull
docker-compose up --build --force-recreate --remove-orphans --detach&lt;/pre&gt;
Check the live page content at &lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt;.</content>
    <blogger:metaDescription/>
    <blogger:created>2021-07-25T17:51:50.055Z</blogger:created>
    <published>2021-07-25T17:58:00.001Z</published>
    <updated>2021-07-25T18:15:18.914Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/07/how-i-validate-changes-and-deploy.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5841269608038944249</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>a chain of custody for papers in arxiv to formal proofs in Lean</title>
    <content type='html'>&lt;p&gt;Papers published in arxiv using Latex contain narrative text and mathematical expressions. How could we have confidence that the content of a published paper is related to a formal proof?&lt;/p&gt;

&lt;p&gt;The narrative text would refer to symbols, expressions, units, and quantities. The expressions and symbols could be embedded in the Latex source using a package that provides macros.&lt;/p&gt;

&lt;p&gt;The author's .tex would include loading a package like&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;\usepackage{pdg}[server_address=http://serveraddressforpdg.net]&lt;/pre&gt;
&lt;p&gt;Then when the author references an expression they would use&lt;/p&gt;
&lt;pre&gt;\begin{equation}
\pdgexp{192839}
\end{equation}&lt;/pre&gt;
&lt;p&gt;When compiled to PDF, the macro &lt;code&gt;\pdgexp&lt;/code&gt; calls to the server address http://serveraddressforpdg.net to return the Latex expression. The same could be done for an inline reference to a symbol, like &lt;code&gt;\pdgsymbol{93831911}&lt;/code&gt;.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In this approach there wouldn't need to be an appendix for the derivation because the derivation steps are hosted on the PDG server.&lt;/p&gt;

&lt;p&gt;The chain of custody would be&lt;/p&gt;&lt;p&gt;arxiv PDF -- arxiv .tex -- .tex contains references to PDG expression and symbol IDs -- PDG server contains derivation steps -- steps are validated using Lean&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;The macro might need to cache the PDG database locally so the server doesn't get called every time the .tex is compiled PDF.&amp;nbsp;&lt;br /&gt;Also, allow the author to force a refresh of the cache.&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-08-13T00:47:33.942Z</blogger:created>
    <published>2023-08-13T00:59:00.003Z</published>
    <updated>2023-08-13T01:00:38.306Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2023/08/a-chain-of-custody-for-papers-in-arxiv.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5877730331807707871</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>operators syntax: macros instead of abstract syntax trees</title>
    <content type='html'>Currently the JSON file has a set of named operators with the attributes "argument count", "latex", "scope". The "argument count" is a non-negative integer and the "scope" is a list with elements like real, complex, vector, matrix. integer.&lt;br /&gt;
&lt;br /&gt;
What's missing is the AST structure that defines where the arguments go with respect to the operator. For example,&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;x + y&lt;/span&gt;&lt;br /&gt;
is valid while&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;x y +&lt;/span&gt;&lt;br /&gt;
is not.&lt;br /&gt;
&lt;br /&gt;
Similarly,&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cos x&lt;/span&gt;&lt;br /&gt;
is valid while&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;x cos&lt;/span&gt;&lt;br /&gt;
is not.&lt;br /&gt;
&lt;br /&gt;
While I can state these concepts I don't know how to formalize the notation.&lt;br /&gt;
For example, a definite integral takes 4 arguments in a specific location:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;int_x^y f(z) dz&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;I could express operators using a latex macro&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;br /&gt;
&lt;pre&gt;\documentclass[12pt]{article}
\usepackage{amsmath,amssymb,amsfonts}
\usepackage[dvipdfmx,colorlinks=true,pdfkeywords={physics derivation graph}]{hyperref}
\newcommand\addition[2]{ #1 + #2}
\newcommand\subtraction[2]{ #1 - #2}
\newcommand\divisionSameLine[2]{ #1 / #2 }
\newcommand\divisionFrac[2]{ \frac{ #1}{ #2} }
\newcommand\integralDefinite[4]{ \int_{ #1}^{ #2} #3 #4}
\newcommand\addXtobothsides[3]{Add $#1$ to both sides of Eq.~\ref{eq:#2}; yields Eq.~\ref{eq:#3}.}
\title{Lorentz transformation}
\date{\today}
\setlength{\topmargin}{-.5in}
\setlength{\textheight}{9in}
\setlength{\oddsidemargin}{0in}
\setlength{\textwidth}{6.5in}
\begin{document}
\maketitle
\begin{abstract}
This is the abstract
\end{abstract}

\begin{equation}
\addition{a}{b}
\end{equation}

\begin{equation}
\divisionFrac{a}{b}
\end{equation}

\begin{equation}
\integralDefinite{a}{b}{f(x)}{dx}
\end{equation}

\end{document}
&lt;/pre&gt;
&lt;br /&gt;
Compile to PDF using

&lt;br /&gt;
&lt;br /&gt;
&lt;pre&gt;latex runthis.tex 
latex runthis.tex 
dvipdfmx runme.dvi 
&lt;/pre&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-09T15:56:58.666Z</blogger:created>
    <published>2020-05-09T16:01:00.004Z</published>
    <updated>2020-05-10T17:51:01.456Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/operators-syntax.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5903943244857703473</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>where to invest my efforts; prioritization depends on objective</title>
    <content type='html'>Options on where to spend my attention on this project include&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;semantic decoration of text&lt;/li&gt;
&lt;li&gt;trying to figure out how semantic decoration connects to the underlying inference rules&lt;/li&gt;
&lt;li&gt;generating PDG Latex content using existing infrastructure&lt;/li&gt;
&lt;li&gt;verifying existing PDG content by converting to SymPy&lt;/li&gt;
&lt;li&gt;expanding the SymPy Latex grammar for better parsing and conversion&lt;/li&gt;
&lt;li&gt;improving the front-end presentation&lt;/li&gt;
&lt;li&gt;improving the data input interface&lt;/li&gt;
&lt;li&gt;changing the backend database from JSON + SQL to something cleaner&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
I'm not completely clear on what my motives for the PDG are.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;I find the work interesting&lt;/li&gt;
&lt;li&gt;I think other people might also be interested&lt;/li&gt;
&lt;li&gt;I'm not clear what specific value the project provides (other than attempting to document the beauty of the math and Physics)&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
I'm not sure whether I'm doing this for myself, for my legacy, or for other people.&lt;br /&gt;
&lt;br /&gt;
My own lack of clarity translates into not being certain about where to invest my attention.&lt;br /&gt;
Options like more content, more integration with other aspects, better code all pull in different directions.&lt;br /&gt;
I think that if I better understood my own intentions I would have the ability to more easily prioritize.&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-07T15:32:21.094Z</blogger:created>
    <published>2020-08-07T16:15:00.001Z</published>
    <updated>2020-08-07T16:15:09.359Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/where-to-invest-my-efforts.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5961585272762685913</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Medical knowledge as a probabilistic decision tree</title>
    <content type='html'>&lt;p&gt;Medical reasoning can sound like a large decision tree ("if this then that"). This post documents the nuances that render a decision tree data structure inadequate.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;Nuances about input data&lt;/i&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Extracting facts relevant to diagnosis is challenging.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;A parent of an infant may report their baby is not eating much, but does that mean the baby is refusing food, sleepy, crying, vomiting...&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Looking merely at the current symptoms is inadequate. Patient history matters. Family history can matter.&lt;/li&gt;&lt;li&gt;distinguishing irrelevant information is important. Temporal correlation does not mean causation.&lt;/li&gt;&lt;li&gt;There are varying degrees of uncertainty about data quality. For example, I would discount the data from a person who does not tell their story well, and put a greater weight on a lab test. But for someone who tells their story well, the history features may sway more than their lab.&amp;nbsp;&lt;/li&gt;&lt;li&gt;How questions get asked matter&lt;/li&gt;&lt;ul&gt;&lt;li&gt;"Does your family have a history of arrhythmia?" will get a "no," but&lt;/li&gt;&lt;ul&gt;&lt;li&gt;"Have people in your family drowned or died in a car accident?" would get a yes because arrhythmia can lead to drowning and accidents.&lt;/li&gt;&lt;li&gt;"did any babies in the family have hearing problems?"&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;Patients don't know the precise medical jargon&lt;/li&gt;&lt;ul&gt;&lt;li&gt;"Does your family have a history heart attacks?" is likely actually a different medical cause when the patient doesn't know the jargon or the specifics about cholesterol.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Humans are not uniform, and the differences can matter.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;"male versus female" isn't an easy binary in all cases&lt;/li&gt;&lt;li&gt;"age" isn't a scalar positive number&lt;/li&gt;&lt;ul&gt;&lt;li&gt;age since birth ("post-gestational age")&lt;/li&gt;&lt;li&gt;age since conception ("gestational age")&lt;/li&gt;&lt;li&gt;cognitive ability versus temporal age versus physical dexterity&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;ul&gt;&lt;/ul&gt;&lt;li&gt;Decisions&lt;/li&gt;&lt;ul&gt;&lt;li&gt;A lot of the reasoning is probabilistic rather than definitive. The exact probabilities are also unknown -- one is dealing with relative probabilities.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Discarding data should be weighted by the consequence of removing the data&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Causal explanations based on physiology can be used to discard information, or give insight about additional symptoms to ask about. [Writing down all of physiology is a separate task.]&lt;/li&gt;&lt;li&gt;The differential list should include not only a ranking of most likely diagnoses but also diagnoses that one should not miss.
This is one area where some doctors say that doctors are better than nurse practitioners. The nurse practitioner tells the patient the most likely diagnosis, but the doctor knows other diagnoses that are less likely, but should not be missed and counsel accordingly. In other words, just guessing based on a "most likely" diagnosis is insufficient. Are there "do not miss" outcomes that could be explanatory for the diagnosis?&lt;/li&gt;&lt;li&gt;Suggestions for action by the patient includes, "what to do if this other symptom arises" or "what to do if this symptom persists"&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://en.wikipedia.org/wiki/Expert_system#Disadvantages"&gt;https://en.wikipedia.org/wiki/Expert_system#Disadvantages&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The clinical decision analysis using decision tree&lt;/div&gt;&lt;div&gt;doi&amp;nbsp;10.4178/epih/e2014025&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4251295/"&gt;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4251295/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-02-05T00:32:44.492Z</blogger:created>
    <published>2023-02-05T00:41:00.010Z</published>
    <updated>2023-02-05T01:14:13.228Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2023/02/medicine-as-probabilistic-decision-tree.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-5997078710136464098</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>lesson learned about triggers for when to save and commit to git repo</title>
    <content type='html'>Historically I've been committing changes to git whenever I complete a feature. That has worked because 1) I haven't lost any data and 2) the window for losing data was small because the features were minor.&lt;br /&gt;
&lt;br /&gt;
Earlier this week I was working on implementing logins. That feature is complicated and involves lots of copy-pasting code from various sites to see what works. After a few hours I somehow typed a command in vim that deleted the first 100 lines of a 1000 line Python script. I didn't notice my mistake until I re-opened the file, at which point the backup file was already removed so my recovery using that approach was unavailable.&lt;br /&gt;
&lt;br /&gt;
Because the feature of logins hadn't been completed, I lost about 4 hours of work. I was able to recover most of the missing 100 lines from the file from the previous git commit, but all the changes associated with logins had to be recreated.&lt;br /&gt;
&lt;br /&gt;
The lesson I learned is that my trigger condition for committing to the git repo needed to be adapted to the change in feature size. Previously a feature took no more than an hour, so committing per-feature made sense. In the future I will try to commit every 20 to 30 minutes, even if the feature is incomplete.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-18T21:17:33.858Z</blogger:created>
    <published>2020-04-18T21:32:00.001Z</published>
    <updated>2020-04-18T21:32:15.180Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='mistake'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lessons learned'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='save'/>
    <blogger:filename>/2020/04/lesson-learned-about-triggers-for-when.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6002007582019380612</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>what are the blockers for potential contributors</title>
    <content type='html'>&lt;p&gt;need to have advanced domain expertise&lt;/p&gt;&lt;p&gt;why no one is creating PDG: because Physicists are scarred by thinking in Fortran

&lt;/p&gt;&lt;p&gt;need a Physicist capable of writing modern code with clear documentation 

&lt;/p&gt;&lt;p&gt;time bounded 5 years of grad school, then busy with work and life&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-02-17T03:05:49.450Z</blogger:created>
    <published>2022-02-17T03:17:00.002Z</published>
    <updated>2022-02-17T03:17:35.667Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6028412948442889230</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>analysis of web logs to understand how users use the website</title>
    <content type='html'>Understanding how users use the website is important for improving the ease of use.&lt;br /&gt;
&lt;br /&gt;
Suppose I have 3 website users (1, 2, 3), three webpages ("A", "B", and "C"), and each user visits three pages.&lt;br /&gt;
&lt;br /&gt;
In this post I outline different data structures&amp;nbsp;available for capturing user activity.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
A matrix of pages and page visit order&lt;/h3&gt;
&lt;table border="1"&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;page A&lt;/td&gt;
    &lt;td&gt;page B&lt;/td&gt;
    &lt;td&gt;page C&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;first page&lt;/td&gt;
    &lt;td&gt;1, 2&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;second page&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;3, 1&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;third page&lt;/td&gt;
    &lt;td&gt;1, 3&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;Here time moves from the top row towards the bottom row.&lt;div&gt;
The steps taken by a single user are easy to trace.&lt;br /&gt;&lt;div&gt;
&lt;h3&gt;
A Markov model&lt;/h3&gt;
&lt;table border="1"&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;A&lt;/td&gt;
    &lt;td&gt;B&lt;/td&gt;
    &lt;td&gt;C&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;A&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;B&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;C&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;
A list per user&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
user 1: [A, B, A]&lt;/div&gt;
&lt;div&gt;
user 2: [A, C, B]&lt;/div&gt;
&lt;div&gt;
user 3: [C, B, A]&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Same information as present in the matrix.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
Here time moves left-to-right&lt;/div&gt;
&lt;div&gt;
The list length can vary per user.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
List of tuples per user&lt;/h3&gt;
&lt;div&gt;
As a modification to the list, each element could include the page name, the render time, and the dwell time:&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
user 1: [(A, 0.2, 55), (B, 0.3, 20), (A, 0.4, 126)]&lt;/div&gt;
&lt;div&gt;
user 2: [(A, 0.1, 65), (C, 0.2, 234), (B, 0.4, 23)]&lt;/div&gt;
&lt;div&gt;
user 3: [(C, 0.3, 15), (B, 0.1, 53), (A, 0.3, 45)]&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-27T17:36:35.969Z</blogger:created>
    <published>2020-04-27T18:01:00.001Z</published>
    <updated>2020-04-27T18:01:08.769Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/analysis-of-web-logs-to-understand-how.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6098779109076116008</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>how to edit the SymPy Latex parser and rebuild the antlr artifacts for a pull request</title>
    <content type='html'>https://github.com/sympy/sympy/wiki/Development-workflow#fork-sympy-project&lt;br /&gt;
&lt;br /&gt;
Go to&amp;nbsp;&lt;a href="https://github.com/sympy/sympy"&gt;https://github.com/sympy/sympy&lt;/a&gt;&lt;br /&gt;
Fork to&amp;nbsp;&lt;a href="https://github.com/bhpayne/sympy/"&gt;https://github.com/bhpayne/sympy/&lt;/a&gt;&lt;br /&gt;
In&amp;nbsp;&lt;a href="https://github.com/bhpayne/sympy/"&gt;https://github.com/bhpayne/sympy/&lt;/a&gt;&amp;nbsp;create a new branch, e.g. "floor-patch"&lt;br /&gt;
In the bhpayne/sympy:floor-patch branch, change three files&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bhpayne/sympy/blob/floor-patch/sympy/parsing/latex/LaTeX.g4"&gt;https://github.com/bhpayne/sympy/blob/floor-patch/sympy/parsing/latex/LaTeX.g4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bhpayne/sympy/blob/floor-patch/sympy/parsing/latex/_parse_latex_antlr.py"&gt;https://github.com/bhpayne/sympy/blob/floor-patch/sympy/parsing/latex/_parse_latex_antlr.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bhpayne/sympy/blob/floor-patch/sympy/parsing/tests/test_latex.py"&gt;https://github.com/bhpayne/sympy/blob/floor-patch/sympy/parsing/tests/test_latex.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
Then, in a local directory run&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mkdir build_sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd build_sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;git clone&amp;nbsp;&lt;a href="https://github.com/bhpayne/sympy/"&gt;https://github.com/bhpayne/sympy/&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
I use a Docker container to build SymPy&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; Dockerfile&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;FROM phusion/baseimage:0.11&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN apt-get update &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; apt-get install -y \&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;vim \&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;python3&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;python3-pip&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;python3-dev \&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;wget \&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;default-jre \&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;WORKDIR /usr/local/lib&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN curl -O https://www.antlr.org/download/antlr-4.7.2-complete.jar&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;COPY sympy/ /opt/&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN echo "alias python=python3" &amp;gt; /root/.bashrc&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN ln -s /usr/bin/python3.6 /usr/bin/python&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;# import the pip package for integration of grammar with Python&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN pip3 install antlr4-python3-runtime mpmath&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;# build antlr grammar&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;WORKDIR /opt/sympy/parsing/latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ENV CLASSPATH=".:/usr/local/lib/antlr-4.7.2-complete.jar:$CLASSPATH"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN java -jar /usr/local/lib/antlr-4.7.2-complete.jar LaTeX.g4 -no-visitor -no-listener -o _antlr&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;# from msgoff&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;COPY rename.py /opt/sympy/parsing/latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN python3 rename.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;# set up Sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;WORKDIR /opt/&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;RUN python3 setup.py install&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;EOF&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
A second file, created by msgoff, is used for the Antlr build process&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; rename.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;import glob&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;import os&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;output_dir = "_antlr"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;for path in glob.glob(os.path.join(output_dir, "LaTeX*.*")) + glob.glob(&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; os.path.join(output_dir, "latex*.*")):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; offset = 0&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; new_path = os.path.join(output_dir, os.path.basename(path).lower())&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; with open(path, "r") as f:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; lines = [line.rstrip() + "\n" for line in f.readlines()]&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; os.unlink(path)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; with open(new_path, "w") as out_file:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if path.endswith(".py"):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; offset = 2&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out_file.write(header)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out_file.writelines(lines[offset:])&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;EOF&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;
Inside the container,
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd&amp;nbsp;/scratch/sympy/sympy/parsing/latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;java -jar /usr/local/lib/antlr-4.7.2-complete.jar LaTeX.g4 -no-visitor -no-listener -o _antlr&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;python rename.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;Now rebuild sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;/scratch/sympy/&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;python setup.py install&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;leave the container&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;exit&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;On the host, add the build artifacts for Antlr&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd sympy/&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;git status&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;git add&amp;nbsp;sympy/parsing/latex/_antlr/latexlexer.py&amp;nbsp;sympy/parsing/latex/_antlr/latexparser.py&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;h3&gt;
&lt;span style="font-family: inherit;"&gt;Testing&lt;/span&gt;&lt;/h3&gt;
&lt;span style="font-family: inherit;"&gt;&lt;a href="https://github.com/sympy/sympy/wiki/Running-tests"&gt;https://github.com/sympy/sympy/wiki/Running-tests&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.test()&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;takes 2 hours on my MacBook Air&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;The relevant test is&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.test("sympy/parsing/tests/test_latex.py")&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-16T20:21:16.375Z</blogger:created>
    <published>2020-08-16T20:35:00.002Z</published>
    <updated>2020-08-22T13:47:40.288Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/how-to-edit-sympy-latex-parser-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6136112231643730712</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>graph visualization isn't a requirement for the Physics Derivation Graph</title>
    <content type='html'>The central concept of the Physics Derivation Graph is that there are mathematical links between expressions. This means that navigating the content can be intuitively done using a graph. However, navigating a graph visually doesn't scale well.&lt;br /&gt;
&lt;br /&gt;
The Physics Derivation Graph doesn't have to be presented as a graph. A derivation is typically presented in a linear format.&lt;br /&gt;
&lt;br /&gt;
Storing the content of the Physics Derivation Graph does not require a graph storage database.</content>
    <blogger:metaDescription/>
    <blogger:created>2016-09-01T13:31:44.913Z</blogger:created>
    <published>2016-09-01T13:37:00Z</published>
    <updated>2016-09-01T13:37:08.638Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='visualization'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='graph'/>
    <blogger:filename>/2016/09/graph-visualization-isnt-requirement.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6176212531748476221</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>spectrum of formalized scientific documentation</title>
    <content type='html'>&lt;p&gt;This post is an expansion of &lt;a href="https://physicsderivationgraph.blogspot.com/2020/07/degrees-of-formalization-in-math.html"&gt;July 2020 post&lt;/a&gt; which was informed by &lt;a href="https://physicsderivationgraph.blogspot.com/2020/07/notes-from-cicm-2020-13th-conference-on.html"&gt;Kaliszyk's survey&lt;/a&gt;.

&lt;/p&gt;&lt;p&gt;Spectrum of formality:&lt;/p&gt;&lt;div&gt;
&lt;table border="1"&gt;
   &lt;tbody&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;i&gt;category&lt;/i&gt;&lt;/td&gt;
  &lt;td&gt;verbal natural language&lt;/td&gt;
  &lt;td&gt;verbal presentation with aids&lt;/td&gt;
  &lt;td&gt;written text&lt;/td&gt;
  &lt;td&gt;semantic enrichment&lt;/td&gt;
  &lt;td&gt;human-oriented controlled natural languages&lt;/td&gt;
  &lt;td&gt;machine-oriented controlled natural languages&lt;/td&gt;
  &lt;td&gt;computer algebra systems&lt;/td&gt;
  &lt;td&gt;proof assistants, theorem provers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;i&gt;media&lt;/i&gt;&lt;/td&gt;
  &lt;td&gt;human speaking&lt;/td&gt;
  &lt;td&gt;human speaking; Latex containing text and equations -- Beamer&lt;/td&gt;&lt;td&gt;Latex containing text and equations and hyperlinks&lt;/td&gt;
  &lt;td&gt;Latex containing text and equations and hyperlinks;&lt;br /&gt;sTex&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://arxiv.org/abs/1806.01507"&gt;AIDA&lt;/a&gt;, &lt;a href="http://attempto.ifi.uzh.ch/site/"&gt;ACE&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;i&gt;text&lt;/i&gt;: RDF, &lt;a href="https://www.w3.org/OWL/"&gt;OWL&lt;/a&gt;&lt;br /&gt;&lt;i&gt;mathematical physics&lt;/i&gt;: &lt;a href="https://derivationmap.net/"&gt;Physics Derivation Graph&lt;/a&gt;&lt;br /&gt;&lt;i&gt;math&lt;/i&gt;:&amp;nbsp;&lt;a href="http://nevidal.org/sad.en.html"&gt;ForTheL&lt;/a&gt;,&amp;nbsp;&lt;a href="http://mizar.org/language/mizar-grammar.xml"&gt;Mizar&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://coq.inria.fr/"&gt;Coq&lt;/a&gt;, &lt;a href="https://leanprover.github.io/"&gt;Lean&lt;/a&gt;, &lt;a href="https://isabelle.in.tum.de/"&gt;Isabelle&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;i&gt;purpose&lt;/i&gt;&lt;/td&gt;
  &lt;td&gt;social knowledge transfer, one-to-one&lt;/td&gt;
  &lt;td&gt;social knowledge transfer, one-to-many&lt;/td&gt;
  &lt;td&gt;human readers; text search&lt;/td&gt;
  &lt;td&gt;human readers; semantic search&lt;/td&gt;
  &lt;td&gt;consistency validation of logical claims&lt;/td&gt;
  &lt;td&gt;inference of novel knowledge&lt;/td&gt;
  &lt;td&gt;correctness of inference rules; dimensional consistency; unit consistency&lt;/td&gt;
  &lt;td&gt;mathematical correctness (consistency wrt a logical basis)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;i&gt;grouping&lt;/i&gt;&lt;/td&gt;
  &lt;td colspan="3" style="text-align: center;"&gt;standard practice&lt;/td&gt;
  &lt;td colspan="3" style="text-align: center;"&gt;knowledge representation&lt;/td&gt;
  &lt;td colspan="2" style="text-align: center;"&gt;mathematical correctness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;i&gt;techniques&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;br /&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://github.com/wtsnjp/MioGatto/wiki/Annotator's-Guide"&gt;manual annotation&lt;/a&gt;; supervised machine learning&lt;/td&gt;
  &lt;td colspan="2"&gt;needs vocabulary and grammar:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="http://mizar.org/language/vocabularies.html"&gt;Mizar vocab&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="http://nevidal.org/download/forthel.pdf"&gt;ForTheL grammar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://derivationmap.net/design_documentation?referrer=PDG_blog#CNL%20grammar"&gt;PDG grammar&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
      &lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
     
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Left side of the spectrum is less rigorous, right side is more rigorous.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Left side of the spectrum has higher &lt;a href="https://www.cs.ru.nl/~freek/factor/"&gt;de Bruijn factor&lt;/a&gt;, right side has lower de Bruijn factor. &lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;The Physics Derivation Graph is a machine-oriented controlled natural language that is integrated with a computer algebra system.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Semantic tagging can relate definitions for terms within a document to the associated variables used in that document.&amp;nbsp;&lt;br /&gt;The motive for the semantic tagging is to enhance search-ability. Since search-ability doesn't benefit the author, the author is not motivated to do the work of tagging.&lt;/p&gt;&lt;p&gt;Semantic tagging can identify common words across documents in a corpus. OWL is interesting conceptually but since the author doesn't benefit, the author is not motivated to do the work of linking.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgXAtznwPTFW0eFTbok5O5-accROnFOPo4UoWLkRCKN5rdKiO55xTiBj4pQ_3ZYzr1dCAHsVgfke4LT1vcARkqIEZ-DO1QBByv1aICiqysAGEgxPhkOTYBF1z3l0E2qs00BfK3gdpd8RQ8ceR9SvEo8j0c3Qh_bfQqxFL4EmijSHqnYkPE5c7uaVrYdRA/s1350/Screen%20Shot%202023-05-06%20at%201.51.02%20PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="745" data-original-width="1350" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgXAtznwPTFW0eFTbok5O5-accROnFOPo4UoWLkRCKN5rdKiO55xTiBj4pQ_3ZYzr1dCAHsVgfke4LT1vcARkqIEZ-DO1QBByv1aICiqysAGEgxPhkOTYBF1z3l0E2qs00BfK3gdpd8RQ8ceR9SvEo8j0c3Qh_bfQqxFL4EmijSHqnYkPE5c7uaVrYdRA/s16000/Screen%20Shot%202023-05-06%20at%201.51.02%20PM.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-07T21:38:11.608Z</blogger:created>
    <published>2021-08-07T23:03:00.004Z</published>
    <updated>2023-05-06T17:52:14.398Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/08/spectrum-of-formalized-scientific.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6182390690480794920</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>initial setup of docker and docker-compose on digialocean</title>
    <content type='html'>I registered an account and paid $5 using Paypal to get a droplet.&lt;br /&gt;
&lt;br /&gt;
I registered my SSH key.&lt;br /&gt;
&lt;br /&gt;
I wanted to run docker-compose. The instructions for&lt;br /&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-18-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-18-04&lt;/a&gt;&lt;br /&gt;
led me to&lt;br /&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04"&gt;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04&lt;/a&gt;&lt;br /&gt;
where I logged in as root and set up a new user. I was then able to SSH in as the new user.&lt;br /&gt;
&lt;br /&gt;
Then I completed the instructions for the Docker installation, including adding the non-root user to the docker group.&lt;br /&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Finally I was able to complete the docker-compose instructions&lt;br /&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-18-04"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-18-04&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Total time from initial registration to having docker-compose working: 25 minutes.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-24T02:31:17.729Z</blogger:created>
    <published>2020-04-24T02:41:00.001Z</published>
    <updated>2020-04-24T02:41:32.666Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/initial-setup-of-docker-and-docker.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6219001525745105979</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>my reaction to the QED manifesto</title>
    <content type='html'>The &lt;a href="https://en.wikipedia.org/wiki/QED_manifesto"&gt;QED manifesto&lt;/a&gt; states a moral vision for the field of mathematics.&amp;nbsp; The vision is for moving from human-based knowledge management towards machine assisted knowledge management. The process initially relied on oral storytelling, then use of paper, and now a computers, for sharing insights enables progress.&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Claim&lt;/i&gt;: the vision of QED can be realized in Physics now.&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;i&gt;Now&lt;/i&gt;&lt;/b&gt; because technology has decreased the cost of implementation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;i&gt;Physics&lt;/i&gt;&lt;/b&gt; because experiments are the arbiter of validity.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
What remains the same is individual and institutional incentives.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Physicist have historically gotten away with human-mediated storytelling of quantitative relations.&amp;nbsp;What we currently use (.tex) is a machine parsable version of oral transmission. Comprehension does not scale well given the complexity of the subject.&lt;br /&gt;
&lt;br /&gt;
One outcome is that if physicist continue with the current approach of human-mediated storytelling of quantitative relations, we risk selecting smaller and smaller sets of individuals capable of advancing the field, as well as requiring narrower specialization. Another outcome is decreasing transparency for external consumers.
&lt;br /&gt;
&lt;br /&gt;
To make progress towards the vision described in the QED manifesto, break the objective into tangible milestones. Each technical change is also a cultural change that requires individual participants to evaluate the trade-off of value.
Technology change also can manifest as change to an interface/workflow.&amp;nbsp;
Change can be minor or revolutionary. The more revolutionary, the more value is required. Value can be a result of creativity (Tex, doi) or investment of resources (arxiv).&amp;nbsp;
&lt;br /&gt;
&lt;br /&gt;
Milestones enabling the QED vision:
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;Symbol registry using Godel numbers. Improves reader's ability to compare content.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Expression registry (presentation) using Godel numbers. Improves reader's ability to compare content.&lt;br /&gt;
These two registries form a Physics catalog. The catalog lacks value beyond lateral comparison. Both registries help the reader, not the author. The author has no incentive to invest extra work that does not benefit them. (This is the tragedy of the commons.)&lt;/li&gt;
&lt;li&gt; Connective explanation (story). An appendix for derivation. Author shows their work to ease the readers burden. Improves reproducibility
&lt;/li&gt;
&lt;li&gt; Interference rule registry (math)
&lt;/li&gt;
&lt;li&gt; Formal expressions registry (math) per presentation
&lt;/li&gt;
&lt;li&gt; Validation of steps&amp;nbsp;
&lt;/li&gt;
&lt;/ol&gt;
Both formal expressions and validation requires significant effort by author or machine. Specific to and limited by selection of CAS. Again, value is mostly low. Does serve as filter for crackpot content.&amp;nbsp;
&lt;br /&gt;
&lt;br /&gt;
All of these milestones are present in the Physics Derivation Graph. This perspective of milestones is useful for segmenting the PDG barrier into constituent barriers. Each milestone has to have clear incentives for users to justify investment.&lt;br /&gt;
&lt;br /&gt;
Registries are the opposite of (local) content dictionaries in openMath.&lt;br /&gt;
Model: doi, orchid&lt;br /&gt;
&lt;br /&gt;
Each registry requires perpetual hosting and public accessibility.&lt;br /&gt;
Models: arxiv,
&lt;br /&gt;
&lt;br /&gt;
Individual researchers would only participate as authors of content if they expect that their investment results in a durable product that is used by the rest of their community. Their individual work also needs to be tied to employment incentive structures or reduce existing suffering. Reduction of individual suffering can be by increasing effectiveness or increasing efficiency.&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-27T18:35:12.748Z</blogger:created>
    <published>2020-07-27T18:45:00.002Z</published>
    <updated>2020-07-27T18:45:49.578Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/my-reaction-to-qed-manifesto.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6219753228365608559</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>significant challenges feel like emotional barriers to progress</title>
    <content type='html'>The current form of the Physics Derivation Graph has served to validate my claim of feasibility. There are a number of&amp;nbsp;significant challenges that inhibit scalability, regardless of whether I generate more content or other people contribute.&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Input complexity&lt;/b&gt;: the current multi-step webform process is tedious and burdensome. There are&amp;nbsp;many steps, resulting in a burdensome workload for both the backend developer (many features are necessary) and the front-end user (using all those features). Alternative interaction mechanisms are technically feasible but not in my current skillset.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Display complexity&lt;/b&gt;: the graph with hundreds of nodes exceeds the ability to visually navigate given the current d3.js and Graphviz interfaces. Rendering the graph in 3D might help, but the readability of node labels is important.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Limited ability to query&lt;/b&gt;: the graph is presented visually but lacks support for responding to user queries. Currently writing custom analysis scripts that read the JSON is the only access.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use correct symbol IDs&lt;/b&gt;: the current JSON database is populated with incorrect symbol references and a mixture of SymPy+text symbols.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Validation of steps&lt;/b&gt;: the current JSON database is populated with incorrect&amp;nbsp;steps. Inference rules are used but either are not feasible in SymPy or are implemented incorrectly.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Validation of dimension&lt;/b&gt;: after correcting the symbols and the steps, each expression needs to be verified to have the correct dimension.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
The last three are listed in dependency order. The symbols need to be fixed, then validation of steps and dimension are possible.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I don't currently have attacks planned on either display complexity or query capability.&amp;nbsp;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;My current task list&lt;/i&gt;:&lt;br /&gt;
&lt;div dir="auto"&gt;
&lt;ul&gt;
&lt;li&gt;Correct the symbol IDs in data.json&lt;/li&gt;
&lt;li&gt;Change layout of expression input table to distinguish input, output, and feed relation to inference rule&lt;/li&gt;
&lt;li&gt;add capability to edit SymPy from web interface&lt;/li&gt;
&lt;li&gt;functionally, separate symbol replacement from expression-as-sympy. For the web interface, insert new steps: Latex math expression -&amp;gt; symbols -&amp;gt; SymPy&amp;nbsp;expression&lt;/li&gt;
&lt;li&gt;web interface for reviewing correctness of Latex -&amp;gt; SymPy&amp;nbsp;-&amp;gt; Latex for expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-23T17:03:43.319Z</blogger:created>
    <published>2020-08-23T17:16:00.001Z</published>
    <updated>2020-08-23T18:40:26.604Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/significant-challenges-feel-like.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6225080442663241850</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>background tasks - considering celery+rabbitmq, rq with redis</title>
    <content type='html'>Currently the first access to the "editor" page incurs a significant delay while pictures are generated in the background. While this task only runs the first time and could be moved elsewhere in the code to distribute the latency more evenly, I expect the need for a task queue to arise.&lt;br /&gt;
&lt;a href="https://www.fullstackpython.com/task-queues.html"&gt;https://www.fullstackpython.com/task-queues.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Celery has workers. RQ has both workers and a queue; RabbitMQ has just the queueing system. &lt;a href="https://bhavaniravi.com/blog/asynchronous-task-execution-in-python"&gt;Source&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Celery versus RQ:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;https://stackoverflow.com/a/29837939/1164295&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/learnpython/comments/czc0fl/celery_vs_rq_for_small_scale_projects/"&gt;https://www.reddit.com/r/learnpython/comments/czc0fl/celery_vs_rq_for_small_scale_projects/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
RQ is simpler and Celery has more features. RQ only works with Redis.
&lt;br /&gt;
&lt;br /&gt;
Migrating from Celery to RQ:&amp;nbsp;&lt;a href="https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq"&gt;https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-09T11:53:49.356Z</blogger:created>
    <published>2020-04-09T12:02:00.003Z</published>
    <updated>2020-04-09T12:02:59.352Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/background-tasks-considering.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6272255902608710851</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>dhparam.pem necessary for nginix web server</title>
    <content type='html'>&lt;p&gt;This morning I was alerted by&amp;nbsp;&lt;a href="https://www.wachete.com/notifications"&gt;Wachete&lt;/a&gt; that the &lt;a href="https://derivationmap.net/"&gt;derivationmap.net&lt;/a&gt; website was unavailable.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;I logged into the &lt;a href="https://www.digitalocean.com/"&gt;digitalocean.com&lt;/a&gt; virtual private server (VPS) and used &lt;code&gt;top&lt;/code&gt; to see that the container processes were running.&lt;/p&gt;

&lt;p&gt;Normally the command I run to start the Docker containers is
&lt;/p&gt;&lt;pre&gt;docker-compose up --build --force-recreate --remove-orphans --detach
&lt;/pre&gt;

&lt;p&gt;To troubleshoot, I ran
&lt;/p&gt;&lt;pre&gt;docker-compose up --build --force-recreate --remove-orphans
&lt;/pre&gt;
&lt;p&gt;and the output was
&lt;/p&gt;&lt;pre&gt;Successfully built 0ffaac97e769
Successfully tagged v7_pickle_web_interface_nginx:latest
Recreating v7_pickle_web_interface_flask_1 ... done
Recreating v7_pickle_web_interface_nginx_1 ... done
Attaching to v7_pickle_web_interface_flask_1, v7_pickle_web_interface_nginx_1
nginx_1  | 2021/07/10 11:48:41 [emerg] 1#1: PEM_read_bio_DHparams("/certs/dhparam.pem") failed (SSL: error:0909006C:PEM routines:get_name:no start line:Expecting: DH PARAMETERS)
nginx_1  | nginx: [emerg] PEM_read_bio_DHparams("/certs/dhparam.pem") failed (SSL: error:0909006C:PEM routines:get_name:no start line:Expecting: DH PARAMETERS)
v7_pickle_web_interface_nginx_1 exited with code 1
&lt;/pre&gt;

&lt;p&gt;The fix was to point nginix to the dhparam.pem file.&lt;/p&gt;&lt;p&gt;&lt;a href="https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"&gt;https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-07-10T11:58:47.557Z</blogger:created>
    <published>2021-07-10T12:07:00.005Z</published>
    <updated>2021-07-10T12:07:43.681Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/07/dhparampem-necessary-for-nginix-web.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6277175251523997153</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>docker - no space left on device</title>
    <content type='html'>When Docker runs out of space, the error messages can be misleading.&lt;br /&gt;
&lt;br /&gt;
&lt;pre&gt;docker images | grep "&amp;lt;none&amp;gt;                              &amp;lt;none&amp;gt;" | tr -s " " | cut -d' ' -f3 | xargs docker rmi -f
&lt;/pre&gt;
&lt;br /&gt;
&lt;pre&gt;docker image prune -f
&lt;/pre&gt;
&lt;br /&gt;
&lt;pre&gt;docker rm $(docker ps -q -f 'status=exited')
&lt;/pre&gt;
&lt;br /&gt;
&lt;pre&gt;docker rmi $(docker images -q -f "dangling=true")
&lt;/pre&gt;
&lt;br /&gt;
&lt;pre&gt;docker system prune
&lt;/pre&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://domm.plix.at/perl/2020_06_docker_prune_volumes_by_label.html"&gt;https://domm.plix.at/perl/2020_06_docker_prune_volumes_by_label.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://news.ycombinator.com/item?id=23571953"&gt;https://news.ycombinator.com/item?id=23571953&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-06-20T13:56:37.973Z</blogger:created>
    <published>2020-06-20T13:56:00.001Z</published>
    <updated>2020-06-21T02:28:46.484Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/06/docker-no-space-left-on-device.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6305085484986984190</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>MONTEREY PHOENIX model checker</title>
    <content type='html'>&lt;p&gt;In this blog post I discuss a model involving two actors: a car and a driver. Each actor has an associated set of actions they can take.&lt;/p&gt;&lt;p&gt;For a video walkthrough of this code, see&amp;nbsp;&lt;a href="https://youtu.be/r6aPKem6WLs"&gt;https://youtu.be/r6aPKem6WLs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Using the web interface &lt;a href="https://firebird.nps.edu/"&gt;https://firebird.nps.edu/&lt;/a&gt;, run this model
&lt;/p&gt;&lt;pre style="text-align: left;"&gt;SCHEMA using_a_car /* model title */

/* Actor Behaviors */

/* purple text is an MP keyword,
   actors are green text,
   atomic events are blue */

/* with space as the separator, 
   the events (blue) are an ordered sequence */

ROOT Driver: enters_car 
             starts_car
             move_forward turn_left turn_right 
             stops_car
             exits_car;

ROOT Car: off
          starting 
          running_idle
          move_forward
          turn_left
          turn_right
          shutting_down;
&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;

Introduce branching logic&lt;/h2&gt;&lt;pre style="text-align: left;"&gt;SCHEMA using_a_car /* model title */

/* Actor Behaviors */

/* purple text is an MP keyword,
   actors are green text,
   atomic events are blue,
   composit events are orange */

/* 
      ( A | B ) are alternative events 
*/

ROOT Driver: enters_car &lt;span style="color: red;"&gt;&lt;b&gt;(starts_car | exits_car);
starts_car:&lt;/b&gt;&lt;/span&gt;  move_forward turn_left turn_right 
             stops_car
             exits_car;

ROOT Car: off
          starting 
          running_idle
          move_forward
          turn_left
          turn_right
          shutting_down;
&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;

Events among actors are coordinated

&lt;/h2&gt;&lt;pre style="text-align: left;"&gt;SCHEMA using_a_car /* model title */

/* Actor Behaviors */

/* purple text is an MP keyword,
   actors are green text,
   atomic events are blue,
   composit events are orange */

ROOT Driver: enters_car (starts_car | exits_car);
starts_car:  move_forward turn_left turn_right 
             stops_car
             exits_car;

ROOT Car: off
          starting 
          running_idle
          move_forward
          turn_left
          turn_right
          shutting_down;

/* the two processes are related by specific events */

&lt;b&gt;&lt;span style="color: red;"&gt;COORDINATE
$a: starts_car FROM Driver,
$b: starting FROM Car
DO
ADD $a PROCEEDS $b;
OD;

COORDINATE
$a: stops_car FROM Driver,
$b: shutting_down FROM Car
DO
ADD $a PROCEEDS $b;
OD;
&lt;/span&gt;&lt;/b&gt;&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;

Actors may take zero or more actions

&lt;/h2&gt;&lt;pre style="text-align: left;"&gt;SCHEMA using_a_car /* model title */

/* Actor Behaviors */

/* purple text is an MP keyword,
   actors are green text,
   atomic events are blue,
   composit events are orange */

/* 
    {* *} is an unordered set of zero or more events 
*/

ROOT Driver: enters_car (starts_car | exits_car);
starts_car:  &lt;b&gt;&lt;span style="color: red;"&gt;{* ( move_forward | 
                  turn_left | 
                  turn_right ) *}&lt;/span&gt;&lt;/b&gt;
             stops_car
             exits_car;

ROOT Car: off
          starting 
          running_idle
&lt;b&gt;&lt;span style="color: red;"&gt;          {* ( move_forward | 
               turn_left | 
               turn_right ) *}&lt;/span&gt;&lt;/b&gt;
          shutting_down;

COORDINATE
$a: starts_car FROM Driver,
$b: starting FROM Car
DO
ADD $a PROCEEDS $b;
OD;

COORDINATE
$a: stops_car FROM Driver,
$b: shutting_down FROM Car
DO
ADD $a PROCEEDS $b;
OD;
&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;

Events are shared among actors

&lt;/h2&gt;&lt;pre&gt;SCHEMA using_a_car /* model title */

/* Actor Behaviors */

/* purple text is an MP keyword,
   actors are green text,
   atomic events are blue,
   composit events are orange */

ROOT Driver: enters_car (starts_car | exits_car);
starts_car:  {* ( move_forward | 
                  turn_left | 
                  turn_right ) *}
             stops_car
             exits_car;

ROOT Car: off
          starting 
          running_idle
          {* ( move_forward | 
               turn_left | 
               turn_right ) *}
          shutting_down;

&lt;b&gt;&lt;span style="color: red;"&gt;Driver, Car SHARE ALL move_forward, 
                      turn_left, 
                      turn_right;&lt;/span&gt;&lt;/b&gt;

COORDINATE
$a: starts_car FROM Driver,
$b: starting FROM Car
DO
ADD $a PROCEEDS $b;
OD;

COORDINATE
$a: stops_car FROM Driver,
$b: shutting_down FROM Car
DO
ADD $a PROCEEDS $b;
OD;
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-12-18T20:43:19.545Z</blogger:created>
    <published>2022-12-18T20:44:00.002Z</published>
    <updated>2022-12-19T01:18:37.954Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='model checking'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='MONTEREY PHOENIX'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='formal methods'/>
    <blogger:filename>/2022/12/monterey-phoenix-model-checker.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6316840269068477995</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>chain of custody for formally-verified software</title>
    <content type='html'>&lt;p&gt;Relating disparate sources of knowledge in science involves:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Formally-verified Mathematical Physics (e.g., in Lean). &lt;i&gt;Purpose&lt;/i&gt;: verify the mathematical model is consistent with specified axioms.&lt;/li&gt;&lt;li&gt;Formally-verified software; see&amp;nbsp;&lt;a href="https://physicsderivationgraph.blogspot.com/2022/10/tla-comparison.html"&gt;https://physicsderivationgraph.blogspot.com/2022/10/tla-comparison.html&lt;/a&gt;&amp;nbsp;for a list.&lt;/li&gt;&lt;li&gt;Performant parallelized software (e.g., MPI + OpenMP + Fortran or C/C++) for High Performance Computing (HPC).&lt;/li&gt;&lt;li&gt;Peer-reviewed journal articles, e.g., arxiv; rendered using Latex. [Of the four, this has historically been closest to the focus of the Physics Derivation Graph.]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Each of these content sources are independent and involve expressing a mathematical model in different ways.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;While kernels of mathematical models can be implemented in formally-verified software, a lot of scientific computing uses High Performance Computing (HPC). In the HPC realm the compilers and libraries and runtimes can all be sources of bugs.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Need to compile or interpret software with a verified compiler or interpreter.&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;How can the consistency of content across sources be ensured?&amp;nbsp;&lt;/h3&gt;&lt;p&gt;There are 6 bilateral transitions for the 4 sources. For example, how does the model transition between theorem prover (e.g., Lean) and formally-verified software implementation?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3 style="text-align: left;"&gt;Another possible issue: provenance&lt;/h3&gt;&lt;p&gt;May need to track provenance of the source code to binaries. Is the verified algorithm what was provided to the compiler? Is the binary I'm currently using related to the compiler output? Need to be able to distinguish "binary I don't know the origin of" from "binary that has a known chain of custody."&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;This could be just a log of hashes coupled to metadata for the "where did this come from." The provenance needs to include versions for compilers and libraries and runtimes. The binary should be reproducible. See&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Reproducible_builds"&gt;https://en.wikipedia.org/wiki/Reproducible_builds&lt;/a&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-10T01:20:11.621Z</blogger:created>
    <published>2023-06-12T00:53:00.003Z</published>
    <updated>2023-06-12T00:53:50.339Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='formal methods'/>
    <blogger:filename>/2023/06/chain-of-custody-for-formally-verified.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6340985072130307341</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>The PDG is hierarchical</title>
    <content type='html'>&lt;div class="p1"&gt;
&lt;span class="s1"&gt;Physics derivation graph is hierarchical:&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Symbol, operators&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Expressions, inference rules&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Step&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Derivation&lt;/li&gt;
&lt;li&gt;PDG&lt;/li&gt;
&lt;/ul&gt;
This can probably be used for visualization, determining storage format&lt;br /&gt;
&lt;br /&gt;
The PDG is a directed hypergraph.</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-14T01:41:59.653Z</blogger:created>
    <published>2015-09-14T01:43:00Z</published>
    <updated>2015-10-17T11:15:45.875Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/the-pdg-is-hierarchical.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6356977607304673456</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>updated task list for August 2019: SQL, arxiv</title>
    <content type='html'>Since posting &lt;a href="https://physicsderivationgraph.blogspot.com/2019/05/task-list.html"&gt;my previous task list&lt;/a&gt; in May I made good progress with Docker and a Flask-based web interface. The Flask web interface progressed far enough that I need to connect the front end with the SQL database backend. Listing out next steps,&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;The SQL database needs to be connected to the Flask-based web frontend&lt;/li&gt;
&lt;li&gt;The SQL database needs to be populated with content from the CSVs (expressions and inference rules and derivations in version 6)&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;
A colleague found that Latex source for arxiv articles is available &lt;a href="https://arxiv.org/help/bulk_data_s3"&gt;in bulk in S3 buckets&lt;/a&gt;. As an alternative to S3 arxiv points to a subset that's available without going through AWS: &lt;a href="https://www.cs.cornell.edu/projects/kddcup/datasets.html"&gt;https://www.cs.cornell.edu/projects/kddcup/datasets.html&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
The value of having a large number of expressions in Latex is that we could use the expressions to predict what a user wants to enter, decreasing the amount of manual entry required. Also, if a derivation contains similar expressions to what exists in the arxiv content, we could investigate whether the derivation is related to the arxiv paper.&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2019-08-09T14:36:58.224Z</blogger:created>
    <published>2019-08-09T15:01:00Z</published>
    <updated>2020-05-27T12:18:02.549Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/08/updated-task-list-for-august-2019.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6366418702232624123</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>task list for SQL and Docker and Flask</title>
    <content type='html'>Ordered tasks below. None of these tasks are extraordinary.&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Convert database from CSV files to single .sqlite3 database.&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;&lt;ul&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;li&gt;Rewrite interface to database to read/write .sqlite3 rather than from/to CSV&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Create Docker image that supports Python Flask and Latex and Graphviz [done]&lt;/li&gt;
&lt;li&gt;Put current scripts inside Docker image; mount external data; be able to edit content from within container&lt;/li&gt;
&lt;li&gt;Run static content in Docker image and display images in web browser&lt;/li&gt;
&lt;li&gt;Rewrite command-line editing interface to use Python Flask as web interface&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;
&lt;div&gt;
&lt;i&gt;Update 20190602&lt;/i&gt;: created a Docker container that supports Python Flask and Latex. I can generate a PNG from user entered strings.&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2019-05-25T15:36:00.853Z</blogger:created>
    <published>2019-05-25T15:42:00.001Z</published>
    <updated>2019-06-03T10:36:36.666Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='tasks'/>
    <blogger:filename>/2019/05/task-list.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6387342093080407679</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>anatomy of the "file per expression" data format in the Physics Derivation Graph</title>
    <content type='html'>Each derivation gets a folder. The folder typically contains four CSV files:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;expression_identifiers.csv: two columns of integers (7 digits, 10 digits) where each row looks like "1432042,1029039904"&lt;/li&gt;
&lt;li&gt;feeds.csv: a single column of integers (7 digits) where each row looks like&amp;nbsp;"2342425"&amp;nbsp;&lt;/li&gt;
&lt;li&gt;inference_rule_identifiers.csv: two columns, the first is an integer (7 digits). An example row looks like&amp;nbsp;1294844,declareInitialExpression&lt;/li&gt;
&lt;li&gt;derivation_edge_list.csv: two columns of integers (7 digits each) where each row looks like "3934948,3499522"&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Elsewhere in this documentation I refer to the 7 digit integers as "temporary IDs" and the digit integers as "permanent IDs".&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The graph visualization is built from the content of derivation_edge_list.csv, but additional decorations are need to renders a meaningful picture. That's where the other three CSVs come into play -- they indicate what the relevant decoration is (either a feed, expression, or inference rule).&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2017-07-09T01:33:34.687Z</blogger:created>
    <published>2017-07-09T01:41:00.001Z</published>
    <updated>2017-07-09T01:41:07.181Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/07/anatomy-of-file-per-expression-data.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6388111607488265255</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>data structure continues to evolve</title>
    <content type='html'>I've experimented with seven different data structures for the Physics Derivation Graph:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;v1_plain_text&lt;/li&gt;
&lt;li&gt;v2_XML&lt;/li&gt;
&lt;li&gt;v3_CSV&lt;/li&gt;
&lt;li&gt;v4_file_per_expression&lt;/li&gt;
&lt;li&gt;v5_property_graph&lt;/li&gt;
&lt;li&gt;v6_sqlite&lt;/li&gt;
&lt;li&gt;v7_pickle_web_interface&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Each of these have required a rewrite of the code from scratch, as well as transfer code (to move from n to n+1).&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
These changes progress concurrently with my knowledge of data structures. I didn't know about property graphs when I was implementing v1, v2, and v3. I wasn't comfortable with SQL when I implemented v4. I didn't know about &lt;a href="https://en.wikipedia.org/wiki/Tidy_data"&gt;Tidy data&lt;/a&gt; when I implemented v1 to v6.&amp;nbsp; The data structures used in the PDG slightly lag my understanding of data structures.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Within a given implementation, there are design decisions with trade-offs to evaluate. I typically don't know all the options or consequences until I implement one of them and then determine what inefficiencies exist. Knowledge gained through evolutionary iteration is expensive and takes a lot of time.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Here's an example of two "minor" tweaks that incur a rewrite of all the code. My current data structure in v7 is&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;dat['derivations'] = {&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; 'fun deriv': { # name of derivation&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;'4928482': {&amp;nbsp; &amp;nbsp; # key is "step ID"&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inf rule': 'declare initial expr',&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inputs':&amp;nbsp; {},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'feeds':&amp;nbsp; &amp;nbsp;{},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'outputs': {'9428': '4928923942'}, # key is "expr local ID", value is "expr global ID"&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'linear index': 1}, # linear index for PDF and for graph orientation&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;'2948592': {&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inf rule': 'add X to both sides',&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inputs':&amp;nbsp; {'9428': '4928923942'},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'feeds':&amp;nbsp; &amp;nbsp;{'3190': '9494829190'},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'outputs': {'3921': '9499959299'},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'linear index': 2},&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
A better data structure would be&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;dat['derivations'] = {&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; 'fun deriv': { # name of derivation&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;'4928482': {&amp;nbsp; &amp;nbsp; # key is "step ID"&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inf rule': 'declare initial expr',&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inputs':&amp;nbsp; {},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'feeds':&amp;nbsp; &amp;nbsp;{},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'outputs': {1: '9428'}, # key is index, value is "expr local ID"&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'linear index': 1}, # linear index for PDF and for graph orientation&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;'2948592': {&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inf rule': 'add X to both sides',&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'inputs':&amp;nbsp; {1: '9428'},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'feeds':&amp;nbsp; &amp;nbsp;{1: '3190'},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'outputs': {1: '3921'},&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 'linear index': 2},&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;dat['expr local to global'] = {&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '9428': '4928923942',&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '3190': '9494829190',&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '3921': '9499959299',&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '9128': '1492842000'}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The reasons this second data structure is an improvement is&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;the global expression ID does not appear in the 'derivations' dict&lt;/li&gt;
&lt;li&gt;the inputs, feeds, and outputs have an index. The index is relevant for both printing in a PDF and use in inference rules.&amp;nbsp;&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
I'm slowly evolving towards the likelihood that there will be a "v8" based on tables. The backend database would be something like SQLite3, and the internal representation in Python would be dataframes.&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I'm not going to switch to v8 yet; I'll continue to invest effort in v7 for a bit longer to explore a few challenges (like implementation of inference rules).&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-03-20T11:37:11.727Z</blogger:created>
    <published>2020-03-20T11:57:00.003Z</published>
    <updated>2020-03-20T11:57:58.946Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/03/data-structure-continues-to-evolve.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6421815359206519255</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>ASTs for Integrals</title>
    <content type='html'>I've understood ASTs for simple expressions that only involve binary operators. I don't understand how ASTs deal with operators that have more than two arguments.&lt;br /&gt;
&lt;a href="https://reference.wolfram.com/language/ref/TreeForm.html"&gt;https://reference.wolfram.com/language/ref/TreeForm.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://demonstrations.wolfram.com/ExpressionTreesForIntegrals/"&gt;https://demonstrations.wolfram.com/ExpressionTreesForIntegrals/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-25T00:20:14.104Z</blogger:created>
    <published>2020-02-25T00:20:00.003Z</published>
    <updated>2020-02-25T00:21:07.831Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/02/asts-for-integrals.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6431915334446932649</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>build a link graph</title>
    <content type='html'>







&lt;br /&gt;
&lt;div class="p1"&gt;
&lt;span style="font-family: inherit;"&gt;&lt;span class="s1"&gt;The Physics Derivation Graph (PDG) site uses relative links. This complicates creating a graph of the site links using wget since&amp;nbsp;&lt;/span&gt;-k can be used together with -O only if outputting to a regular file.&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;span class="s1"&gt;$ root_page=&lt;/span&gt;allofphysicsgraph.github.io/proofofconcept/&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;







&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ wget http://$root_page -q -O -&amp;nbsp; | grep -i -o '&amp;lt;a[^&amp;gt;]\+href[ ]*=[ \t]*"[^"]\+"' | sed 's/&amp;lt;a href="//' | sed 's/"//' | grep -v https | sort | uniq &amp;gt; list_of_pages&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;span class="s1"&gt;$ while read -r line; do this_page="$line"; wget $root_page$this_page -q -O - |&amp;nbsp;&lt;/span&gt;grep -i -o '&amp;lt;a[^&amp;gt;]\+href[ ]*=[ \t]*"[^"]\+"' | sed 's/&amp;lt;a href="//' | sed 's/"//' | grep -v https | sort | uniq &amp;gt;&amp;gt; list_of_pages2; done &amp;lt; list_of_pages&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ cat list_of_pages2 | grep -v http | sed 's/^/site\//' &amp;gt;&amp;gt; list_of_pages&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;







&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ cat list_of_pages | sort | uniq &amp;gt; list_of_pages_master&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;







&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ rm list_of_pages list_of_pages2&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;







&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ while read -r line; do this_page="$line"; wget $root_page$this_page -q -O - | grep -i -o '&amp;lt;a[^&amp;gt;]\+href[ ]*=[ \t]*"[^"]\+"' | sed 's/&amp;lt;a href="//' | sed 's/"//' | awk -v thispage="$this_page" '{print thispage" -&amp;gt;", $0";"}' &amp;gt;&amp;gt; graph_level2.gv; done &amp;lt; list_of_pages_master&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="p1"&gt;
&lt;span class="s1"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2016-06-26T19:42:36.393Z</blogger:created>
    <published>2016-06-26T20:35:00Z</published>
    <updated>2016-06-26T20:35:00.057Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/06/build-link-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6442848690140287236</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>MathML is probably better than LaTeX, but I'm lazy</title>
    <content type='html'>There's a good &lt;a href="http://reference.wolfram.com/language/XML/tutorial/MathML.html.en"&gt;overview of MathML&lt;/a&gt; provided by Wolfram. MathML interacts with Mathematica, both for import and export.&amp;nbsp;&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
"MathML comes in two types: Presentation MathML, which describes what an equation looks like, and Content MathML, which describes what an equation means. By default, &lt;a href="http://docs.mathjax.org/en/latest/misc/faq.html"&gt;MathJax&lt;/a&gt; works with Presentation MathML and offers an extension for Content MathML."&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
There are&amp;nbsp;&lt;a href="https://www.mathtowebonline.com/"&gt;online tools&lt;/a&gt; that enable conversion of LaTeX (mathematics) to Presentation MathML.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
MathML is probably the better format to store data in the Physics Derivation Graph compared to Latex. However, Latex is more convenient for me as a data entry method.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2017-07-08T00:21:41.016Z</blogger:created>
    <published>2017-07-08T00:28:00.001Z</published>
    <updated>2017-07-08T00:28:15.304Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2017/07/mathml-is-probably-better-than-latex.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6471166579841044806</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>SQL vs CSV vs PKL for data storage</title>
    <content type='html'>The CSV files are sufficient to build a proof of concept. Given that sufficiency, and my lack of familiarity with SQL, perhaps I shouldn't focus on using sqlite for the MVP.&lt;br /&gt;
(See&amp;nbsp;&lt;a href="https://physicsderivationgraph.blogspot.com/2019/12/mvp-for-pdg-with-sql.html"&gt;https://physicsderivationgraph.blogspot.com/2019/12/mvp-for-pdg-with-sql.html&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;
CSVs feel hacky and don't enable enforcement of consistency checks. However, they are easier to view and decrease the dependencies.&lt;br /&gt;
&lt;br /&gt;
The easiest solution might be using Pickle (PKL) files rather than converting from Python variables in-memory to a distinct off-line representation. A Pickle file is enables consolidation.&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-12T22:41:49.564Z</blogger:created>
    <published>2019-12-12T22:43:00Z</published>
    <updated>2019-12-13T02:52:14.047Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/sql-vs-csv-for-data-storage.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6512181604801223217</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>reconsidering the size of the leap; a literature search for related efforts</title>
    <content type='html'>A pure graph-based approach is far from what is standard (sequential presentation in PDFs). The value isn't sufficient for content creators (Physics researchers) to cross the entry barrier. I needed to learn this lesson:&lt;br /&gt;
&lt;blockquote&gt;
Improving on tradition is good, but ignoring tradition is stupid.&lt;/blockquote&gt;
More specifically,&lt;br /&gt;
&lt;blockquote&gt;
Focus on formalization of actual mathematical practice, and not also try to ‘improve’ on the way that people currently do mathematics.
&lt;/blockquote&gt;
From &lt;a href="http://mizar.org/trybulec65/8.pdf"&gt;"The QED manifesto revisited"&lt;/a&gt; (2007)&lt;br /&gt;
&lt;br /&gt;
If a graph-based semantically-encoded representation is too much, what are the more incremental options? Non-graph options for sequential content with semantic decoration:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;start the workflow of document creation in a CAS (e.g., Sympy) and generate .tex from that.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;create documents in Latex, then check the .tex file using a CAS&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
We could ignore both graphs and validation and focus merely on semantically meaningful expressions. That alone would constitute an evolutionary step.&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;create a .tex document using semantically enriching &lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;domain-specific language&lt;/a&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;see&amp;nbsp;&lt;a href="https://github.com/slatex/sTeX"&gt;https://github.com/slatex/sTeX&lt;/a&gt;&amp;nbsp;and specifically the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cmathml&lt;/span&gt; package&lt;/li&gt;
&lt;li&gt;see "mathematical content markup language" referenced in&amp;nbsp;&lt;a href="https://pdfs.semanticscholar.org/6139/579ab589c62397ef4ba6728da42f519c9b8c.pdf"&gt;https://pdfs.semanticscholar.org/6139/579ab589c62397ef4ba6728da42f519c9b8c.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1707.01271"&gt;https://arxiv.org/abs/1707.01271&lt;/a&gt;&amp;nbsp;-- requires DSL like &lt;span style="font-family: Courier New, Courier, monospace;"&gt;\giacinputmath{factor(x^10-1)}&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;create a .tex document with standard Latex, then decorate the expressions with semantics (using context present in the document).&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sigmathling.kwarc.info/resources/arxmliv-dataset-082018/"&gt;https://sigmathling.kwarc.info/resources/arxmliv-dataset-082018/&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://kwarc.info/projects/arXMLiv/"&gt;https://kwarc.info/projects/arXMLiv/&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://www.youtube.com/watch?v=cDzIpFPNPpI"&gt;https://www.youtube.com/watch?v=cDzIpFPNPpI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;br /&gt;
This semantic representation is a necessary dependency for validation and for a rigorous graph.&lt;br /&gt;
A mathematically-linked graph that has edges which are not rigorously checked is closer to Wikipedia's hyperlinked text pages.&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;
&lt;h2&gt;
Semantic text in Latex&lt;/h2&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;
"SALT – Semantically Annotated LATEX for Scientific Publications."&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;
Groza, Tudor, Handschuh, Siegfried, Möller, Knud, Decker, Stefan&lt;/div&gt;
&lt;div&gt;
In Franconi, Enrico, Kifer, Michael, May, Wolfgang (eds.) ESWC 2007. LNCS vol. 4519, pp. 518–532. Springer, Heidelberg (2007)&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://link.springer.com/content/pdf/10.1007/978-3-540-72667-8_37.pdf"&gt;https://link.springer.com/content/pdf/10.1007/978-3-540-72667-8_37.pdf&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
--&amp;gt; focuses on decorators like "claim" and "explanation." No suggestion of handling mathematics.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;
QED v2: Mathropolis and&amp;nbsp;mathematical content markup language&lt;/h3&gt;
&lt;div&gt;
"The QED Manifesto after Two Decades -- Version 2.0"&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://pdfs.semanticscholar.org/6139/579ab589c62397ef4ba6728da42f519c9b8c.pdf"&gt;https://pdfs.semanticscholar.org/6139/579ab589c62397ef4ba6728da42f519c9b8c.pdf&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
MCML appears focused on the structure of proofs rather than expressions.&lt;/div&gt;
&lt;div&gt;
No source code available.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
sTeX: An Infrastructure for Semantic Preloading of LaTeX Documents&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;
sTeX handles expressions and proofs.&lt;br /&gt;
&lt;b&gt;Most relevant to the PDG is "cmathml" which provides a method for concise Content MathML that gets converted to Latex for display.&amp;nbsp;&lt;/b&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;a href="https://kwarc.info/systems/sTeX/"&gt;https://kwarc.info/systems/sTeX/&lt;/a&gt;&amp;nbsp;- sTeX homepage&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://github.com/slatex/sTeX"&gt;https://github.com/slatex/sTeX&lt;/a&gt;&amp;nbsp;- sTeX source code&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://ctan.org/pkg/stex?lang=en"&gt;https://ctan.org/pkg/stex?lang=en&lt;/a&gt;&amp;nbsp;- sTeX package for Latex&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://github.com/slatex/sTeX/blob/master/sty/stex/stex.pdf"&gt;https://github.com/slatex/sTeX/blob/master/sty/stex/stex.pdf&lt;/a&gt;&amp;nbsp;"Semantic Markup in Tex/Latex" (2019)&lt;br /&gt;
This document advises that github is the best source since CTAN is tedious to update and thus not current.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://ctan.math.utah.edu/ctan/tex-archive/macros/latex/contrib/stex/sty/stex/stex.pdf"&gt;http://ctan.math.utah.edu/ctan/tex-archive/macros/latex/contrib/stex/sty/stex/stex.pdf&lt;/a&gt;&amp;nbsp;"Semantic Markup in Tex/Latex" (2019)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://caligari.dartmouth.edu/doc/texmf-dist/doc/latex/stex/stex.pdf"&gt;https://caligari.dartmouth.edu/doc/texmf-dist/doc/latex/stex/stex.pdf&lt;/a&gt;&amp;nbsp;(2010)&lt;br /&gt;
Overview of packages in sTeX.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://www.bakoma-tex.com/doc/latex/stex/stex.pdf"&gt;http://www.bakoma-tex.com/doc/latex/stex/stex.pdf&lt;/a&gt;&amp;nbsp;(2008)&lt;/div&gt;
&lt;div&gt;
An amalgamation of the above summary plus the PDFs for each package&lt;br /&gt;
&lt;br /&gt;
&lt;h4&gt;
Sub-packages in sTeX&lt;/h4&gt;
&lt;a href="https://tools.ietf.org/doc/texlive-doc/latex/stex/cmathml/cmathml.pdf"&gt;https://tools.ietf.org/doc/texlive-doc/latex/stex/cmathml/cmathml.pdf&lt;/a&gt;&amp;nbsp;"cmathml.sty: A TEX/LATEX-based Syntax for Content MathML" (2012)&lt;br /&gt;
"This package provides a collection of semantic macros for content MathML and their LATEXML bindings. These macros form the basis of a naive translation from semantically preloaded LATEX formulae into the content MathML formulae via the LATEXML system."&lt;br /&gt;
&lt;b&gt;content --&amp;gt; presentation &lt;/b&gt;(Latex or Presentation MathML)&lt;br /&gt;
&lt;br /&gt;
"statements" in sTeX&lt;br /&gt;
&lt;a href="https://ctan.math.illinois.edu/macros/latex/contrib/stex/sty/statements/statements.pdf"&gt;https://ctan.math.illinois.edu/macros/latex/contrib/stex/sty/statements/statements.pdf&lt;/a&gt;&amp;nbsp;"Semantic Markup for Mathematical Statements" (2019)&lt;br /&gt;
abstract: "This package provides semantic markup facilities for mathematical statements like Theorems, Lemmata, Axioms, Definitions, etc. in STEX files. This structure can be used by MKM systems for added-value services, either directly from the STEX sources, or after translation."&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
"omtext" in sTeX&lt;br /&gt;
&lt;a href="http://mirrors.ibiblio.org/CTAN/macros/latex/contrib/stex/sty/omtext/omtext.pdf"&gt;http://mirrors.ibiblio.org/CTAN/macros/latex/contrib/stex/sty/omtext/omtext.pdf&lt;/a&gt;&amp;nbsp;"omtext: Semantic Markup for Mathematical Text Fragments in LATEX" (2019)&lt;/div&gt;
&lt;div&gt;
abstract: "This package supplies an infrastructure for writing OMDoc text fragments in LATEX."&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
&lt;br class="Apple-interchange-newline" /&gt;Latex packages which are not relevant&lt;/h2&gt;
A package for common math commands:&amp;nbsp;COntent Oriented LaTeX&lt;br /&gt;
&lt;a href="https://www.ctan.org/pkg/cool"&gt;https://www.ctan.org/pkg/cool&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://ftp.math.purdue.edu/mirrors/ctan.org/macros/latex/contrib/cool/Content_LaTeX_Package_Demo.pdf"&gt;http://ftp.math.purdue.edu/mirrors/ctan.org/macros/latex/contrib/cool/Content_LaTeX_Package_Demo.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
There are tools for performing arithmetic calculations in Latex,&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://latexcalc.sourceforge.net/"&gt;http://latexcalc.sourceforge.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ctan.org/pkg/calc?lang=en"&gt;https://ctan.org/pkg/calc?lang=en&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://texdoc.net/texmf-dist/doc/latex/tools/calc.pdf"&gt;https://texdoc.net/texmf-dist/doc/latex/tools/calc.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;
There's no math support on&amp;nbsp;&lt;a href="https://schema.org/"&gt;https://schema.org/&lt;/a&gt;&amp;nbsp;for webpages.&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-26T19:40:04.007Z</blogger:created>
    <published>2020-07-27T17:38:00.001Z</published>
    <updated>2020-07-27T18:23:14.587Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/reconsidering-size-of-leap-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6535055423665407578</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>troubleshooting errors with ASTs in the Physics Derivation Graph (SOLVED)</title>
    <content type='html'>At the top of derivation pages I display errors associated with processing the page. Most of the errors are associated with the Abstract Syntax Trees (ASTs) that are in

&lt;br /&gt;
&lt;br /&gt;
For example, on the "curl curl identity" page https://derivationmap.net/review_derivation/000005/

&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;in step 2339482: unable to eval AST for "sympy.Equality(cross(sympy.Symbol('E'), cross(Del, Del)), sympy.Function('nabla')(sympy.Add(sympy.Mul(sympy.Integer(-1), sympy.Symbol('E'), sympy.Pow(Del, sympy.Integer(2))), dot(sympy.Symbol('E'), Del))))"
&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
I need to recreate the issue on my local instance of the site, so my first step is to launch a Docker image&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cd ~/version_controlled/proofofconcept/v7_pickle_web_interface/flask/&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;make dockerlive
&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
In the Docker container I have the same environment as the website, so I open Python and run Sympy to parse the expression&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ python&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Python 3.6.9 (default, Apr 18 2020, 01:56:04)&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[GCC 8.4.0] on linux&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.__version__&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;'1.5.1'&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.Equality(cross(sympy.Symbol('E'), cross(Del, Del)), sympy.Function('nabla')(sympy.Add(sympy.Mul(sympy.Integer(-1), sympy.Symbol('E'), sympy.Pow(Del, sympy.Integer(2))), dot(sympy.Symbol('E'), Del))))&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Traceback (most recent call last):&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;NameError: name 'cross' is not defined&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Looking in the file&amp;nbsp;validate_dimensions_sympy.py the relevant import statements exist:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;from sympy.vector import cross, dot&amp;nbsp; # type: ignore&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;from sympy.vector.deloperator import Del&amp;nbsp; # type: ignore&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Next I looked in&lt;br /&gt;
logs/flask_critical_and_error_and_warning_and_info_and_debug.log&lt;br /&gt;
to see where the error is being observed.&lt;br /&gt;
&lt;br /&gt;
The error occurs on line 2984 in controller.py.&lt;br /&gt;
Actually this reference is just a try/except based on validate_dimensions in&amp;nbsp;validate_dimensions_sympy.py&lt;br /&gt;
&lt;br /&gt;
As mentioned earlier, the "cross" and "dot" and "Del" are correctly imported. Going back to the REPL,&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.vector import cross, dot&amp;nbsp; # type: ignore&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.vector.deloperator import Del&amp;nbsp; # type: ignore&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.Equality(cross(sympy.Symbol('E'), cross(Del, Del)), sympy.Function('nabla')(sympy.Add(sympy.Mul(sympy.Integer(-1), sympy.Symbol('E'), sympy.Pow(Del, sympy.Integer(2))), dot(sympy.Symbol('E'), Del))))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; File "/usr/local/lib/python3.6/dist-packages/sympy/core/cache.py", line 94, in wrapper&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; retval = cfunc(*args, **kwargs)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; File "/usr/local/lib/python3.6/dist-packages/sympy/core/power.py", line 301, in __new__&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; obj = b._eval_power(e)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;AttributeError: type object 'Del' has no attribute '_eval_power'&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The other information in the error message we can leverage is step_ID. That step contains the expression_ID&amp;nbsp;7575859295 which has a complicated latex:&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\\vec{ \\nabla} \\times \\vec{ \\nabla} \\times \\vec{E} = \\vec{ \\nabla}( \\vec{ \\nabla} \\cdot \\vec{E} - \\nabla^2 \\vec{E})&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Eliminating the "\\vec{}" we get&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\\nabla \\times \\nabla \\times E = \\nabla( \\nabla \\cdot E - \\nabla^2 E)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
which can be parsed by Sympy:&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; parse_latex("\\nabla \\times \\nabla \\times E = \\nabla( \\nabla \\cdot E - \\nabla^2 E)")&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Eq(E*(nabla*nabla), nabla(-E*nabla**2 + E*nabla))&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex("\\nabla \\times \\nabla \\times E = \\nabla( \\nabla \\cdot E - \\nabla^2 E)"))&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"Equality(Mul(Symbol('E'), Mul(Symbol('nabla'), Symbol('nabla'))), Function('nabla')(Add(Mul(Integer(-1), Symbol('E'), Pow(Symbol('nabla'), Integer(2))), Mul(Symbol('E'), Symbol('nabla')))))"&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The output string does not work as-is in the Python prompt&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; Equality(Mul(Symbol('E'), Mul(Symbol('nabla'), Symbol('nabla'))), Function('nabla')(Add(Mul(Integer(-1), Symbol('E'), Pow(Symbol('nabla'), Integer(2))), Mul(Symbol('E'), Symbol('nabla')))))&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Traceback (most recent call last):&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;NameError: name 'Equality' is not defined&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Changes required:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Mul --&amp;gt; cross&lt;/li&gt;
&lt;li&gt;Symbol('nabla') --&amp;gt; Del&lt;/li&gt;
&lt;li&gt;append "sympy." in front of commands&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
which gets us back to the original expression.&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
Staring at the expression, I see it contains&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;sympy.Pow(Del, sympy.Integer(2))&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
which is causing the error.&lt;br /&gt;
&lt;br /&gt;
The solution is to replace the operation with&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Mul(Del, Del)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
in expression_ID 7575859295 in data.json&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-15T20:20:33.976Z</blogger:created>
    <published>2020-07-15T21:13:00.001Z</published>
    <updated>2020-07-15T21:14:10.177Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/troubleshooting-errors-with-asts-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6536977792293891041</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>docker-compose version</title>
    <content type='html'>At home on my Mac I use Docker Compose to build the combined nginx + gunicorn containers.&lt;br /&gt;
In the file proofofconcept/v7_pickle_web_interface/docker-compose.yaml&lt;br /&gt;
I had&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;version: "3.7"&lt;/span&gt;&lt;br /&gt;
which worked for me.&lt;br /&gt;
(The compatibility matrix is here:&amp;nbsp;https://docs.docker.com/compose/compose-file/)&lt;br /&gt;
&lt;br /&gt;
I ran docker-compose on DigitalOcean's 18.04 Ubuntu and got the message&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;docker-compose up --build --remove-orphans&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ERROR: Version in "./docker-compose.yaml" is unsupported.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
The versions on DigitalOcean's Ubuntu 18.04 are&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;docker version&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Client: Docker Engine - Community&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;Version:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;19.03.8&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;docker-compose version&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker-compose version 1.21.2, build a133471&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker-py version: 3.3.0&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CPython version: 3.6.5&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;OpenSSL version: OpenSSL 1.0.1t&amp;nbsp; 3 May 2016&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
while at home I have&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;docker version&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Client: Docker Engine - Community&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;Version:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;19.03.8&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;docker-compose version&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker-compose version 1.25.4, build 8d51620a&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker-py version: 4.1.0&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CPython version: 3.7.5&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;OpenSSL version: OpenSSL 1.1.1d&amp;nbsp; 10 Sep 2019&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
The fix was to change the docker-compose.yaml line to&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;version: "3.7"&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-25T21:16:27.247Z</blogger:created>
    <published>2020-04-25T21:25:00Z</published>
    <updated>2020-04-25T21:47:27.123Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='digitalocean'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='docker-compose'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='docker'/>
    <blogger:filename>/2020/04/docker-compose-version.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6572109686117907066</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>distinguishing scalars, vectors, and matrices as operators or symbols</title>
    <content type='html'>&lt;p&gt;A Physics derivation has steps and expressions. Expressions are composed of symbols and operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Symbols (e.g., x) can be constant or variable, real or complex. Symbols do not have arguments.&lt;/p&gt;&lt;p&gt;Operations are distinct from symbols because they require one or more symbols to operate upon. For example, +, ^, &lt;a href="https://en.wikipedia.org/wiki/Determinant"&gt;determinant&lt;/a&gt;(), etc.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Within the concept of symbols there are distinct categories: scalar, vector, matrix. The distinction is that they have different properties. A vector has a dimension, a matrix has 2 dimensions.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Since vectors can contain variables (e.g., \vec{a} = [x,y,z] ) and matrices can contain scalars, then we need a new boolean property for symbols: &lt;b&gt;is_composite&lt;/b&gt;, and a new numeric property for symbols: dimensions.&amp;nbsp;&lt;/p&gt;&lt;p&gt;When "dimension"=0, the symbol is a scalar. Then is_composite is false.&lt;br /&gt;When "dimension"=1, the symbol is a vector. Then is_composite is either false or true. If true then the symbol has two or more edges with other (scalar) symbols.&lt;br /&gt;When "dimension"=2, the symbol is a matrix. Then is_composite is either false or true. If true then the symbol has four or more edges with other (scalar) symbols.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;However, this accommodation isn't sufficient. We can say "matrix A = matrix B" and consider the matrices as symbols. However, a quantum operator (e.g., bit flip) is a matrix that operates on a state -- an argument is required. There is an equivalence to the Hamiltonian ("H") and the matrix representation. Therefore the matrix is not a symbol as previously defined.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;While the expression "matrix A = matrix B" is valid, " + = + " is not. The difference is that "+" is not a composite symbol.&lt;/p&gt;&lt;p&gt;"H = matrix B" is a valid expression even though "H" is an operator.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Therefore the distinction between symbol and operators is misleading. The schema for symbols should be&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;latex&lt;/li&gt;&lt;li&gt;name_latex&lt;/li&gt;&lt;li&gt;description_latex&lt;/li&gt;&lt;li&gt;requires_arguments (boolean)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;if requires_arguments=true (operator: +, /, ^, determinant), then&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;argument_count (e.g., 1,2,3)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;else requires_arguments=false (variable or constant or operator: a, x, H), then&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;dimension (e.g., 0,1,2)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;if dimension = 0 (aka scalar: "size=1x1" and "is_composite=false") then&lt;/li&gt;&lt;ul&gt;&lt;li&gt;dimension_length&lt;/li&gt;&lt;li&gt;dimension_time&lt;/li&gt;&lt;li&gt;dimension_luminosity&lt;/li&gt;&lt;li&gt;dimension_mass&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;if dimension = 1 (aka vector) then&lt;/li&gt;&lt;ul&gt;&lt;li&gt;is_composite = false or true&lt;/li&gt;&lt;li&gt;orientation is row xor column xor arbitrary&lt;/li&gt;&lt;ul&gt;&lt;li&gt;if row or column,&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;size is arbitrary xor definite&lt;/li&gt;&lt;ul&gt;&lt;li&gt;if definite, "2x1" xor "1x2" xor "3x1" xor "1x3" ...&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;if dimension = 2 (aka matrix) then&lt;/li&gt;&lt;ul&gt;&lt;li&gt;is_composite = false or true&lt;/li&gt;&lt;li&gt;size arbitrary xor definite&lt;/li&gt;&lt;ul&gt;&lt;li&gt;if definite, "2x2" xor "2x3" xor "3x2" xor "3x3" xor ...&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That means the major distinct subtypes of symbols are&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;symbol that requires arguments&lt;/li&gt;&lt;li&gt;symbol that does not require arguments, dimension 0&lt;/li&gt;&lt;li&gt;symbol that does not require arguments, dimension 1&lt;/li&gt;&lt;li&gt;symbol that does not require arguments, dimension 2&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2024-05-18T16:37:04.635Z</blogger:created>
    <published>2024-05-18T16:53:00Z</published>
    <updated>2024-05-19T14:34:30.509Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2024/05/distinguishing-scalars-vectors-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6589370987425933440</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>summary of SymPy hurdles for the Physics Derivation Graph</title>
    <content type='html'>&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;parsing Latex expressions, e.g., \vec{x} and \hat{a}. The SymPy support exists, but the conversion of Latex to SymPy is not&lt;/li&gt;
&lt;li&gt;novel operators, e.g., {\cal H}, how specify these operators in SymPy? - &lt;a href="https://physicsderivationgraph.blogspot.com/2020/09/latex-symbols-that-are-operators-how-to.html"&gt;https://physicsderivationgraph.blogspot.com/2020/09/latex-symbols-that-are-operators-how-to.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Laplace operator \nabla^2, how to distinguish "\nabla^2" from "delop.dot(delop)" --&amp;nbsp;&lt;a href="https://physicsderivationgraph.blogspot.com/2020/09/representing-laplace-operator-nabla-in.html"&gt;https://physicsderivationgraph.blogspot.com/2020/09/representing-laplace-operator-nabla-in.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;multi-line SymPy operations, like the need for "delop = Del()"&lt;/li&gt;
&lt;li&gt;notation for definite integrals. This could be a structural issue with the Physics Derivation Graph, though it could be resolved with SymPy support (unlikely)&amp;nbsp;-- &lt;a href="https://physicsderivationgraph.blogspot.com/2020/09/evaluating-definite-integrals-for.html"&gt;https://physicsderivationgraph.blogspot.com/2020/09/evaluating-definite-integrals-for.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-06T12:11:26.241Z</blogger:created>
    <published>2020-09-06T12:23:00.002Z</published>
    <updated>2022-03-04T20:40:53.054Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <blogger:filename>/2020/09/summary-of-sympy-hurdles-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6595121608476775344</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>property graph representation for expressions</title>
    <content type='html'>There are many ways to represent an expression, ie a*x^2+b*x+c=d&lt;br /&gt;
Representing algebraic expressions is a good place to start, but for the Physics Derivation Graph I care about covering the full scope of Physics - calculus, derivatives, linear algebra, tensors, Dirac notation, Einstein notation, etc. See&lt;br /&gt;
https://github.com/allofphysicsgraph/proofofconcept/issues/7&lt;br /&gt;
&lt;br /&gt;
Mathematica has a "&lt;a href="https://reference.wolfram.com/language/ref/TreeForm.html"&gt;tree form&lt;/a&gt;" for expressions which yields an&amp;nbsp;Abstract Syntax Tree. I think the AST is incomplete, and would be more accurate as a property tree.&lt;br /&gt;
&lt;br /&gt;
As an example, suppose we want to expand&lt;br /&gt;
TreeForm[ &amp;nbsp;(a*x^2)+(b*x)+c=d ]&lt;br /&gt;
&lt;br /&gt;
The nodes are a,b,c,d,x,2,=,+,^,*&lt;br /&gt;
The (directed) edges are&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;x--&amp;gt;power&lt;/li&gt;
&lt;li&gt;2--&amp;gt;power&lt;/li&gt;
&lt;li&gt;a--&amp;gt;times&lt;/li&gt;
&lt;li&gt;power--&amp;gt;times&lt;/li&gt;
&lt;li&gt;times--&amp;gt;plus&lt;/li&gt;
&lt;li&gt;b--&amp;gt;times&lt;/li&gt;
&lt;li&gt;x--&amp;gt;times&lt;/li&gt;
&lt;li&gt;times--&amp;gt;plus&lt;/li&gt;
&lt;li&gt;c--&amp;gt;plus&lt;/li&gt;
&lt;li&gt;plus--&amp;gt;equal&lt;/li&gt;
&lt;li&gt;d--&amp;gt;equal&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
However, this graph representation is incomplete. First, the nodes are not all of the same type:&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( x:variable )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( a:constant )&lt;br /&gt;CREATE ( b:constant )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( c:constant )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( d:constant )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( 2:integer )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( =:relation )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( ^:operator { name:"power" } )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( +:operator { name:"plus" } )&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Then edges are created, similar to above&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( x )--&amp;gt;( power )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( 2 )--&amp;gt;( power )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( a )--&amp;gt;( times )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;...&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
However, the bulleted list of edges has collisions -- there are two instances of "times--&amp;gt;plus", but they are not supposed to be the same. Thus, the edges require unique IDs to deal with collisions.&lt;br /&gt;
Similarly, the nodes in the graph feature collisions. The expression refers to a single "x", but the TreeForm representation has multiple separate "x" nodes.&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( 5938:variable { symbol:"&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;x" }&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( 5782:constant { symbol:"a" } )&lt;br /&gt;CREATE ( 4525:constant&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;{ symbol:"b" }&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( :constant&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;{ symbol:"c" }&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( :constant&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;{ symbol:"d" }&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( :integer&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;{ symbol:"2" }&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( :relation&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;{ symbol:"=" }&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( :operator { name:"power", symbol:"^" } )&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CREATE ( :operator { name:"plus"&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;, symbol:"+"&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&amp;nbsp;} )&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-19T17:09:26.652Z</blogger:created>
    <published>2015-09-19T17:43:00.003Z</published>
    <updated>2015-09-19T17:43:47.719Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/property-graph-representation-for.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6613336744660979716</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>latex is for rendering presentation and does not provide semantics</title>
    <content type='html'>Latex is used in the Physics Derivation Graph to specify mathematical expressions. This is a poor choice in that Latex does not provide explicit semantics for the content. That association is typically left to the human reader.&lt;br /&gt;
&lt;br /&gt;
In the Physics Derivation Graph we could manually assign semantic meaning to each expression. That's a tedious task.&lt;br /&gt;
&lt;br /&gt;
Alternatively, we could&lt;br /&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;parse the arxiv database and find the most common expressions&lt;/li&gt;
&lt;li&gt;assign semantic meaning to those.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;when the expression arises in the Physics Derivation Graph, the most likely interpretation of that expression is what has previously been labeled.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-20T19:52:16.261Z</blogger:created>
    <published>2020-05-20T20:08:00Z</published>
    <updated>2020-05-20T20:08:02.237Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/latex-is-for-rendering-presentation-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6618285871824558903</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>parsing .tex on arxiv into MathML</title>
    <content type='html'>&lt;a href="https://sigmathling.kwarc.info/resources/arxmliv-dataset-082018/"&gt;https://sigmathling.kwarc.info/resources/arxmliv-dataset-082018/ &lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://kwarc.info/projects/arXMLiv/"&gt;https://kwarc.info/projects/arXMLiv/&lt;/a&gt; - now rebranded as&lt;br /&gt;
&lt;a href="https://github.com/dginev/CorTeX"&gt;https://github.com/dginev/CorTeX&lt;/a&gt;&amp;nbsp;and in active development (written in Rust)&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://www.youtube.com/watch?v=cDzIpFPNPpI"&gt;https://www.youtube.com/watch?v=cDzIpFPNPpI&lt;/a&gt;&amp;nbsp;-&amp;nbsp;kohlhase (2012)</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-27T18:13:24.343Z</blogger:created>
    <published>2020-07-27T18:19:00Z</published>
    <updated>2020-07-27T19:10:38.483Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/parsing-tex-on-arxiv-into-mathml.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6749714991742009040</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>including Lean proofs in a property graph data structure</title>
    <content type='html'>&lt;P&gt;The data structure for the Physics Derivation Graph is a property graph. Equations are nodes and Inference Rules are nodes. The equation node can have properties like "Latex representation" and "SymPy represenetation." 

&lt;P&gt;What is a property graph representation of a lean proof?

&lt;P&gt;How would a SymPy representation be related to the Lean proof? Need to relate latex to sympy to lean.

&lt;P&gt;A symbol representation between Latex and Sympy and Lean is the Physics Derivation Graph is a unique numeric ID.</content>
    <blogger:metaDescription/>
    <blogger:created>2023-12-25T00:49:28.341Z</blogger:created>
    <published>2023-12-25T00:52:00Z</published>
    <updated>2023-12-25T00:52:30.774Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='lean'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='graph'/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-6903532920979622134</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>cleaning up the code using pylint and flake8 and bandit</title>
    <content type='html'>I realized with so much Python, there's a need to clean up the code.&lt;br /&gt;
&lt;a href="https://www.youtube.com/watch?v=G1lDk_WKXvY"&gt;https://www.youtube.com/watch?v=G1lDk_WKXvY&lt;/a&gt;&lt;br /&gt;
In this post I document a few software tools I used.&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Pylint"&gt;Pylint&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ pylint interactive_user_prompt.py --disable bad-whitespace,missing-docstring,superfluous-parens,bad-indentation,line-too-long,trailing-whitespace,len-as-condition,too-many-locals,invalid-name,too-many-branches,too-many-return-statements,too-many-statements --reports=n&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
and flake8&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ flake8 --ignore=E111,E225,E231,E501,E226,W291,E221,E115,E201,W293,E261,E302,E265 interactive_user_prompt.py&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Not surprisingly, some of my functions are &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;complicated&lt;/a&gt; (&lt;a href="https://dzone.com/articles/what-exactly-is-mccabe-cyclomatic-complexity"&gt;a score of greater than 10 is frowned upon&lt;/a&gt;)&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ python -m mccabe --min 9 interactive_user_prompt.py | wc -l&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 15&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ python -m mccabe --min 15 interactive_user_prompt.py | wc -l&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;4&lt;/span&gt;&lt;br /&gt;
So 15 functions scored 9 or greater; 4 functions were 15 or higher!&lt;br /&gt;
&lt;br /&gt;
That's out of 50 functions and 1946 lines of Python (including comments and blank lines)
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ cat interactive_user_prompt.py | wc -l&lt;/span&gt;
&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; 1946&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ cat interactive_user_prompt.py | grep "^def " | wc -l&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 50&lt;/span&gt;&lt;/div&gt;
&lt;br /&gt;
Although I'm not concerned about security of a locally run Python script, I also tried &lt;a href="https://pypi.org/project/bandit/"&gt;bandit&lt;/a&gt;:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ bandit -r interactive_user_prompt.py&lt;/span&gt;&lt;br /&gt;
which complained about my use of the shell.&lt;br /&gt;
&lt;br /&gt;
I'm aware of &lt;a href="https://pypi.org/project/autopep8/"&gt;autopep8&lt;/a&gt; but haven't used it yet.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-08-02T23:02:54.825Z</blogger:created>
    <published>2018-08-02T23:42:00.001Z</published>
    <updated>2018-12-24T23:55:39.214Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/08/cleaning-up-code-using-pylint-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7039337907300268863</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>conferences on formalization and cataloging math and physics</title>
    <content type='html'>&lt;a href="https://imkt.org/activities/events/"&gt;https://imkt.org/activities/events/&lt;/a&gt;&amp;nbsp;-&amp;nbsp;International Mathematical Knowledge Trust&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://cicm-conference.org/cicm.php"&gt;https://cicm-conference.org/cicm.php&lt;/a&gt;&amp;nbsp;-&amp;nbsp;Conference on Intelligent Computer Mathematics&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;CICM 2021 will be held in Timisoara, Romania during the week of July 26-30, 2021&lt;/li&gt;
&lt;li&gt;CICM 2022 will be held in Tbilisi, Georgia sometime in the second half of September 2022 as a component of the Computational Logic Autumn Summit (CLAS 2022) taking place in Tbilisi.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-31T17:54:58.422Z</blogger:created>
    <published>2020-07-31T18:28:00Z</published>
    <updated>2020-08-06T00:40:27.149Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/conferences-on-formalization-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7051567865527972136</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>manual translation process from Latex to Sympy for Physics Derivation Graph</title>
    <content type='html'>Suppose I have a Latex string like&lt;br /&gt;
&lt;br /&gt;
1 = \\int_0^W a \\sin\\left(\\frac{n \\pi}{W} x\\right) \\psi(x)^* dx&lt;br /&gt;
&lt;br /&gt;
The first step is to eliminate notation that is presentation oriented&lt;br /&gt;
&lt;br /&gt;
1 = \\int_0^W a \\sin(\\frac{n \\pi}{W} x) \\psi(x)^* dx&lt;br /&gt;
&lt;br /&gt;
Second, rewrite multi-character variables to single variable&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.__version__&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;'1.5.1'&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex('1 = \int_0^W a \sin(\\frac{n \pi}{W} x) f(x)^* dx'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"Equality(Integer(1), Integral(Mul(Symbol('a'), Mul(Function('f')(Symbol('x')), sin(Mul(Symbol('x'), Mul(Pow(Symbol('W'), Integer(-1)), Mul(Symbol('n'), Symbol('pi'))))))), Tuple(Symbol('x'), Integer(0), Symbol('W'))))"&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Note that the complex conjugate operation was dropped without warning. We'll need to manually insert that later.&lt;br /&gt;
&lt;br /&gt;
The SymPy representation is challenging to review, so it can be transformed back to Latex:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.latex((parse_latex('1 = \int_0^W a \sin(\\frac{n \pi}{W} x) f(x)^* dx')))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;'1 = \\int\\limits_{0}^{W} a f{\\left(x \\right)} \\sin{\\left(x \\frac{n \\pi}{W} \\right)}\\, dx'&lt;/span&gt;&lt;br /&gt;
which shows that the input Latex does not get transformed exactly, but close enough for human verification.&lt;br /&gt;
&lt;br /&gt;
From the single-variable representation, replace variables with PDG symbol IDs.&lt;br /&gt;
W --&amp;gt;&amp;nbsp;&lt;a href="https://www.blogger.com/null" name="2523"&gt;2523&lt;/a&gt;&lt;br /&gt;
a --&amp;gt; ?&lt;br /&gt;
n --&amp;gt;&amp;nbsp;&lt;a href="https://www.blogger.com/null" name="1592"&gt;1592&lt;/a&gt;&lt;br /&gt;
pi --&amp;gt;&amp;nbsp;&lt;a href="https://www.blogger.com/null" name="3141"&gt;3141&lt;/a&gt;&lt;br /&gt;
x --&amp;gt; ?&lt;br /&gt;
f --&amp;gt; psi --&amp;gt;&amp;nbsp;9489&lt;br /&gt;
In the context of an isolated function, I don't know which "a" and which "x" are relevant.&lt;br /&gt;
To determine those IDs I would need to review the derivation.&lt;br /&gt;
&lt;br /&gt;
which, replacing all instances, yields&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Equality(Integer(1), Integral(Mul(Symbol('a'), Mul(Function('pdg9489')(Symbol('x')), sin(Mul(Symbol('x'), Mul(Pow(Symbol('pdg2523'), Integer(-1)), Mul(Symbol('pdg1592'), Symbol('pdg3141'))))))), Tuple(Symbol('x'), Integer(0), Symbol('pdg2523'))))&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Finally, insert the "conjugate" for \psi(x)&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Equality(Integer(1), Integral(Mul(Symbol('a'), Mul(conjugate(Function('pdg9489')(Symbol('x'))), sin(Mul(Symbol('x'), Mul(Pow(Symbol('pdg2523'), Integer(-1)), Mul(Symbol('pdg1592'), Symbol('pdg3141'))))))), Tuple(Symbol('x'), Integer(0), Symbol('pdg2523'))))&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-29T19:15:18.688Z</blogger:created>
    <published>2020-07-29T19:39:00Z</published>
    <updated>2020-08-12T17:25:51.419Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/manual-translation-process-from-latex.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7108940876020817365</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>schema for tables</title>
    <content type='html'>I previously &lt;a href="https://physicsderivationgraph.blogspot.com/2019/06/sql-schema.html"&gt;proposed a schema&lt;/a&gt; for a relational database to hold the Physics Derivation Graph content but ended up using nested dictionaries and lists in v7.&lt;br /&gt;
&lt;br /&gt;
One of the tasks associated with using the nest dictionaries was a desire to convert the content to a table design. I came up with &lt;a href="https://physicsderivationgraph.blogspot.com/2020/04/migrating-to-tables-in-version-8.html"&gt;two potential schemas for derivations&lt;/a&gt; but wasn't comfortable with either of them. In this post I outline a schema for tables that should work. The consequence is improved JSON-to-tables in v7 as well as enabling the transition from v7 to v8.&lt;br /&gt;
&lt;br /&gt;
Columns per table:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;"step ID", "inference rule", "derivation name", "linear index"&lt;/li&gt;
&lt;li&gt;"step ID", "input local ID", "input index"&lt;/li&gt;
&lt;li&gt;"step ID", "output local ID", "output index"&lt;/li&gt;
&lt;li&gt;"step ID", "feed local ID", "feed index"&lt;/li&gt;
&lt;li&gt;"local ID", "global ID"&lt;/li&gt;
&lt;li&gt;"global ID", "expr latex", "AST as JSON"&lt;/li&gt;
&lt;li&gt;"symbol ID", "symbol latex"&lt;/li&gt;
&lt;li&gt;"symbol ID", "reference URL"&lt;/li&gt;
&lt;li&gt;"operator name", "operator latex"&lt;/li&gt;
&lt;li&gt;"operator name", "reference URL"&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
What's not clear to me is how to store an &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;AST&lt;/a&gt;. The AST relates the use of symbols and operators in a tree structure.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;a href="https://www.reddit.com/r/AskProgramming/comments/7go3b2/sql_schemas_or_nosql_alternatives_for_storing/"&gt;https://www.reddit.com/r/AskProgramming/comments/7go3b2/sql_schemas_or_nosql_alternatives_for_storing/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
--&amp;gt; store AST as JSON&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-13T15:19:25.164Z</blogger:created>
    <published>2020-04-13T15:35:00.001Z</published>
    <updated>2020-04-13T15:36:54.738Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/schema-for-tables.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7166077687355525922</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Levels of reproducibility and repeatability and replication</title>
    <content type='html'>&lt;p&gt;Knowledge progresses when one person can leverage the insights of another person. There are levels of&amp;nbsp;reproducibility that require different levels investment on the part of the person looking to build on the initial knowledge.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The levels described below are ranked from "requires lots of work to build upon" to "very easy to leverage."&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Level 0: discoverable claim&lt;/h3&gt;&lt;div&gt;Undocumented claims that no one else is aware of are irrelevant to the advancement of science.&amp;nbsp;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Level 1: claim without evidence&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;example&lt;/i&gt;: "My design for this car tire supports operational speeds of 50 miles per hour and will be usable for 50,000 miles."&lt;br /&gt;
  No software or analytical calculations are provided. No explanation of how claim was arrived at.
&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Level 2: verbal hints of process used&lt;/h3&gt;&lt;i&gt;software-based example&lt;/i&gt;:&amp;nbsp;My design for the car tire is based on calculations from code written in Python.&lt;br /&gt;&lt;i&gt;analytical example&lt;/i&gt;: In my calculation of operational speed I used the Fourier transform.&lt;p&gt;&lt;/p&gt;&lt;p&gt;What distinguishes 2 from 1: Advertising that code was written, or math was done.&amp;nbsp;&lt;br /&gt;Most peer-reviewed scientific papers are written at this level or, if you're lucky, level 2.&amp;nbsp;&lt;br /&gt;Most presentations of experiments (e.g., at conferences and lectures) also are made at this level or level 2.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Level 3: software without documentation or dependencies; or, for analytical, a few of the key equations&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;software-based&amp;nbsp;&lt;/i&gt;&lt;i&gt;example&lt;/i&gt;: Python script provided by the author to back up claim. No configuration file or random seed value. Library dependencies and versions need to be determined through trial and error (aka digital archeology).&lt;br /&gt;
&lt;i&gt;analytical example&lt;/i&gt;: a few key equations (from a much more complex derivation) are mentioned, as are a few (not all) of the assumptions.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;consequence&lt;/i&gt;: If you're smart and diligent, you may be able to recover statistically similar (though not exact) behavior for stochastic models, assuming neither you nor the original author had any bugs in the implementation.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Level 4:&lt;/h3&gt;&lt;i&gt;software-based&amp;nbsp;&lt;/i&gt;&lt;i&gt;example&lt;/i&gt;:&amp;nbsp;Python script with random seed value specified and configuration parameters documented. Documentation not included, nor are dependencies made explicit.&amp;nbsp;&lt;br /&gt;&lt;i&gt;analytical example&lt;/i&gt;: complete derivation provided, with explanation of assumptions&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Level 5: repeatable&lt;/h3&gt;&lt;i&gt;software-based&amp;nbsp;&lt;/i&gt;&lt;i&gt;example&lt;/i&gt;:&amp;nbsp;Python script containerized, software versions pinned. Build process is executable. &lt;span style="background-color: #fcff01;"&gt;No digital archeology needed&lt;/span&gt;.&lt;br /&gt;&lt;i&gt;analytical example&lt;/i&gt;:&amp;nbsp;portions of the complete derivation are checked by a computer algebra system (CAS) for correctness.&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Level 6:&lt;/h3&gt;&lt;i&gt;software-based&amp;nbsp;&lt;/i&gt;&lt;i&gt;example&lt;/i&gt;:&amp;nbsp;Python script containerized with documentation of assumptions and examples of how to use. Configuration file with parameters and random seed values provided.&lt;br /&gt;&lt;i&gt;analytical example&lt;/i&gt;: complete derivation checked by a computer algebra system (CAS) for correctness. Proofs provided.&amp;nbsp; Citations where appropriate.&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Caveat&lt;/i&gt;: the levels described above are not actually linear. There are a few meandering paths that get from 0 to 6.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;References&lt;/h2&gt;&lt;div&gt;"Reproducibility vs. Replicability: A Brief History of a Confused Terminology"&lt;br /&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5778115/"&gt;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5778115/&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-10-26T09:37:59.982Z</blogger:created>
    <published>2022-10-26T10:07:00.005Z</published>
    <updated>2022-11-15T19:44:51.714Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/10/levels-of-reproducibility-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7167822817861578074</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>save file from client-side webpage</title>
    <content type='html'>demo:&amp;nbsp;&lt;a href="https://eligrey.com/demos/FileSaver.js/"&gt;https://eligrey.com/demos/FileSaver.js/&lt;/a&gt;&lt;br /&gt;
source code:&amp;nbsp;&lt;a href="https://github.com/eligrey/FileSaver.js"&gt;https://github.com/eligrey/FileSaver.js&lt;/a&gt;&lt;br /&gt;
background:&amp;nbsp;&lt;a href="https://developers.google.com/web/updates/2011/08/Saving-generated-files-on-the-client-side"&gt;https://developers.google.com/web/updates/2011/08/Saving-generated-files-on-the-client-side&lt;/a&gt;&lt;br /&gt;
implementation:&amp;nbsp;&lt;a href="https://codepen.io/davidelrizzo/pen/cxsGb"&gt;https://codepen.io/davidelrizzo/pen/cxsGb&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
See also&amp;nbsp;&lt;a href="https://ourcodeworld.com/articles/read/189/how-to-create-a-file-and-generate-a-download-with-javascript-in-the-browser-without-a-server"&gt;https://ourcodeworld.com/articles/read/189/how-to-create-a-file-and-generate-a-download-with-javascript-in-the-browser-without-a-server&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
and&amp;nbsp;&lt;a href="https://gist.github.com/liabru/11263260"&gt;https://gist.github.com/liabru/11263260&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://stackoverflow.com/questions/13405129/javascript-create-and-save-file"&gt;https://stackoverflow.com/questions/13405129/javascript-create-and-save-file&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2018-08-02T00:43:01.797Z</blogger:created>
    <published>2018-08-02T01:28:00Z</published>
    <updated>2018-08-02T01:28:37.502Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/08/save-file-from-client-side-webpage.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7181753253260597352</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>notes on learning redis</title>
    <content type='html'>I'm running redis in a docker container and connecting to it from Python using&lt;br /&gt;
&lt;a href="https://github.com/andymccurdy/redis-py"&gt;https://github.com/andymccurdy/redis-py&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; from redis import Redis&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
I initially wasn't able to connect until I found this&lt;br /&gt;
https://stackoverflow.com/a/57681086/1164295&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; rd.ping()&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;True&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; rd = Redis(host='docker.for.mac.localhost', port=6379)&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Then I used&amp;nbsp;&lt;a href="https://realpython.com/python-redis/#ten-or-so-minutes-to-redis"&gt;https://realpython.com/python-redis/#ten-or-so-minutes-to-redis&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
What keys exist?&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; rd.keys()&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;[b'hits']&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Look for a key that doesn't exist:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; print(rd.get('mykey'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;None&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; rd.get('mykey')&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Better method for looking for keys:&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; rd.exists('mykey')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;0&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; rd.exists('hits')&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;1&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-08T22:02:24.351Z</blogger:created>
    <published>2020-04-08T22:16:00.002Z</published>
    <updated>2020-04-08T22:26:36.404Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='redis'/>
    <blogger:filename>/2020/04/notes-on-learning-redis.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7183022503794066433</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>mathematical bases for inference rules</title>
    <content type='html'>&lt;br /&gt;
"add x to both sides" =&amp;nbsp;addition property of equality&lt;br /&gt;
"multiply both sides by x" = multiplication property of equality&lt;br /&gt;
"divide both sides by x" =&amp;nbsp;division property of equality&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2019-07-28T08:45:52.928Z</blogger:created>
    <published>2019-12-12T03:24:00Z</published>
    <updated>2019-12-12T03:24:14.759Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/mathematical-bases-for-inference-rules.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7205170544448365625</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>glossary for TLA+ and PlusCal jargon</title>
    <content type='html'>&lt;h1&gt;TLA+&lt;/h1&gt;
&lt;p&gt;See also &lt;a href="https://lamport.azurewebsites.net/tla/summary-standalone.pdf"&gt;TLA+ language summary&lt;/a&gt; and &lt;a href="https://lamport.azurewebsites.net/tla/summary.pdf"&gt;this summary&lt;/a&gt;. Here's &lt;a href="https://apalache.informal.systems/docs/lang/standard-operators.html"&gt;another summary of operators&lt;/a&gt;.&lt;/p&gt;
&lt;table border="1"&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;jargon&lt;/th&gt;
      &lt;th&gt;definition&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Apalache&lt;/td&gt;
      &lt;td&gt;"symbolic model checker for TLA+." "Translates TLA+ into the logic supported by SMT solvers such as &lt;a href="https://github.com/Z3Prover/z3"&gt;Microsoft Z3&lt;/a&gt;."&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://github.com/informalsystems/apalache"&gt;apalache github&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;behavior&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;aka execution&lt;br /&gt;
         sequence of states&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;&lt;a name="CONSTANT"&gt;CONSTANT&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/book-21-07-04.pdf"&gt;Specifying Systems&lt;/a&gt; page i25&lt;/small&gt;&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;CONSTANTS&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;See &lt;a href="#CONSTANT"&gt;CONSTANT&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="execution"&gt;execution&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;see &lt;a href="#execution"&gt;behavior&lt;/a&gt;.&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="deadlock"&gt;deadlock&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;P&gt;execution stopped when it wasn't supposed to&lt;BR&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4NtHUfXlf4g"&gt;Lecture 3 video&lt;/a&gt;&lt;/small&gt;&lt;/P&gt;
    See also &lt;a href="#termination"&gt;termination&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;EXTENDS&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="FALSE"&gt;&lt;span style="font-family: courier;"&gt;FALSE&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;See also &lt;a href="#TRUE"&gt;TRUE&lt;/a&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;IF THEN&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;IF THEN ELSE&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;&lt;a name="liveness property"&gt;liveness property&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;"you have to look at the entire execution, which may be infinite, to determine that it is not satisfied."&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
      &lt;p&gt;See also &lt;a href="#safety property"&gt;safety property&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;MODULE&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PlusCal&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://lamport.azurewebsites.net/tla/p-manual.pdf"&gt;User's manual&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="safety property"&gt;safety property&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;"if is not satisfied by an execution, then you can tell that it's not satisfied by looking at a finite portion of the execution—even if the execution is infinite."&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
  &lt;p&gt;See also &lt;a href="#liveness property"&gt;liveness property&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state&lt;/td&gt;
      &lt;td&gt;assignment of values to variables&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt; and&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/pubs/spec-book-chap.pdf"&gt;TLA+ chapter in "Software Specification Methods"&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;state machine, specification of&lt;/td&gt;
      &lt;td&gt;
        &lt;ul&gt;
          &lt;li&gt;all possible initial states
            &lt;ul&gt;
              &lt;li&gt;variables&lt;/li&gt;
              &lt;li&gt;initial value of each variable&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;what state follows a given state&lt;/li&gt;&lt;ul&gt;&lt;li&gt;relations values of variables in current state and possible values in the next state.&lt;/li&gt;&lt;/ul&gt;
        &lt;/ul&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;state predicate&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;"A formula that is true or false of a state.  A state predicate is just an ordinary Boolean-valued formula that can contain variables but no primed variables and no temporal operators like &amp;lt;&amp;gt;."&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
    &lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;step&lt;/td&gt;
      &lt;td&gt;change from one state to the next state. &lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="strong fairness"&gt;strong fairness&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;"A step of a process is strongly fair in a behavior iff there is no point in the behavior after which the step is enabled in infinitely many states but no such step occurs in the behavior."&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;br /&gt;&lt;span style="font-size: small;"&gt;&lt;br /&gt;See also &lt;a href="#weak fairness"&gt;weak fairness&lt;/a&gt;&lt;/span&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;  
    &lt;tr&gt;
      &lt;td&gt;strongly fair&lt;/td&gt;
      &lt;td&gt;see &lt;a href="#strong fairness"&gt;strong fairness&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="termination"&gt;termination&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;P&gt;execution stopped when it was supposed to&lt;BR&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4NtHUfXlf4g"&gt;Lecture 3 video&lt;/a&gt;&lt;/small&gt;&lt;/P&gt;
    See also &lt;a href="#deadlock"&gt;deadlock&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TLA&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;Temporal Logic of Actions&lt;br /&gt;
        a temporal logic developed for describing
and reasoning about concurrent and distributed systems&lt;br /&gt;
      &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/pubs/spec-and-verifying.pdf"&gt;Specifying and Verifying Systems With TLA+&lt;/a&gt;&lt;/small&gt; &lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TLAPS&lt;/td&gt;
      &lt;td&gt;&lt;a href="#TLA+"&gt;TLA+&lt;/a&gt; proof system. &lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt; and&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://tla.msr-inria.inria.fr/tlaps/content/Home.html"&gt;TLA+ Proof System (TLAPS)&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;&lt;a name="TLA+"&gt;TLA+&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;language for high-level modeling digital systems. Here "high-level" refers to the design aspects, above the code. Examples of digital systems: algorithms, programs, and computer systems. &lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
      &lt;p&gt;"a formal specification language based on (untyped) ZF
set theory, first-order logic, and TLA (the Temporal Logic of Actions)"&lt;br /&gt;
      &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/pubs/spec-and-verifying.pdf"&gt;Specifying and Verifying Systems With TLA+&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://lamport.azurewebsites.net/tla/tla2-guide.pdf"&gt;TLA+ version 2 user guide&lt;/a&gt;&amp;nbsp;(2018)&lt;/p&gt;&lt;p&gt;&lt;a href="https://lamport.azurewebsites.net/tla/hyperbook.html"&gt;TLA+ hyperbook&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="toolbox"&gt;TLA+ toolbox&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Integrated_development_environment"&gt;IDE&lt;/a&gt; for &lt;a href="#TLA+"&gt;TLA+&lt;/a&gt;.
          &lt;br /&gt;&lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=p54W-XOIEF8"&gt;Lecture 1 video&lt;/a&gt;&lt;/small&gt;.&lt;br /&gt;&lt;br /&gt;
          &lt;a href="https://lamport.azurewebsites.net/tla/toolbox.html"&gt;Toolbox website&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TLC&lt;/td&gt;
      &lt;td&gt;on-the-fly &lt;u&gt;model checker&lt;/u&gt; for debugging &lt;a href="#TLA+"&gt;TLA+&lt;/a&gt; specifications&lt;br /&gt;
      &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/pubs/spec-and-verifying.pdf"&gt;Specifying and Verifying Systems With TLA+&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="TRUE"&gt;&lt;span style="font-family: courier;"&gt;TRUE&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;See also &lt;a href="#FALSE"&gt;&lt;span style="font-family: courier;"&gt;FALSE&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VARIABLE&lt;/td&gt;
      &lt;td&gt;&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VARIABLES&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a name="weak fairness"&gt;weak fairness&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;the process must keep taking steps if it can&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;See also &lt;a href="#strong fairness"&gt;strong fairness&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;weakly fair&lt;/td&gt;
      &lt;td&gt;see &lt;a href="#weak fairness"&gt;weak fairness&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;&lt;b&gt;/\&lt;/b&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;and&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;&lt;b&gt;\/&lt;/b&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;or&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://www.youtube.com/watch?v=4snwZl726c4"&gt;Lecture 2 video&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;&lt;b&gt;&amp;lt;&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;aka eventually&lt;br /&gt;
        For any state predicate P, the formula &amp;lt;&amp;gt;P is true of a behavior iff P is true of at least one state of the behavior.&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;&lt;b&gt;[]&lt;/b&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;aka always&lt;br /&gt;
        For any state predicate P, the formula &amp;lt;&amp;gt;P is true of a behavior iff P is true of at least one state of the behavior.&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;&lt;b&gt;~&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;p&gt;aka leads to&lt;br /&gt;
        &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/session9.html"&gt;session 9&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;&lt;b&gt;'&lt;/b&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;aka prime&lt;br /&gt;
        next value&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;




&lt;h1&gt;&lt;br /&gt;&lt;/h1&gt;&lt;h1&gt;In module &lt;span style="font-family: courier;"&gt;Sequences&lt;/span&gt;&lt;/h1&gt;
See &lt;a href="https://lamport.azurewebsites.net/tla/summary-standalone.pdf"&gt;TLA+ summary&lt;/a&gt; page 8 of 9, and &lt;a href="https://lamport.azurewebsites.net/tla/summary.pdf"&gt;this summary&lt;/a&gt;.
&lt;table border="1"&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;jargon&lt;/th&gt;
      &lt;th&gt;definition&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;Append(seq,e)&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;the sequence obtained by appending the value &lt;span style="font-family: courier;"&gt;e&lt;/span&gt; as the new last element of the sequence &lt;span style="font-family: courier;"&gt;seq&lt;/span&gt;. For example,&lt;br /&gt;&lt;span style="font-family: courier;"&gt;Append(&amp;lt;&amp;lt;1, 2&amp;gt;&amp;gt;, 42)&lt;/span&gt; equals &lt;span style="font-family: courier;"&gt;&amp;lt;&amp;lt;1, 2, 42&amp;gt;&amp;gt;&lt;/span&gt;.&lt;br /&gt;
      &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/intermezzo1.html"&gt;intermezzo 1&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span style="font-family: courier;"&gt;Head(seq)&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;the first element of a non-empty sequence &lt;span style="font-family: courier;"&gt;seq&lt;/span&gt;.  For example, &lt;span style="font-family: courier;"&gt;Head(&amp;lt;&amp;lt;"a", "c", "b"&amp;gt;&amp;gt;)&lt;/span&gt; equals &lt;span style="font-family: courier;"&gt;"a"&lt;/span&gt;.&lt;br /&gt;
      &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/intermezzo1.html"&gt;intermezzo 1&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\o&lt;/td&gt;
      &lt;td&gt;aka concatenation&lt;br /&gt;
        "&lt;span style="font-family: courier;"&gt;seq1 \o seq2&lt;/span&gt; is the sequence obtained by concatinating the sequences &lt;span style="font-family: courier;"&gt;seq1&lt;/span&gt; and &lt;span style="font-family: courier;"&gt;seq2&lt;/span&gt; in the obvious way.  For example, &lt;span style="font-family: courier;"&gt;seq \o &amp;lt;&amp;lt;e&amp;gt;&amp;gt;&lt;/span&gt; equals &lt;span style="font-family: courier;"&gt;Append(seq,e)&lt;/span&gt; for any sequence &lt;span style="font-family: courier;"&gt;seq&lt;/span&gt; and value &lt;span style="font-family: courier;"&gt;e&lt;/span&gt;."&lt;br /&gt;
      &lt;small&gt;&lt;i&gt;Source&lt;/i&gt;: &lt;a href="https://lamport.azurewebsites.net/tla/tutorial/intermezzo1.html"&gt;intermezzo 1&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2022-10-08T17:21:26.068Z</blogger:created>
    <published>2022-10-08T17:35:00.014Z</published>
    <updated>2022-10-10T01:08:35.951Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='glossary'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='TLA+'/>
    <blogger:filename>/2022/10/glossary-for-tla-jargon.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7215831557769646700</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>plan of record for parsing Latex expressions</title>
    <content type='html'>I'm assuming there's an interactive feedback loop with the user in the Physics Derivation Graph, whereas that's not the case for bulk content like arXiv. How to respond to ambiguity depends on whether we can assume the user is available for clarifications.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Given an input string to parse,&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;Is the string valid Latex? If yes, continue; if no, return to user with complaint&lt;/li&gt;
&lt;li&gt;Is the string valid mathematical Latex? If yes, continue; if no, return to user with complaint&lt;/li&gt;
&lt;li&gt;Can the mathematical Latex be parsed without ambiguity? If yes, return SymPy to user; if no, continue&lt;/li&gt;
&lt;li&gt;If there is ambiguity, can the ambiguity be resolved by used a different flavor of the grammar? If no, return the options to the user so they can select the right parsing.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Removing markup specific to display may be relevant. For example, replacing "\ " with " " and replacing "\quad" with " " and replacing "\qquad" with " " and replacing "\left(" with "(" would reduce the parser workload.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Example of invalid math Latex:&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\frac a b&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The user probably intended&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\frac{a}{b}&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-15T20:47:08.274Z</blogger:created>
    <published>2020-08-15T20:50:00.001Z</published>
    <updated>2020-08-15T21:35:38.444Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/plan-of-record-for-parsing-latex.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7217167079119620305</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>LLM that includes the concept of inference rules</title>
    <content type='html'>&lt;p&gt;&lt;i&gt;Question&lt;/i&gt;: What's the difference between a plain old search engine and an LLM+RAG?&lt;br /&gt;&lt;i&gt;Answer&lt;/i&gt;: LLM+RAG provides an experience like semantic search capability plus synthesis but without the need for semantic tagging on the front-end or the back-end.&amp;nbsp;&lt;br /&gt;[&lt;a href="https://www.sbert.net/examples/applications/semantic-search/README.html#semantic-search"&gt;https://www.sbert.net/examples/applications/semantic-search/README.html#semantic-search&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;&lt;i&gt;Relevance to the Physics Derivation Graph&lt;/i&gt;: add the following to an existing large language model (LLM)
  &lt;/p&gt;&lt;ul style="text-align: left;"&gt;
    &lt;li&gt;the list of inference rules for the Physics Derivation Graph&lt;/li&gt;
    &lt;li&gt;examples of Latex-to-Sage conversion&lt;/li&gt;
    &lt;li&gt;example Lean4 proofs&lt;/li&gt;&lt;/ul&gt;

"fine tuning" versus "context provision"&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;How is "context provision" different from RAG?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div&gt;What's the difference between a transformer and a model?&lt;/div&gt;
  &lt;div&gt;&lt;a href="https://huggingface.co/docs/transformers/main/model_doc/llama2"&gt;https://huggingface.co/docs/transformers/main/model_doc/llama2&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;a href="https://huggingface.co/meta-llama"&gt;https://huggingface.co/meta-llama&lt;/a&gt;&lt;/div&gt;&lt;div&gt;specifically&lt;/div&gt;&lt;div&gt;&lt;a href="https://huggingface.co/meta-llama/Llama-2-7b-chat"&gt;https://huggingface.co/meta-llama/Llama-2-7b-chat&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;



  
    &lt;div&gt;&lt;br /&gt;&lt;/div&gt;
    
    &lt;div&gt;&lt;br /&gt;&lt;/div&gt;
  
  &lt;h2&gt;output of help for llama.cpp&lt;/h2&gt;
&lt;pre&gt;docker run -it --rm  -v `pwd`:/scratch llama-cpp-with-mistral-7b-v0.1.q6_k:2023-12-22 /bin/bash 
root@dc98ac4a23d5:/opt/llama.cpp# ./main -h

usage: ./main [options]

options:
  -h, --help            show this help message and exit
      --version         show version and build info
  -i, --interactive     run in interactive mode
  --interactive-first   run in interactive mode and wait for input right away
  -ins, --instruct      run in instruction mode (use with Alpaca models)
  -cml, --chatml        run in chatml mode (use with ChatML-compatible models)
  --multiline-input     allows you to write or paste multiple lines without ending each in '\'
  -r PROMPT, --reverse-prompt PROMPT
                        halt generation at PROMPT, return control in interactive mode
                        (can be specified more than once for multiple prompts).
  --color               colorise output to distinguish prompt and user input from generations
  -s SEED, --seed SEED  RNG seed (default: -1, use random seed for &amp;lt; 0)
  -t N, --threads N     number of threads to use during generation (default: 20)
  -tb N, --threads-batch N
                        number of threads to use during batch and prompt processing (default: same as --threads)
  -p PROMPT, --prompt PROMPT
                        prompt to start generation with (default: empty)
  -e, --escape          process prompt escapes sequences (\n, \r, \t, \', \", \\)
  --prompt-cache FNAME  file to cache prompt state for faster startup (default: none)
  --prompt-cache-all    if specified, saves user input and generations to cache as well.
                        not supported with --interactive or other interactive options
  --prompt-cache-ro     if specified, uses the prompt cache but does not update it.
  --random-prompt       start with a randomized prompt.
  --in-prefix-bos       prefix BOS to user inputs, preceding the `--in-prefix` string
  --in-prefix STRING    string to prefix user inputs with (default: empty)
  --in-suffix STRING    string to suffix after user inputs with (default: empty)
  -f FNAME, --file FNAME
                        prompt file to start generation.
  -n N, --n-predict N   number of tokens to predict (default: -1, -1 = infinity, -2 = until context filled)
  -c N, --ctx-size N    size of the prompt context (default: 512, 0 = loaded from model)
  -b N, --batch-size N  batch size for prompt processing (default: 512)
  --samplers            samplers that will be used for generation in the order, separated by ';', for example: "top_k;tfs;typical;top_p;min_p;temp"
  --sampling-seq        simplified sequence for samplers that will be used (default: kfypmt)
  --top-k N             top-k sampling (default: 40, 0 = disabled)
  --top-p N             top-p sampling (default: 0.9, 1.0 = disabled)
  --min-p N             min-p sampling (default: 0.1, 0.0 = disabled)
  --tfs N               tail free sampling, parameter z (default: 1.0, 1.0 = disabled)
  --typical N           locally typical sampling, parameter p (default: 1.0, 1.0 = disabled)
  --repeat-last-n N     last n tokens to consider for penalize (default: 64, 0 = disabled, -1 = ctx_size)
  --repeat-penalty N    penalize repeat sequence of tokens (default: 1.1, 1.0 = disabled)
  --presence-penalty N  repeat alpha presence penalty (default: 0.0, 0.0 = disabled)
  --frequency-penalty N repeat alpha frequency penalty (default: 0.0, 0.0 = disabled)
  --mirostat N          use Mirostat sampling.
                        Top K, Nucleus, Tail Free and Locally Typical samplers are ignored if used.
                        (default: 0, 0 = disabled, 1 = Mirostat, 2 = Mirostat 2.0)
  --mirostat-lr N       Mirostat learning rate, parameter eta (default: 0.1)
  --mirostat-ent N      Mirostat target entropy, parameter tau (default: 5.0)
  -l TOKEN_ID(+/-)BIAS, --logit-bias TOKEN_ID(+/-)BIAS
                        modifies the likelihood of token appearing in the completion,
                        i.e. `--logit-bias 15043+1` to increase likelihood of token ' Hello',
                        or `--logit-bias 15043-1` to decrease likelihood of token ' Hello'
  --grammar GRAMMAR     BNF-like grammar to constrain generations (see samples in grammars/ dir)
  --grammar-file FNAME  file to read grammar from
  --cfg-negative-prompt PROMPT
                        negative prompt to use for guidance. (default: empty)
  --cfg-negative-prompt-file FNAME
                        negative prompt file to use for guidance. (default: empty)
  --cfg-scale N         strength of guidance (default: 1.000000, 1.0 = disable)
  --rope-scaling {none,linear,yarn}
                        RoPE frequency scaling method, defaults to linear unless specified by the model
  --rope-scale N        RoPE context scaling factor, expands context by a factor of N
  --rope-freq-base N    RoPE base frequency, used by NTK-aware scaling (default: loaded from model)
  --rope-freq-scale N   RoPE frequency scaling factor, expands context by a factor of 1/N
  --yarn-orig-ctx N     YaRN: original context size of model (default: 0 = model training context size)
  --yarn-ext-factor N   YaRN: extrapolation mix factor (default: 1.0, 0.0 = full interpolation)
  --yarn-attn-factor N  YaRN: scale sqrt(t) or attention magnitude (default: 1.0)
  --yarn-beta-slow N    YaRN: high correction dim or alpha (default: 1.0)
  --yarn-beta-fast N    YaRN: low correction dim or beta (default: 32.0)
  --ignore-eos          ignore end of stream token and continue generating (implies --logit-bias 2-inf)
  --no-penalize-nl      do not penalize newline token
  --temp N              temperature (default: 0.8)
  --logits-all          return logits for all tokens in the batch (default: disabled)
  --hellaswag           compute HellaSwag score over random tasks from datafile supplied with -f
  --hellaswag-tasks N   number of tasks to use when computing the HellaSwag score (default: 400)
  --keep N              number of tokens to keep from the initial prompt (default: 0, -1 = all)
  --draft N             number of tokens to draft for speculative decoding (default: 8)
  --chunks N            max number of chunks to process (default: -1, -1 = all)
  -np N, --parallel N   number of parallel sequences to decode (default: 1)
  -ns N, --sequences N  number of sequences to decode (default: 1)
  -pa N, --p-accept N   speculative decoding accept probability (default: 0.5)
  -ps N, --p-split N    speculative decoding split probability (default: 0.1)
  -cb, --cont-batching  enable continuous batching (a.k.a dynamic batching) (default: disabled)
  --mmproj MMPROJ_FILE  path to a multimodal projector file for LLaVA. see examples/llava/README.md
  --image IMAGE_FILE    path to an image file. use with multimodal models
  --mlock               force system to keep model in RAM rather than swapping or compressing
  --no-mmap             do not memory-map model (slower load but may reduce pageouts if not using mlock)
  --numa                attempt optimizations that help on some NUMA systems
                        if run without this previously, it is recommended to drop the system page cache before using this
                        see https://github.com/ggerganov/llama.cpp/issues/1437
  --verbose-prompt      print prompt before generation
  -dkvc, --dump-kv-cache
                        verbose print of the KV cache
  -nkvo, --no-kv-offload
                        disable KV offload
  -ctk TYPE, --cache-type-k TYPE
                        KV cache data type for K (default: f16)
  -ctv TYPE, --cache-type-v TYPE
                        KV cache data type for V (default: f16)
  --simple-io           use basic IO for better compatibility in subprocesses and limited consoles
  --lora FNAME          apply LoRA adapter (implies --no-mmap)
  --lora-scaled FNAME S apply LoRA adapter with user defined scaling S (implies --no-mmap)
  --lora-base FNAME     optional model to use as a base for the layers modified by the LoRA adapter
  -m FNAME, --model FNAME
                        model path (default: models/7B/ggml-model-f16.gguf)
  -md FNAME, --model-draft FNAME
                        draft model for speculative decoding
  -ld LOGDIR, --logdir LOGDIR
                        path under which to save YAML logs (no logging if unset)
  --override-kv KEY=TYPE:VALUE
                        advanced option to override model metadata by key. may be specified multiple times.
                        types: int, float, bool. example: --override-kv tokenizer.ggml.add_bos_token=bool:false

log options:
  --log-test            Run simple logging test
  --log-disable         Disable trace logs
  --log-enable          Enable trace logs
  --log-file            Specify a log filename (without extension)
  --log-new             Create a separate new log file on start. Each log file will have unique name: "&amp;lt;name&amp;gt;.&amp;lt;ID&amp;gt;.log"
  --log-append          Don't truncate the old log file.
&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-12-20T01:03:21.617Z</blogger:created>
    <published>2023-12-20T01:05:00Z</published>
    <updated>2023-12-26T07:53:00.059Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='llm'/>
    <blogger:filename>/2023/12/fine-tuning-large-language-model-to.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7241477075425817760</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>SQLite on Mac and in Python</title>
    <content type='html'>&lt;a href="http://souptonuts.sourceforge.net/readme_sqlite_tutorial.html"&gt;http://souptonuts.sourceforge.net/readme_sqlite_tutorial.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://www.sqlite.org/datatype3.html"&gt;https://www.sqlite.org/datatype3.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://zetcode.com/db/sqlitepythontutorial/"&gt;http://zetcode.com/db/sqlitepythontutorial/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Python&lt;br /&gt;
&lt;a href="http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html"&gt;http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;import sqlite3&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Mac&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;sqlite3&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;sqlite3 test.db&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2015-11-30T16:09:51.171Z</blogger:created>
    <published>2015-11-30T16:14:00Z</published>
    <updated>2015-11-30T16:14:09.317Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/11/sqlite-on-mac-and-in-python.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7292638446304904031</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Lots of tasks for 2022; what are the priorities</title>
    <content type='html'>&lt;p&gt;With the JSON/SQL implementation, I showed myself that what I was imagining (Latex entry, CAS integration, symbol tracking, Latex/PDF output) was in fact feasible. However, the JSON/SQL backend and the forms-based web front-end were sufficiently embarrassing that I wasn't interested in showing off the idea.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Now my goal with the Neo4j/SQL backend my goal is 1) provide query capability and 2) to not be embarrassed.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;High priority:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Property graph implementation from scratch; probably Neo4j --&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/171"&gt;https://github.com/allofphysicsgraph/proofofconcept/issues/171&lt;/a&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;web search --&amp;nbsp;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/238"&gt;https://github.com/allofphysicsgraph/proofofconcept/issues/238&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;integrating SQL for variables, inference rules, units&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;automation of inference rules&lt;/li&gt;&lt;li&gt;add derivation, add step, add expressions -- form-based or dynamic canvas?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Low priority:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;analysis of server logs --&amp;nbsp;https://github.com/allofphysicsgraph/proofofconcept/issues/246&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-02-21T22:20:20.001Z</blogger:created>
    <published>2022-02-21T22:23:00.005Z</published>
    <updated>2022-03-07T01:38:25.173Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/02/lots-of-tasks-what-are-priorities.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7295468347581153490</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Next steps once math expressions are tokenized</title>
    <content type='html'>&lt;p&gt;In my &lt;a href="https://physicsderivationgraph.blogspot.com/2022/05/searchable-latex-semantic-enrichment.html"&gt;previous post&lt;/a&gt; I outlined a sequence of steps with a negative framing about how difficult each step would be. A positive framing of the sequence is

&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;Analyze .tex from arxiv and account for issues like encoding and misspelling and mal-formed latex and expansion of macros.
&lt;/li&gt;&lt;li&gt;Once the math (e.g. $x$) and expressions are separated from the text, tokenize variables within expressions. 
&lt;/li&gt;&lt;li&gt;Once variables are tokenized within expressions, identifying the concept (e.g., name of constants) based on the text in the paper. 
&lt;/li&gt;&lt;li&gt;Reconcile variables across different .tex files in arxiv
&lt;/li&gt;&lt;li&gt;Create an interface providing semantically-enriched arxiv content that is indexed for search queries to users. 
&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Suppose we are at step 2 and everything in a document is correctly tokenized (or even if just a fraction&amp;nbsp; of the content is tokenized). The follow-on step (3) would be to detect the definition of the tokens from the text. For example, if the variable "a" shows up in an expression, and $a$ shows up in the text, and the text is something like 
&lt;/p&gt;&lt;pre&gt;"where $a$ is the number of cats in the house"
&lt;/pre&gt;
Then we can deduce that "a" is defined as "number of cats in the house".

&lt;p&gt;Step 4 would be to figure out if "a" is used similarly in other papers. That would indicate a relation of the papers based on the topic of the content.
See for example&amp;nbsp;&lt;a href="https://arxiv.org/pdf/1902.00027.pdf"&gt;https://arxiv.org/pdf/1902.00027.pdf&lt;/a&gt;
  
&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Another use case for tokenized text (in step 2) with some semantic meaning (step 3) would be to validate the expressions.
If the expression is "a = b" and the two variables have different units, that means the expression is wrong.
&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2022-05-28T21:07:43.291Z</blogger:created>
    <published>2022-05-28T21:14:00.004Z</published>
    <updated>2022-05-28T21:16:32.318Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2022/05/next-steps-once-math-expressions-are.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7381850526824069102</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>SQL schema</title>
    <content type='html'>Tables as bullets, columns per table as sub-bullets:&amp;nbsp;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;expressions&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;unique numeric ID&lt;/li&gt;
&lt;li&gt;Latex&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;inference rules&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;unique string name&lt;/li&gt;
&lt;li&gt;text expansion in Latex&lt;/li&gt;
&lt;li&gt;number of input arguments&lt;/li&gt;
&lt;li&gt;number of output arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
For each "name of derivation",
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;edge list&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;source temp index&lt;/li&gt;
&lt;li&gt;destination temp index&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;expression identifiers&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;unique numeric ID&lt;/li&gt;
&lt;li&gt;temp index&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;inference rule identifiers&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;unique string name&lt;/li&gt;
&lt;li&gt;temp index&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;feeds&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;temp index&lt;/li&gt;
&lt;li&gt;Latex&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2019-06-03T10:37:01.678Z</blogger:created>
    <published>2019-06-03T10:38:00.003Z</published>
    <updated>2019-06-03T10:38:32.544Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/06/sql-schema.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7453825648912483370</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>example Latex expressions to parse</title>
    <content type='html'>&lt;h3&gt;
valid math latex in order of increasing complexity&lt;/h3&gt;
a = b&lt;br /&gt;
&lt;br /&gt;
\sin x&lt;br /&gt;
&lt;br /&gt;
\sin x \in f&lt;br /&gt;
&lt;br /&gt;
f \in g&lt;br /&gt;
&lt;h3&gt;
invalid math latex in order of increasing complexity&lt;/h3&gt;
a = b +&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; operator with no input&lt;br /&gt;
&lt;br /&gt;
\sin x \left(&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; unpaired "("&lt;br /&gt;
&lt;br /&gt;
\sin x \sum&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;operator with no input&lt;br /&gt;
&lt;h3&gt;
valid ambiguous latex in order of increasing complexity&lt;/h3&gt;
1/2\pi = (1/2) \pi&amp;nbsp; OR 1/(2 \pi); source:&amp;nbsp;&lt;a href="https://www.ntg.nl/maps/26/16.pdf"&gt;https://www.ntg.nl/maps/26/16.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
\sin x / y = (\sin x)/y&amp;nbsp; OR \sin (x/y); source:&amp;nbsp;&lt;a href="https://www.ntg.nl/maps/26/16.pdf"&gt;https://www.ntg.nl/maps/26/16.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
\sin x + 2 = (\sin x) + 2&amp;nbsp; OR \sin (x + 2)&lt;br /&gt;
&lt;br /&gt;
https://math.stackexchange.com/a/1025217&lt;br /&gt;
https://math.stackexchange.com/a/1026483&lt;br /&gt;
&lt;h3&gt;
valid ambiguous latex in a step in which the ambiguity can be resolved&lt;/h3&gt;
input expression: \sin x / y = g&lt;br /&gt;
inf rule: multiply both sides by y&lt;br /&gt;
output expression: \sin x = g y&lt;br /&gt;
&lt;br /&gt;
Here the input expression is ambiguous -- it isn't clear whether "\sin x / y" = (\sin x)/y&amp;nbsp; OR \sin (x/y)&lt;br /&gt;
The output expression implies that (\sin x)/y was the user's intention.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
input expression: \sin x + 2 = g&lt;br /&gt;
inf rule: subtract "2" from both sides&lt;br /&gt;
output expression: \sin x = g - 2&lt;br /&gt;
&lt;br /&gt;
Here the input expression is ambiguous -- it isn't clear whether "\sin x + 2" = (\sin x) + 2&amp;nbsp; OR \sin (x + 2)&lt;br /&gt;
The output expression implies that (\sin x) + 2 was the user's intention.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
valid ambiguous latex in a step in which the ambiguity cannot be resolved&lt;/h3&gt;
a = b</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-04T02:03:41.640Z</blogger:created>
    <published>2020-02-04T02:20:00.002Z</published>
    <updated>2020-02-04T10:55:53.464Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/02/example-latex-expressions-to-parse.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7463077294974798948</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>What I want to do with the Physics Derivation Graph</title>
    <content type='html'>For the past few years, completing the Physics Derivation Graph seemed infeasible in one lifetime. This meant I would get a partial result in one lifetime, or I'd have to find motivated collaborators willing to spend part of their lifetime. Working alone towards a partial result wasn't attractive, and I haven't had much success finding collaborators. Faced with these two options, I did almost no work on the project.&lt;br /&gt;
&lt;br /&gt;
A few months ago I realized an exit strategy would be to get the Physics Derivation Graph to the point that I'd be comfortable handing it off to other folks. That way the project wouldn't be bottlenecked by my productivity. This insight resulted in focusing on bugs and inconsistencies which would need to be addressed prior to handing the project off to someone else.&lt;br /&gt;
&lt;br /&gt;
Today I envisioned what success would look like in light of the central claim that "mathematical physics can be represented by a single graph."&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;By "graph" I actually mean three levels of granularity: the symbols composing expressions as abstract syntax trees, expressions and inference rules composing derivations, and the relation between topics composed from derivations.&lt;/li&gt;
&lt;li&gt;The scope of Mathematical Physics is broad, but there are&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Outline_of_physics#Branches_of_physics"&gt;major topics&lt;/a&gt; which need to be included in order to claim completeness: quantum mechanics, classical mechanics, electromagnetics, thermodynamics, relativity, particle physics, cosmology, and astronomy.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
For each of the major topics, there are &lt;a href="https://en.wikipedia.org/wiki/Outline_of_physics#General_concepts_of_physics"&gt;corresponding concepts&lt;/a&gt; that can be represented mathematically:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Quantum_mechanics"&gt;quantum mechanics&lt;/a&gt;: &lt;a href="https://en.wikipedia.org/wiki/Quantum_mechanics#Particle_in_a_box"&gt;particle in a box&lt;/a&gt;, Schrodinger's equation, uncertainty&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_equations_in_classical_mechanics"&gt;classical mechanics&lt;/a&gt;: work, F=m*a, momentum&lt;/li&gt;
&lt;li&gt;electromagnetics: Maxwell's equations&lt;/li&gt;
&lt;li&gt;thermodynamics: Planck's Law&lt;/li&gt;
&lt;li&gt;relativity: Dirac equation&lt;/li&gt;
&lt;li&gt;particle physics: Dirac equation&lt;/li&gt;
&lt;li&gt;cosmology&lt;/li&gt;
&lt;li&gt;astronomy&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
Finally, the claim is that each of these topics is related via mathematics. Example: harmonic oscillator occurs in quantum and classical</content>
    <blogger:metaDescription/>
    <blogger:created>2016-05-27T22:01:52.850Z</blogger:created>
    <published>2016-05-27T22:20:00.002Z</published>
    <updated>2016-05-27T23:19:45.936Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/05/figured-out-what-i-want-to-do-with.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7490141640227350003</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>summarization, information retrieval, and creative synthesis</title>
    <content type='html'>Large Language Models like ChatGPT are a hot topic due to the novelty of results in multiple application domains. Stepping back from the hype, the central capabilities seem to include summarization of content, information retrieval, and creative synthesis. Unfortunately those are not separate categories -- the summarization or information retrieval can contain hallucinations that get stated confidently.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Focusing on the topic of information retrieval and setting aside hallucinations, let's consider alternative mechanisms for search:&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;plain text search, like what Google supports&lt;/li&gt;&lt;li&gt;boolean logic, i.e., AND/OR/NOT&lt;/li&gt;&lt;li&gt;use of special indicators like&amp;nbsp;wild cards, quotes for exact search&lt;/li&gt;&lt;li&gt;regular expressions&lt;/li&gt;&lt;li&gt;graph queries for inference engines that support inductive, deductive, and abduction&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Except for the last, those search mechanisms all return specific results from a previously collected set of sources.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;--&amp;gt; I expect conventional search to remain important. There are cases where I really am looking for a specific document and not a summarization.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;--&amp;gt; Specialized search capabilities like regular expressions and wild cards will remain relevant for matching specific text strings. An LLM might provide suggestions on designing the regex?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;--&amp;gt; Graph queries rely on bespoke databases that LLMs are not trained on currently. I'm not aware of any reason these can't be combined.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The Physics Derivation Graph effectively provides a knowledge graph for mathematical Physics. Combining this with machine learning is feasible.&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-05T00:34:58.701Z</blogger:created>
    <published>2023-06-05T01:09:00.002Z</published>
    <updated>2023-06-05T01:09:16.680Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2023/06/summarization-information-retrieval-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7522693342358584593</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>ufw allow status numbered delete -- managing the firewall</title>
    <content type='html'>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ sudo ufw status verbose&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Status: active&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Logging: on (low)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Default: deny (incoming), allow (outgoing), deny (routed)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;New profiles: skip&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;To&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Action&amp;nbsp; &amp;nbsp; &amp;nbsp; From&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;--&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;------&amp;nbsp; &amp;nbsp; &amp;nbsp; ----&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;22/tcp&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;LIMIT IN&amp;nbsp; &amp;nbsp; Anywhere&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;443/tcp&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;80/tcp&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;25&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;22/tcp (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; LIMIT IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;443/tcp (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;80/tcp (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;25 (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ sudo ufw allow 8000/tcp&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Rule added&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Rule added (v6)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ sudo&amp;nbsp; ufw status numbered&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Status: active&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;To&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Action&amp;nbsp; &amp;nbsp; &amp;nbsp; From&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;--&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;------&amp;nbsp; &amp;nbsp; &amp;nbsp; ----&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ 1] 22/tcp&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;LIMIT IN&amp;nbsp; &amp;nbsp; Anywhere&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ 2] 443/tcp&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ 3] 80/tcp&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ 4] 22/tcp (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; LIMIT IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ 5] 443/tcp (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ 6] 80/tcp (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ 7] 25 (v6)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ALLOW IN&amp;nbsp; &amp;nbsp; Anywhere (v6)&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ sudo ufw delete 7&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Deleting:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;allow 25&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Proceed with operation (y|n)? y&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Rule deleted (v6)&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-04T15:14:19.087Z</blogger:created>
    <published>2020-09-04T15:24:00.002Z</published>
    <updated>2020-09-20T19:43:26.044Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='server management'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='ufw'/>
    <blogger:filename>/2020/09/ufw-allow-status-numbered-delete.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7542306762087551581</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>converting the Physics Derivation Graph from CSV to a property graph</title>
    <content type='html'>I started the Physics Derivation Graph as a plain-text CSV set of files. I then converted the content to XML files. The current instance of the Physics Derivation Graph is back to a set of CSVs. CSV is attractive for its universal parsability and human readability.&lt;br /&gt;
&lt;br /&gt;
Recently I learned about property graphs. Expanding on the node/edge idea of graphs, a property graph adds types and properties:&lt;br /&gt;
&lt;br /&gt;
Nodes have&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;node id&lt;/li&gt;
&lt;li&gt;node type&lt;/li&gt;
&lt;li&gt;node property (key-value pair)&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Edges have&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;edge id&lt;/li&gt;
&lt;li&gt;edge type&lt;/li&gt;
&lt;li&gt;edge property (key-value pair)&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Using syntax from &lt;a href="http://neo4j.com/"&gt;Neo4j&lt;/a&gt; for a simple example,&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CREATE ( 149832:Expression { latex:"k=m j" } )&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CREATE&amp;nbsp;( 119831:Expression { latex:"k/j=m" } )&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CREATE ( 149832 )-[:DIVIDEBOTHSIDESBY { feed_1:"j" } ]-&amp;gt;( 119831 )&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Each expression is a node, and inference rules are directed edges.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
Complications in translating:&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;within each derivation, each expression has a local ID for latex labels.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;each expression belongs to one or more derivations&lt;/li&gt;
&lt;li&gt;each expression has a different representation in various CASs&lt;/li&gt;
&lt;li&gt;Latex uses a double quote ("), so parsing may break. Reference pictures instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CREATE ( 149832:Expression { picture: "149832.png", sympy:"k=m*j", local_tex_id:"59589", in_derivations:["maxwell","funky"] } )&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CREATE&amp;nbsp;( 119831:Expression { picture: "119831.png", sympy:"k/j=m",&amp;nbsp;local_tex_id:"58584",&amp;nbsp;in_derivations:"maxwell" } )&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CREATE ( 149832 )-[:DIVIDEBOTHSIDESBY { feed_1_picture: "4958.png" } ]-&amp;gt;( 119831 )&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: inherit;"&gt;Although property graphs could have an equivalent amount of information compared to the current CSV format, the complexity is not less than the current CSV method. Also, only Neo4j supports this context. Thus, I'm not currently motivated to switch to property graph representation.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;&lt;a href="http://www.remwebdevelopment.com/blog/sql/some-basic-and-useful-cypher-queries-for-neo4j-201.html"&gt;http://www.remwebdevelopment.com/blog/sql/some-basic-and-useful-cypher-queries-for-neo4j-201.html&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;&lt;a href="http://peterspangler.com/?p=147"&gt;http://peterspangler.com/?p=147&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-19T16:49:45.099Z</blogger:created>
    <published>2015-09-19T17:08:00.004Z</published>
    <updated>2015-12-09T03:19:02.871Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/converting-physics-derivation-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7547703636216351229</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>searching Math and Physics content</title>
    <content type='html'>The workflow for naive web search is&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;input query&lt;/li&gt;
&lt;li&gt;click on search&lt;/li&gt;
&lt;li&gt;get results&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
This is the dominant mindset and is based on use of Google for finding web content.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
Revising the search string is taken as a failure.&lt;/div&gt;
&lt;div&gt;
Looking at the second page of results is taken as a failure.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
That doesn't need to be the process for search. Interactive refinement of queries is a significant improvement since the user might not realize what's available.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjaZO9nwvzqUF0yGe-K1reL-JIKEooFQDMtg8_pQh-mVyN0KZ_7jwcgw61pkDhr4IO3kxhCL0DcVy-faA53in4NLA8TsK5ht-Z8EuJknw9ivnNsFKnqYJmJbhwPaITgjmNTSU1bYAOHnZHW/s1600/Screen+Shot+2020-07-30+at+1.53.28+PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="596" data-original-width="614" height="310" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjaZO9nwvzqUF0yGe-K1reL-JIKEooFQDMtg8_pQh-mVyN0KZ_7jwcgw61pkDhr4IO3kxhCL0DcVy-faA53in4NLA8TsK5ht-Z8EuJknw9ivnNsFKnqYJmJbhwPaITgjmNTSU1bYAOHnZHW/s320/Screen+Shot+2020-07-30+at+1.53.28+PM.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
What would searching Math and Physics be like?&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Leveraging Latex would be important since that is the style the bulk of content uses.&lt;/li&gt;
&lt;li&gt;Tagging sections would be useful to differentiate claim/lemma/theorem. Documents with sTeX markup or OMdoc could provide better results.&lt;/li&gt;
&lt;li&gt;Identifying symbol meanings (operators, constants, variables) in expressions. Using "x" for position and "d" for position should be treated as equivalent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-30T17:46:50.692Z</blogger:created>
    <published>2020-07-31T13:03:00.001Z</published>
    <updated>2020-07-31T13:03:28.596Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/searching-math-and-physics-content.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7563672417967761094</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>forums to contribute to</title>
    <content type='html'>I don't expect people to&amp;nbsp;serendipitous stumble upon either this blog or &lt;a href="https://github.com/allofphysicsgraph/proofofconcept"&gt;the github page&lt;/a&gt; or &lt;a href="http://allofphysicsgraph.github.io/proofofconcept/"&gt;the project page&lt;/a&gt;. Therefore, part of my responsibility is to socialize the existence of my effort on forums that I think interested parties may already be a part of. Building a community, gaining a user base, and finding collaborators are potential outcomes.&lt;br /&gt;
&lt;br /&gt;
I don't want to simply advertise on these channels. Instead, I intend to provide value to address challenges participants face. By demonstrating value, the community for the Physics Derivation Graph grows. If the PDG doesn't provide value, then I shouldn't expect a community to develop.&lt;br /&gt;
&lt;br /&gt;
Brainstorming relevant channels,&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://physics.stackexchange.com/"&gt;physics.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/physics"&gt;https://stackoverflow.com/questions/tagged/physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://old.reddit.com/r/Physics/"&gt;https://old.reddit.com/r/Physics/&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://kiwiirc.com/client/irc.snoonet.org/#physics"&gt;https://kiwiirc.com/client/irc.snoonet.org/#physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.researchgate.net/topics?ev=nav_discussions"&gt;Researchgate questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://quora.com/topic/Physics"&gt;quora.com/topic/Physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hyperphysics.phy-astr.gsu.edu/hbase/hframe.html"&gt;HyperPhysics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-20T01:20:55.694Z</blogger:created>
    <published>2018-07-20T01:27:00.002Z</published>
    <updated>2018-07-20T01:28:55.246Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/forums-to-contribute-to.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7565377087855668285</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>expanding the list of Computer Algebra Systems used by the Physics Derivation Graph</title>
    <content type='html'>The current implementation of the&amp;nbsp;Physics Derivation Graph relies on user to 1) enter expressions as Latex and 2) assist/review the conversion from Latex to SymPy.&lt;br /&gt;
&lt;br /&gt;
The choice of Latex as the input interface is based on ease of use (conciseness, low barrier to entry) and could be replaced by other options for specifying expressions. Entering characters and then parsing into an AST could be applied to a variety of input methods. A second choice is what to use the AST for -- currently the output is Sympy,&amp;nbsp;but a variety of output representations is available (Sage, Mathematica, Maxima, etc).&lt;br /&gt;
&lt;br /&gt;
In my experience with Sage, expressions in Sage are not as compact. There seems to be less support for features like units (feet, meters, seconds) -- https://ask.sagemath.org/question/49511/working-with-units/&lt;br /&gt;
&lt;br /&gt;
I'm confident there are expressions in the PDG that Sage supports and SymPy does not. Expanding the CAS used by PDG means having three representations -- Latex and SymPy and Sage. The negative consequences of this expansion would include&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;increases the work needed to input the different representations, and&lt;/li&gt;
&lt;li&gt;increases the work of verifying consistency between representations, and&amp;nbsp;&lt;/li&gt;
&lt;li&gt;imposes extra knowledge requirements on the developer, and&lt;/li&gt;
&lt;li&gt;additional dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
The potential benefit would be coverage for validating some steps not currently possible with SymPy. There might be value to other people who want to compare SymPy to Sage.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-06T12:37:04.665Z</blogger:created>
    <published>2020-09-06T12:46:00.003Z</published>
    <updated>2020-09-20T19:43:05.016Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='strategy'/>
    <blogger:filename>/2020/09/expanding-list-of-computer-algebra.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7600395489260412532</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>representing inference rules as both LaTeX and Abstract Syntax Trees</title>
    <content type='html'>All inference rules in the Physics Derivation Graph are written in&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;. See the full list at&lt;br /&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/v4_file_per_expression/inference_rules"&gt;https://github.com/allofphysicsgraph/proofofconcept/tree/gh-pages/v4_file_per_expression/inference_rules&lt;/a&gt;&lt;br /&gt;
For example, the inference rule "add X to both sides" in LaTeX is&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
Add $#1$ to both sides of Eq.~\ref{eq:#2}.&lt;br /&gt;
&lt;/span&gt;
&lt;br /&gt;
&lt;h3&gt;
AST representation in plain text&lt;/h3&gt;
&lt;a href="https://calculem.us/abstract-binding-trees-1/"&gt;https://calculem.us/abstract-binding-trees-1/&lt;/a&gt;&lt;br /&gt;
Inference rules are transformations to the abstract syntax trees that represent expressions.&lt;br /&gt;
For example, the "add X to both sides" (addition property of equality) does the following transform:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
input:expression&lt;br /&gt;
op&lt;br /&gt;
&amp;nbsp; LHS&lt;br /&gt;
&amp;nbsp; RHS&lt;br /&gt;
&lt;br /&gt;
input:feed&lt;br /&gt;
x&lt;br /&gt;
&lt;br /&gt;
output:expression&lt;br /&gt;
op&lt;br /&gt;
&amp;nbsp; +&lt;br /&gt;
&amp;nbsp; &amp;nbsp; LHS&lt;br /&gt;
&amp;nbsp; &amp;nbsp; x&lt;br /&gt;
&amp;nbsp; +&lt;br /&gt;
&amp;nbsp; &amp;nbsp; RHS&lt;br /&gt;
&amp;nbsp; &amp;nbsp; x&lt;br /&gt;
&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;
Here I'm using a two space indent to show the tree structure of the AST.&lt;br /&gt;
The "LHS" and "RHS" are &lt;a href="https://en.wikipedia.org/wiki/Sides_of_an_equation"&gt;sides of the expression&lt;/a&gt;. The "op" is the &lt;a href="https://en.wikipedia.org/wiki/Relational_operator"&gt;operator&lt;/a&gt; relating LHS and RHS.&lt;br /&gt;
I wanted a format that is visually accessible and not to verbose, while capable of being converted to some other format.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Order matters&lt;/h3&gt;
My AST representation needs to include order. The expression "a-b" is distinct from "b-a" even though a tree doesn't specify the order:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
&lt;br /&gt;input:expression:1&lt;br /&gt;
op&lt;br /&gt;
&amp;nbsp; c&lt;br /&gt;
&amp;nbsp; -&lt;br /&gt;
&amp;nbsp; &amp;nbsp; a&lt;br /&gt;
&amp;nbsp; &amp;nbsp; b&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;which is distinct from&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
input:expression:2&lt;br /&gt;
op&lt;br /&gt;
&amp;nbsp; c&lt;br /&gt;
&amp;nbsp; -&lt;br /&gt;
&amp;nbsp; &amp;nbsp; b&lt;br /&gt;
&amp;nbsp; &amp;nbsp; a&lt;br /&gt;
&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;
This also applies to cross product since it's also non-commutative.&lt;br /&gt;
To provide clarification, I'll assume the "top-to-bottom" order in the above format corresponds to "left-to-right." With that specification, the top AST corresponds to "c=a-b" and the bottom AST is "c=b-a".&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
AST for integrals and derivatives&lt;/h3&gt;
&lt;div&gt;
Shown here:&amp;nbsp;&lt;a href="https://tug.org/TUGboat/tb12-3-4/tb33arnon.pdf"&gt;https://tug.org/TUGboat/tb12-3-4/tb33arnon.pdf&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
Mentioned here (&lt;a href="http://www.math.wpi.edu/IQP/BVCalcHist/calc5.html"&gt;http://www.math.wpi.edu/IQP/BVCalcHist/calc5.html&lt;/a&gt;) but not explored explicitly.&lt;br /&gt;
&lt;br /&gt;
A definite integral in Latex&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\int_{low}^{high}&amp;nbsp;LHS d(x) = \int_{low}^{high} RHS d(x)&lt;/span&gt;&lt;br /&gt;
can be written as an AST:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;input:expression&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;op&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \int&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; low&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; high&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; LHS&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; x&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; \int&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; low&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; high&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; RHS&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; x&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Similarly, a differential equation in Latex&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;\frac{d}{d(x)} LHS = \frac{d}{d(x)} RHS&lt;/span&gt;&lt;br /&gt;
can be written as an AST:&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;input:expression&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;op&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; dif&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; LHS&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; x&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; dif&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; RHS&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; x&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
AST for Dirac notation&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Distinguishing input and output expressions&lt;/h3&gt;
Some inference rules act on multiple expressions, and some inference rules produce multiple expressions (ie the taking the square root). Here's the AST for "add Eq1 to Eq2":&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
input:expression:1&lt;br /&gt;
op&lt;br /&gt;
&amp;nbsp; LHS:1&lt;br /&gt;
&amp;nbsp; RHS:1&lt;br /&gt;
&lt;br /&gt;
input:expression:2&lt;br /&gt;
op&lt;br /&gt;
&amp;nbsp; LHS:2&lt;br /&gt;
&amp;nbsp; RHS:2&lt;br /&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;output:expression&lt;br /&gt;
op&lt;br /&gt;
&amp;nbsp;&amp;nbsp;+&lt;br /&gt;
&amp;nbsp; &amp;nbsp; LHS:1&lt;br /&gt;
&amp;nbsp; &amp;nbsp; LHS:2&lt;br /&gt;
&amp;nbsp;&amp;nbsp;+&lt;br /&gt;
&amp;nbsp; &amp;nbsp; RHS:1&lt;br /&gt;
&amp;nbsp; &amp;nbsp; RHS:2&lt;br /&gt;
&lt;/span&gt;
&lt;br /&gt;
&lt;h3&gt;
&lt;/h3&gt;
&lt;h3&gt;
Complicated expressions as ASTs&lt;/h3&gt;
Some expressions are more complicated than simply "LHS = RHS". Suppose we have an expression
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
&lt;br /&gt;
y = { &amp;nbsp;x^2 &amp;nbsp; for x&amp;gt;0&lt;br /&gt;
&amp;nbsp; &amp;nbsp; { &amp;nbsp;0 &amp;nbsp; &amp;nbsp; for x&amp;lt;=0&lt;br /&gt;
&lt;/span&gt;
&lt;br /&gt;
I don't know how to represent this as an AST. Here's an attempt:&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
op&lt;br /&gt;
&amp;nbsp; y&lt;br /&gt;
&amp;nbsp; set&lt;br /&gt;
&amp;nbsp; &amp;nbsp; domain&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; ^&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;gt;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;br /&gt;
&amp;nbsp; &amp;nbsp; domain&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;=&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;br /&gt;
&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;
I needed to introduce two new symbols: "set" and "domain"&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
Related work&lt;/h3&gt;
&lt;div&gt;
&lt;a href="http://mathlex.org/bundles/mathlexmain/thesis.pdf"&gt;Mathlex thesis&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href="http://mathlex.org/doc/how-mathlex-works"&gt;http://mathlex.org/doc/how-mathlex-works&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2017-06-08T01:20:30.561Z</blogger:created>
    <published>2017-06-08T01:26:00Z</published>
    <updated>2019-07-28T08:57:46.957Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='abstract syntax tree'/>
    <blogger:filename>/2017/06/representing-inference-rules-as-both.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7617281717394697087</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>a single step fully verified using SymPy and Lean</title>
    <content type='html'>&lt;p&gt;As very simple example, start with the equation
&lt;/p&gt;&lt;pre&gt;T = 1/f 
&lt;/pre&gt;
where &lt;code&gt;T&lt;/code&gt; is period of oscillation and &lt;code&gt;f&lt;/code&gt; is frequency of oscillation.
A transformation would be to multiply both sides by &lt;code&gt;f&lt;/code&gt; to get
&lt;pre style="text-align: left;"&gt;f T = 1
&lt;/pre&gt;
&lt;h3 style="text-align: left;"&gt;Verification of a step using a Computer Algebra System like&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/SymPy"&gt;SymPy&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The single step above could be verified using a Computer Algebra System like &lt;a href="https://en.wikipedia.org/wiki/SymPy"&gt;SymPy&lt;/a&gt;. The generic form of the inference rule is "&lt;i&gt;multiply both sides of (LHS=RHS) by feed to get (LHS*feed=RHS*feed)&lt;/i&gt;". To show the inference rule was correctly applied, we want to show that&lt;/p&gt;
&lt;pre&gt;LHS_in*feed == LHS_out
and
RHS_in*feed == RHS_out
&lt;/pre&gt;
&lt;div&gt;Another way to describe the equivalence is that the difference should be zero:&lt;/div&gt;
&lt;pre&gt;LHS_in*feed - LHS_out = 0
and
RHS_in*feed - RHS_out = 0
&lt;/pre&gt;That's the generic formulation of the inference rule check. In this step, 
&lt;pre&gt;LHS_in = T
RHS_in = 1/f
feed = f
LHS_out = f T
RHS_out = 1
&lt;/pre&gt;&lt;p&gt;This check is implemented in &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v7_pickle_web_interface/flask/validate_steps_sympy.py#L496"&gt;line 496 of validate_steps_sympy.py&lt;/a&gt; as
&lt;/p&gt;&lt;pre&gt;import sympy
def multiply_both_sides_by(LHS_in, RHS_in, feed, LHS_out, RHS_out):
    diff1 = sympy.simplify(sympy.Mul(LHS_in, feed) - LHS_out)
    diff2 = sympy.simplify(sympy.Mul(RHS_in, feed) - RHS_out)
    if (diff1 == 0) and (diff2 == 0):
        return "valid"
    else:
        return "LHS diff is " + str(diff1) + "\n" + "RHS diff is " + str(diff2)
&lt;/pre&gt;We can run that using
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; import sympy
&amp;gt;&amp;gt;&amp;gt; print(sympy.__version__)
1.11.1
&amp;gt;&amp;gt;&amp;gt; f, T = sympy.symbols('f T')
&amp;gt;&amp;gt;&amp;gt; multiply_both_sides_by(T, 1/f, f, f*T, 1)
'valid'
&lt;/pre&gt;
&lt;p&gt;Wahoo! The step has been validated using SymPy to show the inference rule is applied correctly.&lt;/p&gt;&lt;p&gt;The cool part is that the "multiply_both_sides()" Python function is generic to any input expression. The same check can be used for many different steps that use the inference rule. Using SymPy we can gain confidence that the expressions associated with a step were correctly transformed.&amp;nbsp;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Consistency of dimensionality using SymPy&lt;/h3&gt;

&lt;p&gt;In addition to evaluating the transformation of symbols in a step, we can verify the consistency of dimensions for each expression. That requires more than just the symbols -- the user will have to specify the dimensions of each symbol.&lt;/p&gt;

&lt;p&gt;For example, in JSON for period T we have&lt;/p&gt;
&lt;pre&gt;        "9491": {
            "category": "variable",
            "dimensions": {
                "amount of substance": 0,
                "electric charge": 0,
                "length": 0,
                "luminous intensity": 0,
                "mass": 0,
                "temperature": 0,
                "time": 1
            },
            "latex": "T",
            "name": "period",
            "scope": [
                "real"
            ]
        },
&lt;/pre&gt;
&lt;p&gt;The script &lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/v7_pickle_web_interface/flask/validate_dimensions_sympy.py"&gt;validate_dimensions_sympy.py&lt;/a&gt;
&lt;/p&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; import sympy
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.units import mass, length, time, temperature, luminous_intensity, amount_of_substance, charge  # type: ignore
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.units.systems.si import dimsys_SI

&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex
&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex('T = 1/f'))

TODO
&amp;gt;&amp;gt;&amp;gt; determine_consistency = dimsys_SI.equivalent_dims( eval(str(LHS)), eval(str(RHS)) )
&lt;/pre&gt;

&lt;p&gt;See &lt;a href="https://physicsderivationgraph.blogspot.com/2020/07/function-latex-for-sympy.html"&gt;https://physicsderivationgraph.blogspot.com/2020/07/function-latex-for-sympy.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Verification of the step using Lean&lt;/h3&gt;
To prove:
&lt;pre&gt;(T=1/f) -&amp;gt; (f*T=1)&lt;/pre&gt;
&lt;p&gt;
Additional constraints are needed for reasoning around division by 0.

If you expect to avoid negative or zero frequency or period, you could f and T to have be "positive real numbers" (which exclude zero; non-negative reals include zero). This does define the context more precisely, but there is a price - we won’t have nearly as many proofs for positive reals as we have for reals. The alternative is to add additional hypotheses as constraints. The latter case (additional hypotheses) is favored.&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-19T01:20:06.161Z</blogger:created>
    <published>2023-06-19T12:53:00.002Z</published>
    <updated>2023-06-19T12:53:13.991Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7713548857971525276</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>an argument in support of RDF instead of property graphs</title>
    <content type='html'>&lt;p&gt;
  I've wrestled with whether to use Property Graphs to store and query the Physics Derivation Graph. 
I see potential value, but the licensing of Neo4j keeps me from committing. I'm aware of other implementations, but I don't have confidence about either their stability or durability. 
  &lt;/p&gt;&lt;p&gt;

&lt;/p&gt;&lt;p&gt;
&lt;a href="https://www.semanticarts.com/property-graphs-training-wheels-on-the-way-to-knowledge-graphs/"&gt;This post&lt;/a&gt; makes a convincing argument about both the short-comings of a property-graph-based knowledge graph and the value of an RDF-based storage method. To summarize,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;don't be distracted by visualization capabilities; inference is more important&lt;/li&gt;&lt;li&gt;property graph IDs are local, whereas identifiers in RDF are global.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Global IDs are vital for enabling federation, merge, diff&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I know OWL (Web Ontology Language) is popular for knowledge representation, and this post was the first to provide a clear breakdown of the difference between property graphs, RDF, and OWL. OWL supports&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;the ability infer that a node that is a member of a class is also a member of any of its superclasses&lt;/li&gt;&lt;li&gt;properties can have superproperties&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;OWL overview:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;https://www.cambridgesemantics.com/blog/semantic-university/learn-rdf/&lt;/li&gt;&lt;li&gt;https://www.cambridgesemantics.com/blog/semantic-university/learn-owl-rdfs/owl-101/&lt;/li&gt;&lt;li&gt;https://www.cambridgesemantics.com/blog/semantic-university/learn-owl-rdfs/&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-12-12T15:56:07.801Z</blogger:created>
    <published>2020-12-12T16:12:00.001Z</published>
    <updated>2020-12-12T16:36:35.168Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/12/an-argument-in-support-of-rdf-instead.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7733154931012174875</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>change of mindset to improve user experience</title>
    <content type='html'>Instead of treating this software project from the perspective of a developer, approach it from that of a customer.&lt;br /&gt;
&lt;br /&gt;
First customer action: download a zip. The zip contains scripts, databases, documentation&lt;br /&gt;
--&amp;gt; action for me: write a tool which creates a zip&lt;br /&gt;
&lt;br /&gt;
Second customer action: run the contents of the zip&lt;br /&gt;
--&amp;gt; action for me: document dependencies&lt;br /&gt;
--&amp;gt; task: define what "working" means&lt;br /&gt;
&lt;br /&gt;
I'll define "working" by the following use cases:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;for a single derivation, generate the PNG of the graph&lt;/li&gt;
&lt;li&gt;for each of N derivations, generate a PNG per derivation&lt;/li&gt;
&lt;li&gt;for all derivations, generate a PNG&lt;/li&gt;
&lt;li&gt;for a single derivation, generate the HTML/d3js of the graph&lt;/li&gt;
&lt;li&gt;for each of N derivations, generate a&amp;nbsp;HTML/d3js&amp;nbsp;per derivation&lt;/li&gt;
&lt;li&gt;for all derivations, generate a&amp;nbsp;HTML/d3js&lt;/li&gt;
&lt;li&gt;user should be able to enter a new derivation&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
These tasks require subtasks&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;generate PNG per expression&lt;/li&gt;
&lt;li&gt;generate new random index that doesn't conflict&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Other actions:&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
--&amp;gt; publish inference rules to website&lt;/div&gt;
&lt;div&gt;
--&amp;gt; provide example for each inference rule&lt;/div&gt;
&lt;div&gt;
--&amp;gt; publish reports (currently PDF) as HTML&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2016-03-08T23:19:24.144Z</blogger:created>
    <published>2016-03-08T23:24:00Z</published>
    <updated>2016-03-08T23:24:17.828Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2016/03/change-of-mindset-to-improve-user.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7841643548849071686</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>content categories and keyword linking - what's the relation to the PDG?</title>
    <content type='html'>Suppose an article on ArXiv had full markup with &lt;a href="https://github.com/OMdoc/OMDoc/wiki/PhysML"&gt;PhysML&lt;/a&gt; and &lt;a href="http://sciencewise.info/"&gt;ScienceWise&lt;/a&gt;. While useful in aggregate for search, it's not clear how those would relate to the Physics Derivation Graph.&lt;br /&gt;
&lt;br /&gt;
The ScienceWise concept of linking keywords to a database would need to be expanded to linking variables to a database. Then one paper using "x" for position and another paper using "d" for position could link to the same variable definition (independent of symbol used).</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-06T00:55:30.165Z</blogger:created>
    <published>2020-08-09T20:43:00Z</published>
    <updated>2020-08-09T20:43:30.027Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/08/content-categories-and-keyword-linking.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7889051635263693664</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>categories of features for the website</title>
    <content type='html'>Although the Physics Derivation Graph is currently available as a website (&lt;a href="http://derivationmap.net/"&gt;http://derivationmap.net/&lt;/a&gt;) I am unwilling to share the URL with other people. The lack of features means they could get the wrong impression.&lt;br /&gt;
&lt;br /&gt;
There are lots of missing features which result in an inadequate site. The categories of missing features are&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;essential functionality. Examples:&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;entering symbols&lt;/li&gt;
&lt;li&gt;entering units and dimensions for variables&lt;/li&gt;
&lt;li&gt;unit checking&lt;/li&gt;
&lt;li&gt;dimensional analysis&lt;/li&gt;
&lt;li&gt;search&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;ease of workflow. Examples:&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;display latex expression along with ID in dropdown&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/issues/145"&gt;static sitemap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;professionalism. Examples:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Google Sign In&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
There are additional features that are not vital to showing other users. For example, the "monitoring" page and tracing user behavior.&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-02T15:32:25.178Z</blogger:created>
    <published>2020-05-02T15:39:00Z</published>
    <updated>2020-05-03T10:41:09.651Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/categories-of-features-for-website.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-7904439665647804070</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>dichotomy of assumptions</title>
    <content type='html'>&lt;p&gt;In Physics there are some assumptions that form a&amp;nbsp;dichotomy:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;is the speed of light constant or variable?&lt;/li&gt;&lt;li&gt;is the measure of energy discrete or continuous?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In the dichotomy of assumptions, one of the two assumptions is reflective of reality, and the other is an oversimplification. The oversimplification is related to reality by assumptions, constraints, and limits.&amp;nbsp;&lt;/p&gt;&lt;p&gt;(I define "oversimplification" as the extension of useful assumptions to incorrect regions.)&lt;/p&gt;&lt;p&gt;Another case where oversimplification is the link between domains is quantum physics and (classical) statistical physics. Quantum particles are either Fermions (odd half integer spin) or Bosons (integer spin), but that is practically irrelevant for large ensembles of particles at room temperature. The aspects that get measured at one scale (e.g., particle velocity) are related to but separate from metrics at another scale (e.g, temperature, entropy). Mathematically this transition manifests as the switch from summation to integration.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;So what?&amp;nbsp;&lt;br /&gt;
  This is a new-to-me category of derivations which span domains. What constitutes a domain is set by the assumptions that form the boundaries, and oversimplification is how to cross the boundaries.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;What boundaries should the Physics Derivation Graph transgress? What oversimplifications are adjacent?&lt;/p&gt;
&lt;ul style="text-align: left;"&gt;
  &lt;li&gt;quantum mechanics to classical -&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Canonical_quantization"&gt;https://en.wikipedia.org/wiki/Canonical_quantization&lt;/a&gt;&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Optics"&gt;https://en.wikipedia.org/wiki/Optics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Condensed_matter_physics"&gt;https://en.wikipedia.org/wiki/Condensed_matter_physics&lt;/a&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;https://en.wikipedia.org/wiki/Statistical_mechanics&lt;/li&gt;&lt;li&gt;&lt;a href="https://scholar.harvard.edu/files/schwartz/files/10-quantumstatmech_0.pdf"&gt;https://scholar.harvard.edu/files/schwartz/files/10-quantumstatmech_0.pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://physics.stackexchange.com/questions/374647/for-ideal-classical-gasses-in-terms-of-the-energy-levels-why-do-we-ignore-wheth"&gt;https://physics.stackexchange.com/questions/374647/for-ideal-classical-gasses-in-terms-of-the-energy-levels-why-do-we-ignore-wheth&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
  &lt;/ul&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Theory_of_relativity"&gt;relativity&lt;/a&gt; to classical&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Astrometry"&gt;https://en.wikipedia.org/wiki/Astrometry&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Orbital_mechanics"&gt;https://en.wikipedia.org/wiki/Orbital_mechanics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Celestial_mechanics"&gt;https://en.wikipedia.org/wiki/Celestial_mechanics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Galactic_astronomy"&gt;https://en.wikipedia.org/wiki/Galactic_astronomy&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Astronomy#Stellar_astronomy"&gt;https://en.wikipedia.org/wiki/Astronomy#Stellar_astronomy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://physics.stackexchange.com/questions/580494/difference-between-relativistic-and-non-relativistic-classical-equations-of-elec"&gt;https://physics.stackexchange.com/questions/580494/difference-between-relativistic-and-non-relativistic-classical-equations-of-elec&lt;/a&gt;&lt;/li&gt;&lt;li&gt;"The EFE reduce to Newton's law of gravity by using both the weak-field approximation and the slow-motion approximation." &lt;a href="https://en.wikipedia.org/wiki/Einstein_field_equations#The_correspondence_principle"&gt;source&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;quantum field theory to quantum mechanics&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Quantum_field_theory#Mathematical_rigor"&gt;https://en.wikipedia.org/wiki/Quantum_field_theory#Mathematical_rigor&lt;/a&gt; -- see particle in a box&lt;/li&gt;
  &lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;The evidences of dissonance (e.g,&amp;nbsp;Mercury’s perihelion based on&amp;nbsp;Newtonian gravitation versus relativity, the&amp;nbsp;Deflection of Starlight; &lt;a href="https://courses.lumenlearning.com/suny-astronomy/chapter/tests-of-general-relativity/"&gt;source&lt;/a&gt;) are not relevant for bridging domains. They are illustrations of the oversimplification.&lt;/p&gt;

&lt;p&gt;Update 2024-03-10: on the page &lt;a href="https://en.wikipedia.org/wiki/Phase_space#Quantum_mechanics"&gt;https://en.wikipedia.org/wiki/Phase_space#Quantum_mechanics&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;"by expressing quantum mechanics in phase space (the same ambit as for classical mechanics), the Weyl map facilitates recognition of quantum mechanics as a deformation (generalization) of classical mechanics, with deformation parameter ħ/S, where S is the action of the relevant process. (Other familiar deformations in physics involve the deformation of classical Newtonian into relativistic mechanics, with deformation parameter v/c; or the deformation of Newtonian gravity into general relativity, with deformation parameter Schwarzschild radius/characteristic dimension.)&lt;br /&gt;&amp;nbsp;&lt;br /&gt;

Classical expressions, observables, and operations (such as Poisson brackets) are modified by ħ-dependent quantum corrections, as the conventional commutative multiplication applying in classical mechanics is generalized to the noncommutative star-multiplication characterizing quantum mechanics and underlying its uncertainty principle."&lt;/blockquote&gt;

See also &lt;a href="https://en.wikipedia.org/wiki/Wigner%E2%80%93Weyl_transform#Deformation_quantization"&gt;https://en.wikipedia.org/wiki/Wigner%E2%80%93Weyl_transform#Deformation_quantization&lt;/a&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2024-03-02T17:30:50.503Z</blogger:created>
    <published>2024-03-03T01:45:00Z</published>
    <updated>2024-03-10T13:35:56.447Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2024/03/dichotomy-of-assumptions.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8007776910981256057</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>searching the Physics Derivation Graph database</title>
    <content type='html'>&lt;p&gt;The&amp;nbsp;Physics Derivation Graph database is just a JSON file, so searching a plain text file is easy. However, the value of search is in the relations, not just finding a match.&amp;nbsp;&lt;/p&gt;&lt;p&gt;There are multiple aspects of the Physics Derivation Graph database to search: symbols, units, dimensions, inference rules, symbol names, operators.&amp;nbsp;&lt;/p&gt;&lt;p&gt;A workflow for search is&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ol style="text-align: left;"&gt;
  &lt;li&gt;user searches web interface for "x"&lt;/li&gt;
  &lt;li&gt;the search interface returns multiple rows of a table; something like
   &lt;table border="1"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;symbol ID&lt;/th&gt;&lt;th&gt;symbol&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;dimension&lt;/th&gt;   &lt;th&gt;units&lt;/th&gt;
      &lt;/tr&gt;&lt;tr&gt;
        &lt;td&gt;948294&lt;/td&gt;   &lt;td&gt;x_m&lt;/td&gt;   &lt;td&gt;asdf&lt;/td&gt;&lt;td&gt;L:0,T:1,M:0&lt;/td&gt; &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;tr&gt;
        &lt;td&gt;113942&lt;/td&gt;   &lt;td&gt;y_x&lt;/td&gt;   &lt;td&gt;mimi&lt;/td&gt;&lt;td&gt;L:-1,T:0,M:0&lt;/td&gt;&lt;td&gt;Kg&lt;/td&gt;
      &lt;/tr&gt;&lt;tr&gt;
        &lt;td&gt;501901&lt;/td&gt;   &lt;td&gt;XM&lt;/td&gt;    &lt;td&gt;minX&lt;/td&gt;&lt;td&gt;L:0,T:2,M:1&lt;/td&gt; &lt;td&gt;seconds^2&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;if the user selects one of the symbols, then&lt;/li&gt;
  &lt;li&gt;the search interface shows which expressions contain that symbol&lt;/li&gt;
  &lt;li&gt;if the user selects one of the expressions, then&lt;/li&gt;
  &lt;li&gt;the search interface shows which derivations contain that expression&lt;/li&gt;
&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Currently, the search of symbols (&amp;nbsp;&lt;a href="https://derivationmap.net/list_all_symbols"&gt;https://derivationmap.net/list_all_symbols&lt;/a&gt; ) is separate from the search of expressions ( &lt;a href="https://derivationmap.net/list_all_expressions"&gt;https://derivationmap.net/list_all_expressions&lt;/a&gt; ) though the two are hyperlinked in both directions.&lt;/div&gt;

</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-20T19:49:43.307Z</blogger:created>
    <published>2021-08-20T20:56:00Z</published>
    <updated>2021-08-20T20:56:15.034Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/08/searching-physics-derivation-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8025008780416937612</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Latex symbols that are operators - how to create SymPy placeholder</title>
    <content type='html'>{\cal H} in Latex is used for the Hamiltonian in the "1D particle in a box"&lt;div&gt;
https://en.wikipedia.org/wiki/Hamiltonian_(quantum_mechanics)&lt;br /&gt;&lt;div&gt;
Needs to be translated to a SymPy operator&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
https://docs.sympy.org/latest/modules/physics/quantum/piab.html&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The Laplace operator \nabla^2 in Latex is&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
delop = Del()&lt;/div&gt;
&lt;div&gt;
delop.dot(delop())&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-04T21:25:05.666Z</blogger:created>
    <published>2020-09-04T21:30:00Z</published>
    <updated>2020-09-20T19:42:38.492Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <blogger:filename>/2020/09/latex-symbols-that-are-operators-how-to.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8079377276090648353</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>periodic renewal of https letsencrypt certificates</title>
    <content type='html'>Confirm expiration date of current certificates
&lt;pre&gt;openssl x509 -dates -noout &amp;lt; \
/home/pdg/allofphysics.com/certs/fullchain.pem&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;

Delete existing certs
&lt;pre&gt;sudo rm -rf /etc/letsencrypt/live/derivationmap.net
sudo rm -rf /etc/letsencrypt/renewal/derivationmap.net
sudo rm -rf /etc/letsencrypt/archive/derivationmap.net
&lt;/pre&gt;&lt;div&gt;Confirm folders are empty&lt;/div&gt;&lt;pre&gt;sudo ls -hal /etc/letsencrypt/live/
sudo ls -hal /etc/letsencrypt/renewal/
sudo ls -hal /etc/letsencrypt/archive/
&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
Request new certs
&lt;pre&gt;&lt;strike&gt;sudo certbot certonly --webroot \
-w /home/pdg/allofphysics.com/certs \
--server https://acme-v02.api.letsencrypt.org/directory \
-d derivationmap.net -d www.derivationmap.net&lt;/strike&gt;
&lt;/pre&gt;

To use multiple domains and a single cert, use
&lt;pre&gt;sudo certbot certonly --webroot \
-w /home/pdg/allofphysics.com/certs \
--server https://acme-v02.api.letsencrypt.org/directory \
-d derivationmap.net -d www.derivationmap.net \
-d allofphysics.com -d www.allofphysics.com
&lt;/pre&gt;
Output should be something like
&lt;pre&gt;Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator webroot, Installer None
Obtaining a new certificate

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/derivationmap.net/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/derivationmap.net/privkey.pem
   Your cert will expire on YYYY-MM-DD. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   "certbot renew"
&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
Copy new certs to directory that nginx mounts in Docker-compose
&lt;pre&gt;cd /home/pdg/allofphysics.com/certs

mv dhparam.pem dhparam.pem_OLD
mv fullchain.pem fullchain.pem_OLD
mv privkey.pem privkey.pem_OLD

sudo cp /etc/letsencrypt/live/derivationmap.net/fullchain.pem .
sudo cp /etc/letsencrypt/live/derivationmap.net/privkey.pem .
sudo chown pdg:pdg privkey.pem
sudo openssl dhparam -out dhparam.pem 2048
&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;

Restart Docker-compose
&lt;pre&gt;cd /home/pdg/allofphysics.com/
docker compose up --build --force-recreate --remove-orphans --detach
&lt;/pre&gt;
If the docker containers are not restarted, the changes made to the file on the host won't take effect.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Verify in a browser that &lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt; has the updated certificate.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Set a calendar reminder to renew the certificate.&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-10-09T19:25:21.271Z</blogger:created>
    <published>2021-10-09T19:34:00.005Z</published>
    <updated>2024-09-03T02:03:38.376Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='certificates'/>
    <blogger:filename>/2021/10/periodic-renewal-of-https-letsencrypt.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8118454014650882050</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>derivations, identities, and other categories of mathematical physics</title>
    <content type='html'>&lt;p&gt;Transforming from one expression to another is carried out with respect to a goal. There are different categories of goals (listed below). I don't yet know what distinguishes one category from another.&lt;/p&gt;&lt;p&gt;My motivation for the Physics Derivation Graph is exclusively the first category -- derivations, specifically across domains. This motivation is more specific than a broader question, "what is the relation between every expression in mathematical physics and every other expression?" because the answer might be "symbols and inference rules are common."&lt;/p&gt;

&lt;p&gt;The other categories are neat but not as rewarding for me. These other categories are included in the PDG because the infrastructure for software and UI and data format are the same.&lt;/p&gt;&lt;p&gt;
  &lt;br /&gt;&lt;/p&gt;

&lt;h3 style="text-align: left;"&gt;Examples of Derivations&lt;/h3&gt;
&lt;div&gt;&lt;i&gt;Relation between two disparate descriptions of nature:&lt;/i&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul style="text-align: left;"&gt;
  &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/000004/?referrer=https://physicsderivationgraph.blogspot.com/"&gt;Maxwell equations to electric field wave equation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/522862/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;optics: Law of refraction to Brewster's angle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;i&gt;Derivation of expression from simpler observations plus assumptions:&lt;/i&gt;&lt;/div&gt;&lt;div&gt;
  &lt;ul style="text-align: left;"&gt;
    &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/207210/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;Newton's Law of Gravitation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/513999/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;first law of thermodynamics&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;i&gt;An expression in one domain simplifies to another expression in a different domain under modified assumptions&lt;/i&gt;&lt;/div&gt;&lt;div&gt;
  &lt;ul style="text-align: left;"&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Correspondence_principle"&gt;https://en.wikipedia.org/wiki/Correspondence_principle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.physicsforums.com/threads/schroedinger-equation-in-the-classical-limit.775531/"&gt;https://www.physicsforums.com/threads/schroedinger-equation-in-the-classical-limit.775531/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://mathoverflow.net/questions/102313/classical-limit-of-quantum-mechanics"&gt;https://mathoverflow.net/questions/102313/classical-limit-of-quantum-mechanics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://iopscience.iop.org/article/10.1088/0031-8949/90/10/108009/pdf"&gt;"A wave equation interpolating between classical and quantum mechanics"&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://mathoverflow.net/questions/225814/does-quantum-mechanics-ever-really-quantize-classical-mechanics"&gt;https://mathoverflow.net/questions/225814/does-quantum-mechanics-ever-really-quantize-classical-mechanics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://farside.ph.utexas.edu/teaching/sm1/lectures/node82.html"&gt;https://farside.ph.utexas.edu/teaching/sm1/lectures/node82.html&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;div&gt;&lt;i&gt;The same concept appears in multiple domains&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;
  &lt;ul style="text-align: left;"&gt;&lt;li&gt;Anderson localization (for electron transport, photonics; anywhere with waves)&lt;/li&gt;&lt;li&gt;simple harmonic oscillator, particle in a box&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Continuity_equation"&gt;https://en.wikipedia.org/wiki/Continuity_equation&lt;/a&gt;, aka transport equation&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 style="text-align: left;"&gt;Examples of Identities&lt;/h3&gt;&lt;div&gt;&lt;i&gt;An equation can be expressed differently but be equivalent:&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;
  &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/000002/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;Euler equation: trig square root&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Examples of Proofs&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Show that two sides of an equation are, in fact, the same:&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;
  &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/000001/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;Euler equation proof&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
    
    &lt;h3 style="text-align: left;"&gt;Examples of Use Case&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Start from one or more expressions to derive a conclusion with practical utility&lt;/i&gt;&lt;/div&gt;&lt;div&gt;
  &lt;ul style="text-align: left;"&gt;
    &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/129143/?referrer=_table_of_derivations"&gt;escape velocity&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/142831/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;Schwarzschild radius for non-rotating black hole&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/201726/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;angle of maximum distance for projectile motion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/387954/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;speed of Earth around Sun&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://derivationmap.net/review_derivation/527822/?referrer=physicsderivationgraph.blogspot.com_2024_02_derivations-identities-and-other"&gt;mass of the Earth&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;This is the focus of the &lt;a href="https://atomslab.github.io/"&gt;ATOMS lab at UMBC&lt;/a&gt;, specifically enacted using &lt;a href="https://en.wikipedia.org/wiki/Lean_(proof_assistant)"&gt;Lean&lt;/a&gt;.&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2024-02-25T18:34:54.611Z</blogger:created>
    <published>2024-02-25T19:10:00Z</published>
    <updated>2024-02-26T11:43:09.409Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='reflections'/>
    <blogger:filename>/2024/02/derivations-identities-and-other.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8159400498158538686</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>live display of input</title>
    <content type='html'>I realized it would be helpful to provide users a live preview of what the Latex renders as so the mistaken input can be corrected before submitting a step. (Decreasing feedback latency is a recurring theme.)&lt;br /&gt;
&lt;br /&gt;
There are Javascript-based approaches like&lt;br /&gt;
&lt;a href="https://stackoverflow.com/questions/20876797/create-live-preview-of-form-inputs"&gt;https://stackoverflow.com/questions/20876797/create-live-preview-of-form-inputs&lt;/a&gt;&lt;br /&gt;
(see demo here -&amp;nbsp;&lt;a href="https://jsfiddle.net/mYjrn/1/"&gt;https://jsfiddle.net/mYjrn/1/&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;
and&lt;br /&gt;
&lt;a href="https://demos.joypixels.com/latest/live-preview.html"&gt;https://demos.joypixels.com/latest/live-preview.html&lt;/a&gt;&lt;br /&gt;
but these both rely on JQuery.&lt;br /&gt;
&lt;br /&gt;
JQuery is "a tool used to make writing common JavaScript tasks more concise." (source:&amp;nbsp;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-jquery"&gt;https://www.digitalocean.com/community/tutorials/an-introduction-to-jquery&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;
I want to avoid unnecessary dependencies, so live preview of text that relies on JQuery is unattractive.&lt;br /&gt;
&lt;br /&gt;
I was able to find a live preview example that is written in pure Javascript:&lt;br /&gt;
&lt;a href="https://www.codespeedy.com/show-live-preview-of-html-textarea-with-javascript/"&gt;https://www.codespeedy.com/show-live-preview-of-html-textarea-with-javascript/&lt;/a&gt;&lt;br /&gt;
I can get that to work on my website, but wrapping the output in \( \) to get Mathjax to interpret the live input does not work.&lt;br /&gt;
&lt;br /&gt;
I needed to find a "live preview of Mathjax" since the input is parsed as Latex.&lt;br /&gt;
This snippet from 2013 didn't work&lt;br /&gt;
&lt;a href="https://github.com/mathjax/mathjax-docs/wiki/More-live-preview-examples"&gt;https://github.com/mathjax/mathjax-docs/wiki/More-live-preview-examples&lt;/a&gt;&lt;br /&gt;
but a similar code posted here&lt;br /&gt;
&lt;a href="https://cdn.rawgit.com/mathjax/MathJax/2.7.1/test/sample-dynamic.html"&gt;https://cdn.rawgit.com/mathjax/MathJax/2.7.1/test/sample-dynamic.html&lt;/a&gt;&lt;br /&gt;
does work for live preview of Mathjax!&lt;br /&gt;
&lt;br /&gt;
That link is for 2.7 but I had been using Mathjax 3. I couldn't find a v3-based approach, so I posted a question&lt;br /&gt;
&lt;a href="https://stackoverflow.com/questions/61658297/mathjax-live-preview-for-version-3"&gt;https://stackoverflow.com/questions/61658297/mathjax-live-preview-for-version-3&lt;/a&gt;&lt;br /&gt;
and was directed to&lt;br /&gt;
&lt;a href="https://mathjax.github.io/MathJax-demos-web/input-tex2chtml.html"&gt;https://mathjax.github.io/MathJax-demos-web/input-tex2chtml.html&lt;/a&gt;&lt;br /&gt;
which is a suitable solution for v3.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-07T11:57:56.706Z</blogger:created>
    <published>2020-05-07T12:03:00.001Z</published>
    <updated>2020-05-07T21:56:52.954Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/live-display-of-input.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8205623567012174731</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>statements I believe to be true</title>
    <content type='html'>&lt;p&gt;Here is what I currently understand to be true:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Every Physics Derivation is comprised of discrete steps.&lt;/li&gt;&lt;li&gt;Each Step in a Physics Derivation has a single Inference rule.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Every mathematical expression in a Physics Derivation can be written in Latex.&amp;nbsp;&lt;/li&gt;&lt;li&gt;There are some math expressions which cannot be written in a given CAS&lt;/li&gt;&lt;ul&gt;&lt;li&gt;example: definite evaluation after integration, like &lt;span style="font-family: courier;"&gt;(x+y)|_{a}^{b}&lt;/span&gt; in SymPy&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;There are some derivation steps that cannot be expressed in a given CAS&lt;/li&gt;&lt;li&gt;There is not a 1-to-1 correspondence between a CAS-based graph and a Latex-based graph.&amp;nbsp;&lt;/li&gt;&lt;li&gt;There are many gradations between "text" and Latex and CAS and proof.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The consequence of the CAS-based graph not having 1-to1 correspondence with a Latex-based graph is that the current data structure of Latex and SymPy in one graph is not suitable.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-20T19:44:32.100Z</blogger:created>
    <published>2020-09-20T20:35:00.002Z</published>
    <updated>2020-09-20T20:35:31.704Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/09/statements-i-believe-to-be-true.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8238616733515300008</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>community growth and diverging interests</title>
    <content type='html'>Recently the number of developers involved in the Physics Derivation Graph has started to unexpectedly increase.&amp;nbsp;As the number of people involved grows, the objectives diversify. People with shared interest can progress faster by collaborating.&lt;br /&gt;
&lt;br /&gt;
There are multiple channels for people engaging in the project:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;the github "group" has multiple repos, each a distinct but related effort&lt;/li&gt;
&lt;li&gt;the gitter group has multiple discussions and one-to-one threads&lt;/li&gt;
&lt;li&gt;email threads&lt;/li&gt;
&lt;li&gt;phone and Skype calls&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
The idea of splitting the team was suggested in order to address the complexity of interaction.&amp;nbsp;Having multiple threads going concurrently can be distracting to members. Then the question is how focused team members can be in the presence of distractions.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I&amp;nbsp;usually let things like this go until there's a clear need for change. The necessity of the change usually helps push which option is preferable. Thinking ahead about potential change is useful, but the action can be delayed until needed.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Once the split occurs, what coordination among the groups is needed? How does it occur?&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2018-06-19T12:25:15.056Z</blogger:created>
    <published>2018-06-19T12:30:00.001Z</published>
    <updated>2018-06-19T12:30:18.265Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/06/community-growth-and-diverging-interests.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8270145323304784398</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>best practices for prompts for large language models - LLMs</title>
    <content type='html'>&lt;p&gt;ChatGPT was made available by OpenAI on 2022-11-30. As of 2023-12-16 I hadn't used ChatGPT (Generative Pre-trained Transformer) or other large language models (LLMs). In this post I document best practices other folks have come up with. My intent is to identify whether ChatGPT could be useful for tasks relevant to the Physics Derivation Graph.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Sites I reviewed for best practices for prompts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://help.openai.com/en/articles/6654000-best-practices-for-prompt-engineering-with-openai-api"&gt;https://help.openai.com/en/articles/6654000-best-practices-for-prompt-engineering-with-openai-api
  &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://platform.openai.com/docs/guides/prompt-engineering/strategy-write-clear-instructions"&gt;https://platform.openai.com/docs/guides/prompt-engineering/strategy-write-clear-instructions
  &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.promptingguide.ai"&gt;https://www.promptingguide.ai
&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://ollama.ai/blog/how-to-prompt-code-llama"&gt;https://ollama.ai/blog/how-to-prompt-code-llama&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h2&gt;General text response&lt;/h2&gt;

&lt;h3&gt;Prompt&lt;/h3&gt;
&lt;fieldset&gt;Answer the question based on the context below. Keep the answer short and concise. Respond "Unsure about answer" if not sure about the answer.

&lt;p&gt;Context: &amp;lt;context&amp;gt;

&lt;/p&gt;&lt;p&gt;Question: &amp;lt;question&amp;gt;

&lt;/p&gt;&lt;p&gt;Answer:
&lt;/p&gt;&lt;/fieldset&gt;

&lt;h3&gt;Prompt&lt;/h3&gt;
&lt;fieldset&gt;
Before providing the answer, state what you know and what you assume. Then state the steps that led you to your answer. Finally, provide the answer.
&lt;/fieldset&gt;
&lt;h3&gt;Prompt&lt;/h3&gt;

&lt;fieldset&gt;Let's think step by step.&lt;/fieldset&gt;

&lt;h3&gt;Prompt&lt;/h3&gt;

&lt;fieldset&gt;Let's work this out in a step by step way to be sure we have the right answer.
&lt;/fieldset&gt;

&lt;h3&gt;Prompt&lt;/h3&gt;

&lt;fieldset&gt;Imagine three different experts are answering this question.&lt;br /&gt;
All experts will write down 1 step of their thinking, then share it with the group.&lt;br /&gt;
Then all experts will go on to the next step, etc.&lt;br /&gt;
If any expert realizes they are wrong at any point then they leave.&lt;br /&gt;
The question is...
&lt;/fieldset&gt;

&lt;h2 style="text-align: left;"&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2 style="text-align: left;"&gt;What to use an LLM for&lt;/h2&gt;


The following table is from &lt;a href="https://www.philschmid.de/instruction-tune-llama-2"&gt;https://www.philschmid.de/instruction-tune-llama-2&lt;/a&gt;
&lt;table border="1"&gt;
  &lt;tbody&gt;&lt;tr&gt;
	&lt;th&gt;Capability&lt;/th&gt;
    &lt;th&gt;Example Instruction&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Brainstorming&lt;/td&gt;
    &lt;td&gt;Provide a diverse set of creative ideas for new flavors of ice cream.
  &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Classification&lt;/td&gt;
    &lt;td&gt;Categorize these movies as either comedy, drama, or horror based on the plot summary.
  &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Closed QA&lt;/td&gt;
    &lt;td&gt;Answer the question 'What is the capital of France?' with a single word.
  &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Generation&lt;/td&gt;
    &lt;td&gt;Write a poem in the style of Robert Frost about nature and the changing seasons.
  &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Information Extraction&lt;/td&gt;
    &lt;td&gt;Extract the names of the main characters from this short story.
  &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Open QA&lt;/td&gt;
    &lt;td&gt;Why do leaves change color in autumn? Explain the scientific reasons.
  &lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Summarization&lt;/td&gt;
    &lt;td&gt;Summarize this article on recent advancements in renewable energy in 2-3 sentences.
  &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h2 style="text-align: left;"&gt;Software generation&lt;/h2&gt;

&lt;fieldset&gt;You are an expert programmer that writes simple, concise code and explanations. Write a python function to generate the nth fibonacci number.&lt;/fieldset&gt;
&amp;nbsp;
&lt;fieldset&gt;
A simple python function to remove whitespace from a string
&lt;/fieldset&gt;
&amp;nbsp;
Code Llama supports a special prompt called infill
&lt;fieldset&gt;
  &amp;lt;PRE&amp;gt; def compute_gcd(x, y): &amp;lt;SUF&amp;gt;return result &amp;lt;MID&amp;gt;
&lt;/fieldset&gt;
    
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Code review&lt;/h3&gt;
&lt;fieldset style="text-align: left;"&gt;
&lt;pre&gt;Where is the bug in this code?
```
def fib(n):
    if n &amp;lt;= 0:
        return n
    else:
        return fib(n-1) + fib(n-2)
```
&lt;/pre&gt;
&lt;/fieldset&gt;&lt;h3 style="text-align: left;"&gt;

Tests of Software
&lt;/h3&gt;&lt;fieldset&gt;
  write a unit test for this function: 
&lt;/fieldset&gt;


    &lt;h2 style="text-align: left;"&gt;Prompts for Retrieval Augmented Generation (RAG)&lt;/h2&gt;
RAG = https://www.promptingguide.ai/techniques/rag&amp;nbsp;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;From &lt;a href="https://github.com/run-llama/llama_index/blob/main/llama_index/prompts/chat_prompts.py"&gt;https://github.com/run-llama/llama_index/blob/main/llama_index/prompts/chat_prompts.py&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;fieldset&gt;
      &lt;pre&gt;    You are an expert Q&amp;amp;A system that is trusted around the world.\n"
        "Always answer the query only using the provided context information, "
        "and not prior knowledge."
        &lt;/pre&gt;
    &lt;/fieldset&gt;
&amp;nbsp;
    &lt;fieldset&gt;
      &lt;pre&gt;      "Context information is below.\n"
            "---------------------\n"
            "{context_str}\n"
            "---------------------\n"
            "Given the context information and not prior knowledge, "
            "answer the query.\n"
            "Query: {query_str}\n"
            "Answer: "
      &lt;/pre&gt;
    &lt;/fieldset&gt;
&lt;p&gt;&amp;nbsp;
  &lt;/p&gt;&lt;p&gt;From &lt;a href="https://docs.llamaindex.ai/en/stable/examples/prompts/prompts_rag.html"&gt;https://docs.llamaindex.ai/en/stable/examples/prompts/prompts_rag.html&lt;/a&gt;
&lt;/p&gt;&lt;fieldset&gt;
  &lt;pre&gt;Context information is below.
---------------------
{context_str}
---------------------
Given the context information and not prior knowledge, 
answer the query asking about citations over different topics.
Some examples are given below.

{few_shot_examples}

Query: {query_str}
Answer: 
  &lt;/pre&gt;
&lt;/fieldset&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-12-16T19:04:05.334Z</blogger:created>
    <published>2023-12-16T19:13:00Z</published>
    <updated>2023-12-27T12:21:18.587Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='prompts for LLMs'/>
    <blogger:filename>/2023/12/best-practices-for-prompts-for-large.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8308905618835916105</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>what would create a tipping point</title>
    <content type='html'>&lt;p&gt;Every scientist coming to the website&amp;nbsp;&lt;a href="https://derivationmap.net/"&gt;https://derivationmap.net/&lt;/a&gt; is unlikely.&amp;nbsp;&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;Graph analysis&amp;nbsp;&lt;/h2&gt;
&lt;p&gt;This is what I've historically chased -- identifying the data structure, and the data input mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Extracting value from staring at a visualization of the graph of equations is unlikely. I'm not clear what graph queries are relevant to run against the graph content.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;Consistency within a document&lt;/h2&gt;
&lt;p&gt;The local value to both the author and the reader is in determining whether the mathematical content of the paper being read is self-consistent. Practically, that means&lt;/p&gt;
&lt;ul style="text-align: left;"&gt;
  &lt;li&gt;are the dimensions of variables with each expression consistent?&lt;/li&gt;&lt;li&gt;are the units used in each expression consistent?&lt;/li&gt;
  &lt;li&gt;are the variables clearly defined? Here "definition" means a tuple of (symbol, dimensions, definition)&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;are the variables used consistently throughout this paper?&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;are the operators well defined? Here "definition" means a tuple of (symbol, number of inputs, number of outputs, constraints per input, constraints per output).&amp;nbsp;&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;are the operators used consistently throughout this paper?&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;is the mathematical content consistent with the written text?&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;Some of these aspects are explored on&amp;nbsp;&lt;a href="https://derivationmap.net/clickable_layers"&gt;https://derivationmap.net/clickable_layers&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;As an author, I want to write Latex that generates a document that is mathematically correct.&lt;/p&gt;&lt;p&gt;Mathematical typos should be detected (similar to spell-check). As I enter text (or as a post-processing phase), the computer should guess whether the content is math or non-math. If math, then prompt the author for relevant details.&amp;nbsp;&lt;/p&gt;
&lt;h4 style="text-align: left;"&gt;Options for implementation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;collaborate with an existing online Latex editor. There are many --&amp;nbsp;&lt;a href="https://www.google.com/search?q=latex+editor+online"&gt;https://www.google.com/search?q=latex+editor+online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;a Latex package hosted on&amp;nbsp;&lt;a href="https://ctan.org/pkg/latex?lang=en"&gt;https://ctan.org/pkg/latex?lang=en&lt;/a&gt;&amp;nbsp;that installs locally.&amp;nbsp;&lt;/li&gt;
  &lt;li&gt;an offline thick-client application that compiles Latex and checks the math&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overleaf is open source:&amp;nbsp;&lt;a href="https://github.com/overleaf/overleaf"&gt;https://github.com/overleaf/overleaf&lt;/a&gt;, so modifying it could be an option.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;Cross-document analysis&lt;/h2&gt;
&lt;p&gt;In a larger context, the relevant value questions include&lt;/p&gt;
&lt;ul style="text-align: left;"&gt;&lt;li&gt;how does the paper I'm currently reading (or writing) relate to other papers?&lt;/li&gt;&lt;li&gt;how does the paper I'm currently reading (or writing) build on previous work?&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Rather than bibliographic citation, I care about mathematical provenance.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The specific symbols may vary across papers, and the dimensions may vary (e.g., renormalizing the speed of light to 1), but definitions have to be shared.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The scientific community currently resorts to bibliographic citation because that is the only provenance available, not because it is what matters or what we value.&lt;/p&gt;&lt;p&gt;The cross-document analysis is not feasible without semantic content. The current approach of unstructured text with few hyperlinks requires human readers. Addressing the intra-document consistency challenge might yield semantic markup that enables cross-document analysis.&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-05-17T01:09:41.444Z</blogger:created>
    <published>2021-05-17T01:26:00.006Z</published>
    <updated>2021-07-11T23:23:32.892Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2021/05/what-would-create-tipping-point.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8310897179904937338</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>function Latex for Sympy</title>
    <content type='html'>&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;I am interested in parsing functions written in Latex into a Sympy representation. For simple examples, this currently works:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; import sympy&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.__version__&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;'1.5.1'&amp;nbsp;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.parsing.latex import parse_latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex('f(x)'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;"Function('f')(Symbol('x'))"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;That's good. Sympy also supports expressions like&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex('x=0'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;"Equality(Symbol('x'), Integer(0))"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;However, a function with a constraint written in Latex is not parsed correctly:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex('f(x = 0)'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;"Symbol('f')"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;The opposite direction does work (from Sympy to Latex)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.latex(sympy.Function('f')(sympy.Equality(sympy.Symbol('x'), sympy.Integer(0))))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;'f{\\left(x = 0 \\right)}'&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;Similarly, we can get more complicated expressions from Sympy to Latex&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.latex(sympy.Equality(sympy.Function('f')(sympy.Equality(sympy.Symbol('x'), sympy.Integer(0))),sympy.Symbol('a')))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;'f{\\left(x = 0 \\right)} = a'&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;but the opposite (Latex to Sympy) is not working:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-variant-ligatures: no-common-ligatures;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;&amp;gt;&amp;gt;&amp;gt; sympy.srepr(parse_latex('f{\\left(x = 0 \\right)} = a'))&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-variant-ligatures: no-common-ligatures;"&gt;"Symbol('f')"&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;
I've opened&lt;br /&gt;
&lt;a href="https://github.com/sympy/sympy/issues/19855"&gt;https://github.com/sympy/sympy/issues/19855&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-29T13:47:13.167Z</blogger:created>
    <published>2020-07-29T13:59:00.004Z</published>
    <updated>2020-07-29T19:09:37.328Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/function-latex-for-sympy.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8333517266247930172</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>a web-based GUI for drawing graphs with latex</title>
    <content type='html'>Back in 2014 the EquationMap interface featured the ability enter latex into nodes and create graphs with edges.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/H3P74N0IarQ" width="560"&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;br /&gt;
Similar web interfaces for drawing graphs include&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neyric/wireit"&gt;https://github.com/neyric/wireit&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://github.com/neyric/webhookit"&gt;https://github.com/neyric/webhookit&lt;/a&gt;&amp;nbsp;(both no longer supported)&lt;/li&gt;
&lt;li&gt;Cytoscape.js; see&amp;nbsp;&lt;a href="https://pathwaycommons.github.io/cytoscape-sbgn-stylesheet/"&gt;https://pathwaycommons.github.io/cytoscape-sbgn-stylesheet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://modeling-languages.com/javascript-drawing-libraries-diagrams/"&gt;https://modeling-languages.com/javascript-drawing-libraries-diagrams/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
However, none of these support rendering Latex or Mathjax&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
My current approach of generating PNG images from Latex and then rendering the PNGs as a graph using d3.js seems to work sufficiently well. I could modify the interface such that the existing webform is on the same page as the rendered graph.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
The user would select an inference rule, provide the expressions, and render the graph all in a single page.&lt;br /&gt;What isn't clear in my mental model is how to connect edges to new steps.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-08-07T14:23:21.464Z</blogger:created>
    <published>2020-08-07T16:21:00Z</published>
    <updated>2020-09-20T19:44:04.696Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='visualization'/>
    <blogger:filename>/2020/08/a-web-based-gui-for-drawing-graphs-with.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8389004894698696948</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>selecting a target audience for the Physics Derivation Graph</title>
    <content type='html'>I've recognized the Physics Derivation Graph has a few potential audiences: teachers, students, researchers, publishing.&lt;br /&gt;
&lt;br /&gt;
Of these, targeting students makes the most sense:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;the math is easier&lt;/li&gt;
&lt;li&gt;less legacy momentum (e.g., "this is how we've done it before")&lt;/li&gt;
&lt;li&gt;educators value free (rather than paid subscription)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-13T18:07:57.754Z</blogger:created>
    <published>2020-05-13T18:10:00Z</published>
    <updated>2020-05-13T18:10:01.774Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/selecting-target-audience-for-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8405718014683210197</id>
    <blogger:parent>tag:blogger.com,1999:blog-7761348728894775915.post-3878164011943757324</blogger:parent>
    <blogger:inReplyTo/>
    <blogger:type>COMMENT</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <content type='html'>Tried getting a working Lean 4 implementation on the site https://live.lean-lang.org/
but even the following has errors

variable {a b : Real}
example (h : a = b) : a + 2 = b + 2 := 
by
sorry</content>
    <blogger:created>2024-01-07T23:04:16.218Z</blogger:created>
    <published>2024-01-07T23:04:16.218Z</published>
    <updated>2024-01-07T23:04:16.218Z</updated>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8472013047546074123</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>log analysis of nginx access using Python Pandas</title>
    <content type='html'>&lt;p&gt;My first step is to review logins on the site,&lt;br /&gt;
  https://physicsderivationgraph.blogspot.com/2020/05/inspecting-list-of-users-who-have.html&lt;/p&gt;
&lt;p&gt;My previous post on reviewing logs &lt;br /&gt;
  https://physicsderivationgraph.blogspot.com/2020/05/grepping-nginx-logs-to-observe-user.html&lt;br /&gt;
  was written prior to the current nginx format I'm using.&lt;/p&gt;
&lt;p&gt;I haven't gotten around to a deeper analysis like&lt;br /&gt;
  https://physicsderivationgraph.blogspot.com/2020/04/analysis-of-web-logs-to-understand-how.html&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;First I had to install supporting software&lt;br /&gt;
  &lt;/p&gt;&lt;pre&gt;  sudo apt install python3-pip
  pip3 install pandas
&lt;/pre&gt;
&lt;p&gt;Inline Python in bash with Pandas is possible because every line is formatted like a Python dictionary.
Here I want to review what columns are present in the logs&lt;/p&gt;&lt;pre&gt;cat nginx_access.log | python3 -c "import sys
import pandas
pandas.options.display.max_rows = 999 # https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html
list_of_lines = []
for line in sys.stdin:
    list_of_lines.append(eval(line))
df = pandas.DataFrame(list_of_lines)
print(df.columns)
"
&lt;/pre&gt;
How many of each entry for a few columns?
&lt;pre&gt;cat nginx_access.log | python3 -c "import sys
import pandas
pandas.options.display.max_rows = 999 # https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html
list_of_lines = []
for line in sys.stdin:
    list_of_lines.append(eval(line))
df = pandas.DataFrame(list_of_lines)
threshold = 20
print('user:')
vc = df['user'].value_counts()
print(vc[vc&amp;gt;threshold])
print('IP:')
vc = df['ip'].value_counts()
print(vc[vc&amp;gt;threshold])
print('req:')
vc = df['req'].value_counts()
print(vc[vc&amp;gt;threshold])
#print(df.head())
"
&lt;/pre&gt;
For IPs that have made multiple (e.g., 30) requests, what pages have been accessed?
&lt;pre&gt;cat nginx_access.log | python3 -c "import sys
import pandas
pandas.options.display.max_rows = 999 # https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html
list_of_lines = []
for line in sys.stdin:
    list_of_lines.append(eval(line))
df = pandas.DataFrame(list_of_lines)
threshold = 30
vc = df['ip'].value_counts()
for ip, number_of_requests in vc[vc&amp;gt;threshold].items():
    print('\nIP = ',ip, 'made',number_of_requests,'requests')
    df_this_ip = df[df['ip']==ip]
    #for request in df_this_ip['req'].values:
    #    print(request)
    print(df_this_ip['req'].value_counts())
"
&lt;/pre&gt;


</content>
    <blogger:metaDescription/>
    <blogger:created>2020-11-22T01:51:50.310Z</blogger:created>
    <published>2020-11-22T02:50:00.002Z</published>
    <updated>2020-11-22T02:50:55.987Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/11/log-analysis-of-nginx-access-using.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8480329817466697990</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>molecular dynamics simulations in Lean</title>
    <content type='html'>Working from textbooks like those from Berend Smit's Understanding Molecular Simulation and Allan and Tildesley’s textbook.

The textbook you linked to also seems to cover the basics all right. For the dynamics, we will need to 
&lt;UL&gt;
  &lt;LI&gt;implement velocity verlet and/or verlet and 
  &lt;LI&gt;prove that these algorithms converge to the true dynamics in the limit of infinitesimal time step. 
&lt;/UL&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-06-19T12:55:29.479Z</blogger:created>
    <published>2023-06-19T13:10:00.001Z</published>
    <updated>2023-06-19T13:10:15.659Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8566357240210398711</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>relations between famous physics equations</title>
    <content type='html'>Update 20190728: this content has been copied to &lt;a href="https://physicsderivationgraph.blogspot.com/2017/07/finding-edges-for-physics-derivation.html"&gt;this page&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
The Einstein and the Navier-Stokes Equations: Connecting the Two by Bredberg, Irene, Ph.D., HARVARD UNIVERSITY, 2012, 132 pages; 3513905&lt;br /&gt;
Abstract: This thesis establishes a precise mathematical connection between the Einstein equations of general relativity and the incompressible Navier-Stokes equation of fluid dynamics.&lt;br /&gt;
see also &lt;a href="http://arxiv.org/abs/1101.2451"&gt;http://arxiv.org/abs/1101.2451&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Relation between uncertainty and the quantum harmonic oscillator&lt;br /&gt;
&lt;a href="http://hyperphysics.phy-astr.gsu.edu/hbase/quantum/hosc4.html"&gt;http://hyperphysics.phy-astr.gsu.edu/hbase/quantum/hosc4.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.eng.fsu.edu/~dommelen/quantum/style_a/nt_uprl.html"&gt;https://www.eng.fsu.edu/~dommelen/quantum/style_a/nt_uprl.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://hitoshi.berkeley.edu/221a/coherentstate.pdf"&gt;http://hitoshi.berkeley.edu/221a/coherentstate.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Schrodinger equation and quantum harmonic oscillator&lt;br /&gt;
&lt;a href="http://homepage.univie.ac.at/reinhold.bertlmann/pdfs/T2_Skript_Ch_5.pdf"&gt;http://homepage.univie.ac.at/reinhold.bertlmann/pdfs/T2_Skript_Ch_5.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Schrodinger equation and wave equation&lt;br /&gt;
&lt;a href="http://physics.stackexchange.com/questions/75363/how-is-the-schroedinger-equation-a-wave-equation"&gt;http://physics.stackexchange.com/questions/75363/how-is-the-schroedinger-equation-a-wave-equation&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.tcm.phy.cam.ac.uk/~bds10/aqp/handout_foundations.pdf"&gt;http://www.tcm.phy.cam.ac.uk/~bds10/aqp/handout_foundations.pdf&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2015-12-17T02:28:13.892Z</blogger:created>
    <published>2015-12-17T02:40:00Z</published>
    <updated>2019-07-28T20:15:28.867Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/12/relations-between-famous-physics.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8587930416276327382</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>keywords for the project: mathematical physics, applied physics, computational science</title>
    <content type='html'>&lt;i&gt;Context&lt;/i&gt;&lt;br /&gt;
There are three subsets of Physics: computational, theoretical, and experimental.&lt;br /&gt;
In Math there are many subsets, one of which is &lt;a href="https://en.wikipedia.org/wiki/Applied_mathematics"&gt;Applied Math&lt;/a&gt;.&lt;br /&gt;
At the intersection of computational physics and computer science and Applied math is the use of computers for large-scale numerical analysis.&lt;br /&gt;
Each of these subspecializations has a different perspective and different jargon for the same task.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
I've been using the phrase "documenting mathematical physics" to describe the intent and scope of the Physics Derivation Graph. In conversation with a mathematician, he suggested a few alternative key phrases that might help me find new audiences:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;applied math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scicomp.uni-kl.de/about/scientific-computing/"&gt;scientific computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Computational_science"&gt;computational science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
This topic came up because I mentioned that I my searches have been repeatedly ending up in pure math due to my focus on semantics of expressions. I think of "pure math" as establishing foundations using axioms, theorems, and proofs.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I have an undergraduate degree in Applied Math, but I've never considered the Physics Derivation Graph as an "applied math" issue. In my experience, applied math is about solving PDEs for specific scenarios and applying combinators to narrow situations.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
My PhD is in computational Physics, so my experience with "scientific computation" is using large computers to solve numerical math problems.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I wouldn't consider the Physics Derivation Graph to be "theoretical Physics." However, both feature heavy reliance on math.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Applied Math does have Physics as a domain of use, but there are other domains in which Applied Math is used:&amp;nbsp;engineering, industrial planning, economics, biology.&lt;br /&gt;
See&amp;nbsp;&lt;a href="https://www.reddit.com/r/math/comments/ec6r0/whats_the_difference_between_applied_math_and/"&gt;https://www.reddit.com/r/math/comments/ec6r0/whats_the_difference_between_applied_math_and/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Looking around the Internet, there are degrees in Applied Math and in Scientific Computation and Computation Science. Many of these focus on numerical computation and big data. I suspect these degree programs have been displaced by the hotter "data science" programs.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cs.cornell.edu/research/scientif"&gt;https://www.cs.cornell.edu/research/scientif&lt;/a&gt;&amp;nbsp;- in the Computer Science department&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ucdavis.edu/majors/mathematical-and-scientific-computation/"&gt;https://www.ucdavis.edu/majors/mathematical-and-scientific-computation/&lt;/a&gt;&amp;nbsp;- Math oriented undergrad&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nps.edu/web/math/scientific-computation"&gt;https://nps.edu/web/math/scientific-computation&lt;/a&gt;&amp;nbsp;- computational focus&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gradadm.seas.upenn.edu/masters/scientific-computing/"&gt;https://gradadm.seas.upenn.edu/masters/scientific-computing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apam.columbia.edu/"&gt;https://apam.columbia.edu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-28T01:48:09.127Z</blogger:created>
    <published>2020-07-28T02:04:00.001Z</published>
    <updated>2020-07-28T02:06:19.726Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/keywords-for-project-mathematical.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8588621483323563483</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>UML to Python Flask and WTForms</title>
    <content type='html'>UML to Python Flask and WTForms rather than iterative form development</content>
    <blogger:metaDescription/>
    <blogger:created>2019-12-31T02:21:17.715Z</blogger:created>
    <published>2019-12-31T02:25:00Z</published>
    <updated>2019-12-31T02:25:54.032Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2019/12/uml-to-python-flask-and-wtforms.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8589267999222177299</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>example derivation steps for a CAS or theorem prover to validate </title>
    <content type='html'>in order of increasing complexity, here are a set of&amp;nbsp;derivation steps for a CAS or theorem prover to validate&lt;br /&gt;
&lt;br /&gt;
start with "a = b"&lt;br /&gt;
add "2" to both sides&lt;br /&gt;
end with "a + 2 = b + 2"&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
start with "\sin x = f(x)"&lt;br /&gt;
multiply both sides by "2"&lt;br /&gt;
end with "2 \sin x = 2 f(x)"&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
start with "\sin x = f(x)"&lt;br /&gt;
substitute "2 y" for "x"&lt;br /&gt;
end with "\sin (2 y) = f(2 y)"</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-04T02:23:05.900Z</blogger:created>
    <published>2020-02-04T02:23:00.004Z</published>
    <updated>2020-02-04T10:52:04.223Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/02/example-derivation-steps-for-cas-or.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8652421655588634559</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>sympy to AST using latex</title>
    <content type='html'>Given an expression in Latex, extract the symbols:&lt;br /&gt;
&lt;i&gt;based on &lt;a href="https://stackoverflow.com/a/59843709/1164295"&gt;https://stackoverflow.com/a/59843709/1164295&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;import sympy&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;from sympy.parsing.latex import parse_latex&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;symp_lat = parse_latex('x^2 + a x + b = 0')&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;symp_lat.atoms(sympy.Symbol)&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;{x, b, a}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Given an expression in Latex, generate the graphviz of the AST:&lt;br /&gt;
&lt;i&gt;from &lt;a href="https://docs.sympy.org/latest/tutorial/manipulation.html"&gt;https://docs.sympy.org/latest/tutorial/manipulation.html&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;
&lt;i&gt;see &lt;a href="https://docs.sympy.org/latest/modules/printing.html#sympy.printing.dot.dotprint"&gt;https://docs.sympy.org/latest/modules/printing.html#sympy.printing.dot.dotprint&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;graphviz_of_AST_for_expr = sympy.printing.dot.dotprint(symp_lat)&lt;/b&gt;&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-01T21:41:00.194Z</blogger:created>
    <published>2020-05-01T21:55:00Z</published>
    <updated>2020-05-01T21:55:48.368Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='ast'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='abstract syntax tree'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sympy'/>
    <blogger:filename>/2020/05/sympy-to-ast-using-latex.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8693635559904748804</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Physics Derivation Graph is a machine-oriented controlled natural language</title>
    <content type='html'>Machine-oriented CNLs
&lt;ul&gt;
  &lt;li&gt;machine translation of technical documents (&lt;a href="https://www.lti.cs.cmu.edu/projects/machine-translation/kant-knowledge-based-machine-translation"&gt;KANT&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt; knowledge acquisition and representation (ACE, PENG, CPL)&lt;/li&gt;
  &lt;li&gt; semantic web (ACE View, Rabbit, Lite Natural Language)&lt;/li&gt;
  &lt;li&gt; rule and policy languages (ACE rules).&lt;/li&gt;
    &lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;References&lt;/h2&gt;&lt;div&gt;&lt;a href="http://staff.um.edu.mt/mros1/cnl2010/TALKS/schwitter_tutorial.pdf"&gt;http://staff.um.edu.mt/mros1/cnl2010/TALKS/schwitter_tutorial.pdf&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;"A Survey and Classification of Controlled Natural Languages" Tobias Kuhn&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://sites.google.com/site/controllednaturallanguage/"&gt;https://sites.google.com/site/controllednaturallanguage/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.sigcnl.org/"&gt;https://www.sigcnl.org/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2021-08-01T19:38:17.713Z</blogger:created>
    <published>2021-08-01T21:16:00Z</published>
    <updated>2021-08-01T21:16:01.310Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8716079876020331588</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>why web interfaces are limited in search capability</title>
    <content type='html'>Webpages have content. For text content, a common task is to search for something.&lt;br /&gt;
Web browsers have a plain text search feature, usually mapped to ctrl+f.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Why don't websites feature richer search functionality?&amp;nbsp;&lt;/b&gt;&lt;br /&gt;
For example, sorting tables, regular expressions for text, SQL, Cypher/Gremlin, infinite scroll (rather than pagination).&lt;br /&gt;
&lt;br /&gt;
Answers include&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;adding complex functionality takes effort&lt;/li&gt;
&lt;li&gt;most users will be confused by advanced search capability&lt;/li&gt;
&lt;li&gt;complex search features can be used maliciously/incorrectly if direct access to the backend database is allowed:&amp;nbsp;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;a user could delete data via SQL&lt;/li&gt;
&lt;li&gt;a user could edit data&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;if a user is given read-only access to the server, a user could write an infinite loop and saturate server resources&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
Shipping all the data to the front-end isn't reasonable when the data is large (e.g., more than 1 MB), so interaction with the back-end is necessary (e.g., for pagination).&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-20T19:40:13.974Z</blogger:created>
    <published>2020-05-20T19:46:00.004Z</published>
    <updated>2020-05-20T19:46:53.343Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/why-web-interfaces-are-limited-in.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8744642155712170962</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>useful git commands</title>
    <content type='html'>I've started linking github issues with commits. To do that, paste the hash of the commit in Github's issue.&lt;br /&gt;
&lt;br /&gt;
If you want to know the hash of the current git HEAD&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;$ git rev-parse HEAD&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Source: &lt;a href="https://stackoverflow.com/a/5724755/1164295"&gt;https://stackoverflow.com/a/5724755/1164295&lt;/a&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-20T01:37:42.689Z</blogger:created>
    <published>2020-04-20T01:39:00Z</published>
    <updated>2020-04-20T01:39:00.419Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/useful-git-commands.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8749732900497214286</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>DRAFT</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>another use case for the Physics Derivation Graph</title>
    <content type='html'>&lt;p&gt;https://www.preposterousuniverse.com/podcast/2023/07/31/245-solo-the-crisis-in-physics/&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Strong knowledge = one theory, validated by experiment&lt;/li&gt;&lt;li&gt;Weak knowledge = multiple theories each validated by experiment; no clear differentiation&lt;/li&gt;&lt;li&gt;No knowledge = experimental measurements that lack theoretical explanation&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2023-08-01T02:51:41.518Z</blogger:created>
    <published>2023-08-01T02:53:00.001Z</published>
    <updated>2023-08-01T02:53:24.589Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename/>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8751571583026062371</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>surveys of knowledge graphs and historical evolution</title>
    <content type='html'>The Physics Derivation Graph is a domain specific knowledge graph&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://www.linkedin.com/pulse/knowledge-graphs-end-user-products-from-cyc-ai-part-daniel-kornev/"&gt;https://www.linkedin.com/pulse/knowledge-graphs-end-user-products-from-cyc-ai-part-daniel-kornev/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://arxiv.org/abs/2003.02320"&gt;https://arxiv.org/abs/2003.02320&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://news.ycombinator.com/item?id=22504133"&gt;https://news.ycombinator.com/item?id=22504133&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://knowledgegraph.today/paper.html"&gt;http://knowledgegraph.today/paper.html&lt;/a&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-03-07T15:12:52.394Z</blogger:created>
    <published>2020-03-07T15:22:00Z</published>
    <updated>2020-03-07T15:22:00.266Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/03/surveys-of-knowledge-graphs-and.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8771003716183372732</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>timing Latex entry on Wacom tablet</title>
    <content type='html'>Process description: 

&lt;br /&gt;
Using the site &amp;nbsp;&lt;a href="https://webdemo.myscript.com/"&gt;https://webdemo.myscript.com/&lt;/a&gt;&amp;nbsp;we entered Latex equations, then pasted those into a text document&lt;br /&gt;
&lt;br /&gt;
&lt;table border="1" cellpadding="0" cellspacing="0" dir="ltr" style="border-collapse: collapse; border: 1px solid #ccc; font-family: arial,sans,sans-serif; font-size: 13px; table-layout: fixed;"&gt;&lt;colgroup&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;col width="100"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;
&lt;tr style="height: 21px;"&gt;&lt;td data-sheets-value="[null,2,&amp;quot;date&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;date&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;person&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;person&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;time&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;time&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;timed entry&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;timed entry&lt;/td&gt;&lt;td style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;method&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;method&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;number of expressions&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;number of expressions&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;derivation&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;derivation&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;notes&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;notes&lt;/td&gt;&lt;/tr&gt;
&lt;tr style="height: 21px;"&gt;&lt;td style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;&lt;/td&gt;&lt;td style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;&lt;/td&gt;&lt;td data-sheets-numberformat="[null,6,&amp;quot;h:mm am/pm&amp;quot;,1]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;minutes&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;minutes&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;seconds&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;seconds&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr style="height: 21px;"&gt;&lt;td data-sheets-value="[null,3,null,20151005]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;20151005&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;Ben&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;B&lt;/td&gt;&lt;td data-sheets-numberformat="[null,6,&amp;quot;h:mm am/pm&amp;quot;,1]" data-sheets-value="[null,3,null,0.8611111111111112]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;8:40 PM&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,10]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;10&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,25]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;25&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;wacom tablet&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;wacom tablet&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,13]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;13&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;quadratic equation&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;quadratic equation&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;copied Latex, pasted into text document; no errors&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;copied Latex, pasted into text document; no errors&lt;/td&gt;&lt;/tr&gt;
&lt;tr style="height: 21px;"&gt;&lt;td data-sheets-value="[null,3,null,20151005]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;20151005&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;Mike&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;M&lt;/td&gt;&lt;td data-sheets-numberformat="[null,6,&amp;quot;h:mm am/pm&amp;quot;,1]" data-sheets-value="[null,3,null,0.8715277777777778]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;8:55 PM&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,9]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;9&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,20]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;20&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;wacom tablet&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;wacom tablet&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,13]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;13&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;quadratic equation&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;quadratic equation&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;with some errors to be corrected&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;with some errors to be corrected&lt;/td&gt;&lt;/tr&gt;
&lt;tr style="height: 21px;"&gt;&lt;td data-sheets-value="[null,3,null,20151005]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;20151005&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;Ben&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;B&lt;/td&gt;&lt;td data-sheets-numberformat="[null,6,&amp;quot;h:mm am/pm&amp;quot;,1]" data-sheets-value="[null,3,null,0.8784722222222222]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;9:05 PM&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,5]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;5&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,44]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;44&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;by hand&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;by hand&lt;/td&gt;&lt;td data-sheets-value="[null,3,null,13]" style="padding: 2px 3px 2px 3px; text-align: right; vertical-align: bottom;"&gt;13&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;quadratic equation&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;quadratic equation&lt;/td&gt;&lt;td data-sheets-value="[null,2,&amp;quot;typed directly into text document; no errors&amp;quot;]" style="padding: 2px 3px 2px 3px; vertical-align: bottom;"&gt;typed directly into text document; no errors&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-10-10T13:11:55.883Z</blogger:created>
    <published>2015-10-10T13:13:00.003Z</published>
    <updated>2015-10-10T13:13:43.214Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/10/timing-latex-entry-on-wacom-tablet.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8791518393331700685</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>grepping nginx logs to observe user behavior</title>
    <content type='html'>&lt;h2&gt;
&lt;span style="font-family: inherit; font-weight: normal;"&gt;What IP addresses made page requests and how many pages did they request?&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;cat nginx_access.log | cut -d' ' -f1,7 | grep -v "\.xml\|\.js\|php\|cgi\|\.png\|\.txt\|/$\|400$" | cut -d' ' -f1 | sort | uniq -c | sort -nr&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; 431 &lt;a href="http://geoiplookup.net/ip/71.244.214.232/"&gt;71.244.214.232&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; 301 &lt;a href="http://geoiplookup.net/ip/18.223.152.78"&gt;18.223.152.78&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; 131 &lt;a href="http://geoiplookup.net/ip/66.249.79.109/"&gt;66.249.79.109&lt;/a&gt;&amp;nbsp; &amp;nbsp;- Googlebot&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; 106 &lt;a href="http://geoiplookup.net/ip/96.245.195.226/"&gt;96.245.195.226&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;50 &lt;a href="http://geoiplookup.net/ip/66.249.79.111/"&gt;66.249.79.111&lt;/a&gt;&amp;nbsp; &amp;nbsp;- Google crawler&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;24 &lt;a href="http://geoiplookup.net/ip/66.249.79.113/"&gt;66.249.79.113&lt;/a&gt;&amp;nbsp; &amp;nbsp;- Google crawler&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;23 &lt;a href="http://geoiplookup.net/ip/174.198.15.222/"&gt;174.198.15.222&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 9 &lt;a href="http://geoiplookup.net/ip/35.197.133.35/"&gt;35.197.133.35&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;
That same list without the leading counts:&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ &lt;b&gt;cat nginx_access.log | cut -d' ' -f1,7 | grep -v "\.xml\|\.js\|php\|cgi\|\.png\|\.txt\|/$\|400$" | cut -d' ' -f1 | sort | uniq -c | sort -nr | head -n 20 | tr -s " " | cut -d' ' -f3&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
which is handy for&amp;nbsp;&lt;a href="https://www.maxmind.com/en/geoip-demo"&gt;https://www.maxmind.com/en/geoip-demo&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;
&lt;span style="font-weight: normal;"&gt;
What were the page dwell times for a given IP address?&lt;/span&gt;&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$&lt;/span&gt;&lt;span style="font-family: courier new, courier, monospace;"&gt;&lt;b&gt;&amp;nbsp;ip="18.223.152.78"&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: courier new, courier, monospace;"&gt;$ &lt;b&gt;cat nginx_access.log | grep $ip | cut -d' ' -f4,7 | grep -v "\.png\|\.js"&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[30/Apr/2020:19:19:29 /navigation&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[30/Apr/2020:19:19:35 /list_all_expressions?referrer=navigation&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[30/Apr/2020:19:19:42 /list_all_symbols?referrer=_table_of_expressions&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;
&lt;span style="font-weight: normal;"&gt;What was the user agent strings for a given IP address?&lt;/span&gt;&lt;/h2&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;$ &lt;b&gt;cat nginx_access.log | grep $ip | cut -d' ' -f12- | sort | uniq -c&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;60 "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" "-"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 3 "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.92 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" "-"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 8 "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" "-"&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-05-01T10:32:17.340Z</blogger:created>
    <published>2020-05-01T11:02:00Z</published>
    <updated>2020-05-01T11:02:03.408Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/05/grepping-nginx-logs-to-observe-user.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8814090451350486723</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>converting the Physics Derivation Graph backend from JSON to a property graph</title>
    <content type='html'>I shared the JSON database with a few researchers and realized I am embarrassed by the pointer chasing needed to construct the graph. The complexity of numerical IDs used for every feature in the PDG is confusing.&lt;br /&gt;
&lt;br /&gt;
I had come up with a &lt;a href="https://derivationmap.net/developer_documentation?referrer=_footer.html#historical%20evolution"&gt;property graph schema&lt;/a&gt;&amp;nbsp;which greatly simplifies the concepts and reduces the pointer chasing present in the JSON. Implementing the backend of the PDG as a property graph instead of JSON is a reasonable and beneficial task, but I'm not comfortable with any of the available property graph databases. There are many options available:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;survey&lt;/i&gt;:&amp;nbsp;&lt;a href="https://wiki.python.org/moin/PythonGraphApi"&gt;https://wiki.python.org/moin/PythonGraphApi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neo4j community edition&lt;/li&gt;
&lt;li&gt;OrientDB community edition&lt;/li&gt;
&lt;li&gt;TinkerPop&lt;/li&gt;
&lt;li&gt;CayleyGraph&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
My criteria are open source, widely adopted, stable.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
I want the graph content to be plain text. For Neo4j, this means exporting graph content to a Cypher representation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neo4j.com/docs/labs/apoc/current/export/cypher/"&gt;https://neo4j.com/docs/labs/apoc/current/export/cypher/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neo4j.com/developer/kb/export-sub-graph-to-cypher-and-import/"&gt;https://neo4j.com/developer/kb/export-sub-graph-to-cypher-and-import/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
I want to be able to enforce constraints on the property graph to prevent undesired edges or properties. In Neo4j this is possible but not supported in the community edition.&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neo4j.com/docs/cypher-manual/current/administration/constraints/"&gt;https://neo4j.com/docs/cypher-manual/current/administration/constraints/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neo4j.com/docs/labs/nsmntx/current/validation/"&gt;https://neo4j.com/docs/labs/nsmntx/current/validation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
Staring at the current PDG JSON file, the structure is reasonably intuitive and relatively close to the&amp;nbsp;&lt;a href="https://derivationmap.net/developer_documentation?referrer=_footer.html#historical%20evolution"&gt;property graph schema&lt;/a&gt;&amp;nbsp;I had come up with. The JSON structure is not a "nodes and edges" design. The JSON is hierarchical (nested dictionaries) to both be more concise and to reduce the computational pointer chasing.&amp;nbsp;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-07-31T13:04:24.885Z</blogger:created>
    <published>2020-07-31T13:14:00.001Z</published>
    <updated>2020-07-31T13:16:09.969Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/07/converting-physics-derivation-graph.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8846492720106992078</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>autocomplete and variations</title>
    <content type='html'>&lt;br /&gt;
Suppose I'm given a list of words, &lt;i&gt;{dog, cat, tv, boing}&lt;/i&gt;. When the user enters a new word, I want to let them know that there are exact or similar matches which already exist.&lt;br /&gt;
&lt;br /&gt;
This will happen in a sequence of steps. From simplest to more complex,&lt;br /&gt;
&lt;br /&gt;
phase 1: exact match the beginning of the word.&lt;br /&gt;
If I type "d", I am provided "dog"&lt;br /&gt;
If I type "o", I have no prompts&lt;br /&gt;
If I type "k", I have no prompts&lt;br /&gt;
&lt;br /&gt;
phase 2: exact match anywhere in the word&lt;br /&gt;
If I type "d", I am provided "dog"&lt;br /&gt;
If I type "o", I am provided "dog" and "boing"&lt;br /&gt;
If I type "k", I have no prompts&lt;br /&gt;
&lt;br /&gt;
phase 3: similar match anywhere in the word. Return exact matches and top X% of similar, ranked by similarity&lt;br /&gt;
If I type "d", I am provided "dog"&lt;br /&gt;
&lt;div&gt;
If I type "o", I am provided "dog" and "boing"&lt;/div&gt;
&lt;div&gt;
If I type "og", I am provided "dog" (exact) and "boing" (similar)&lt;/div&gt;
&lt;div&gt;
If I type "k", I have no prompts&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/7821661/how-to-code-autocompletion-in-python"&gt;http://stackoverflow.com/questions/7821661/how-to-code-autocompletion-in-python&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://pymotw.com/2/readline/"&gt;https://pymotw.com/2/readline/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
I'm not looking for tab completion. Instead, as I type I want the top &lt;i&gt;n&lt;/i&gt; matches to automatically refresh&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-27T13:28:00.492Z</blogger:created>
    <published>2015-09-27T13:44:00.001Z</published>
    <updated>2015-09-28T13:17:47.504Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/autocomplete-and-variations.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8863593005710004049</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>from Latex to Abstract Syntax Tree</title>
    <content type='html'>In the latest revision to the Physics Derivation Graph, the tuple (unique expression identifier, latex expression) has been replaced with (unique expression identifier, latex expression, abstract syntax tree). This is similar to the split between "presentation MathML" and "content MathML." This distinction requires a translation between a (visually pleasing and easy to input representation) and (a mathematically meaningful representation).&lt;br /&gt;
&lt;br /&gt;
Latex will be input by the user for the PDG; the user will not need to supply the AST as input. To validate a step, the AST is needed. This presents a few challenges:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Is the input valid tex?&lt;/li&gt;
&lt;li&gt;Is the valid tex a mathematical expression?&lt;/li&gt;
&lt;li&gt;Is the valid mathematical expression consistent with the step?&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
A step in a derivation is defined as the application of a single inference rule with one or more expressions as input, feed, or output.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
There are a few options for parsing mathematical tex:&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;write a custom parser&amp;nbsp;&lt;/li&gt;
&lt;li&gt;use an existing parser, e.g. MathJax&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-04T01:46:30.659Z</blogger:created>
    <published>2020-02-04T01:59:00Z</published>
    <updated>2020-02-04T01:59:12.308Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='abstract syntax tree'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='mathjax'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='latex'/>
    <blogger:filename>/2020/02/from-latex-to-abstract-syntax-tree.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8876585763345934398</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Integration path for contributions</title>
    <content type='html'>So far I've been hesitant on collaborations involving software in the Physics Derivation Graph. I didn't have a good path for integration of contributions, especially of complex features. I think I can provide both more details explanation of what would be helpful, as well as a clear integration path.&lt;br /&gt;
&lt;br /&gt;
For example, in &lt;a href="https://physicsderivationgraph.blogspot.com/2020/02/example-latex-expressions-to-parse.html"&gt;this post&lt;/a&gt; I provided a set of valid and invalid and ambiguous Latex examples. I did not provide details on how I would integrate a suggested solution written by a contributor.&lt;br /&gt;
&lt;br /&gt;
Here are three specific aspects I would need for integration of contributed code:&lt;br /&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;I will write doctests in Python. That way I can express the function as it would be integrated in the PDG project code&lt;/li&gt;
&lt;li&gt;The contributed Python script should run inside a Docker image. That way the dependencies are made explicit&lt;/li&gt;
&lt;li&gt;The "docker build" can assume to have Internet access, but the "docker run" process should assume no Internet connection&lt;/li&gt;
&lt;/ol&gt;
&lt;br /&gt;
As an example from the above blog post, I can express the interface as a Python3 function&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;def is_expression_valid_latex(expr_latex: str) -&amp;gt; bool:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; """&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;gt;&amp;gt;&amp;gt; is_expression_valid_latex("a = b")&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; True&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;gt;&amp;gt;&amp;gt; is_expression_valid_latex("a = b +")&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; True&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;gt;&amp;gt;&amp;gt; is_expression_valid_latex("\si a")&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; False&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; """&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
By using sys.stdin, we could expose that function to the container such that the following would be an acceptance test:&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;docker run -it --rm demo:latest python3 /opt/&lt;span class="sewm38iz38lxkr7"&gt;&lt;/span&gt;&lt;span class="sewm38iz38lxkr7"&gt;&lt;/span&gt;my_script.py "a = b"&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;True&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-02-23T20:41:38.540Z</blogger:created>
    <published>2020-02-23T21:00:00.002Z</published>
    <updated>2020-02-23T21:00:11.977Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/02/integration-path-for-contributions.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-8906078142290188664</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>switching between different Computer Algebra Systems</title>
    <content type='html'>Although the PDG can be done in a CAS (ie Mathematica), it won't translate to other CASes without having associated Godel indices.&lt;br /&gt;
&lt;br /&gt;
Symbols can be composed of other symbols. Example: $E$ and $\vec{E}$, $\partial$ and $\frac{\partial}{\partial t}$&lt;br /&gt;
&lt;br /&gt;
Symbols can be operators, ie $\frac{\partial}{\partial t}$&lt;br /&gt;
&lt;br /&gt;
Operators, ie $+$, can act on symbols&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2015-09-14T01:47:30.168Z</blogger:created>
    <published>2015-09-14T01:51:00.001Z</published>
    <updated>2015-09-14T01:51:03.093Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2015/09/switching-between-different-computer.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-9004090785301224825</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>mathjax for github.io site</title>
    <content type='html'>For the project website hosted at&amp;nbsp;&lt;a href="http://allofphysicsgraph.github.io/proofofconcept/"&gt;http://allofphysicsgraph.github.io/proofofconcept/&lt;/a&gt; I've been using static PNGs generated off-line to render the expressions in the graph using d3js.&lt;br /&gt;
&lt;br /&gt;
In order to dynamically enter content on a webpage without resorting to off-line rendering, I used MathJax to display content.&lt;br /&gt;
&lt;br /&gt;
The javascript for MathJax is at&lt;br /&gt;
&lt;a href="https://github.com/mathjax/MathJax/blob/master/MathJax.js"&gt;https://github.com/mathjax/MathJax/blob/master/MathJax.js&lt;/a&gt;&lt;br /&gt;
with instructions for use here&lt;br /&gt;
&lt;a href="https://docs.mathjax.org/en/latest/configuration.html"&gt;https://docs.mathjax.org/en/latest/configuration.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
I was able to get a page that accepts input and renders Latex input:&lt;br /&gt;
&lt;a href="http://allofphysicsgraph.github.io/proofofconcept/site/mjtest"&gt;http://allofphysicsgraph.github.io/proofofconcept/site/mjtest&lt;/a&gt;&lt;br /&gt;
Source code for the page is here:&lt;br /&gt;
&lt;a href="https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/site/mjtest.html"&gt;https://github.com/allofphysicsgraph/proofofconcept/blob/gh-pages/site/mjtest.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Next I ran scaling tests for latency as a function of the number of rendered expressions in Chrome.&lt;br /&gt;
&lt;br /&gt;
25 expressions:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;http://allofphysicsgraph.github.io/proofofconcept/site/mjtest_scaling_25&lt;/li&gt;
&lt;li&gt;DOMContentLoaded: 203 ms; Load: 516 ms; Finish: 835 ms&lt;/li&gt;
&lt;/ul&gt;
50 expressions:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;http://allofphysicsgraph.github.io/proofofconcept/site/mjtest_scaling_50&lt;/li&gt;
&lt;li&gt;DOMContentLoaded: 202 ms; Load: 548 ms; Finish: 977 ms&lt;/li&gt;
&lt;/ul&gt;
100 expressions:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;http://allofphysicsgraph.github.io/proofofconcept/site/mjtest_scaling_100&lt;/li&gt;
&lt;li&gt;DOMContentLoaded: 220 ms; Load: 538 ms; Finish: 1140 ms&lt;/li&gt;
&lt;/ul&gt;
</content>
    <blogger:metaDescription/>
    <blogger:created>2018-07-30T23:50:16.447Z</blogger:created>
    <published>2018-07-31T13:04:00.002Z</published>
    <updated>2018-07-31T13:14:19.381Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2018/07/mathjax-for-githubio-site.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-9012655205905821993</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>data in JSON does not scale to multiple users</title>
    <content type='html'>In version 7 of the Physics Derivation Graph I realized that I could use Python's Pickle format to serialize the data stored in memory without having to decide what storage format (CSV, XML, SQLite) is best.&amp;nbsp; That insight lead to use of JSON because everything needed fits in dictionaries and lists.&lt;br /&gt;
&lt;br /&gt;
The use of Pickle and then then JSON enabled development of many features, so it was a worthwhile investment. However, some operations are not well suited to the nested dictionaries and lists. A set of tables might be better for some operations. Converting from the current dictionaries and lists to tables would be a big rewrite, so I haven't started that yet.&lt;br /&gt;
&lt;br /&gt;
If I move away from JSON for storage, the current candidates are Redis and PostgreSQL and SQLite3.&lt;br /&gt;
&lt;br /&gt;
Use of a relational database would require a significant rewrite since most of the functions in the PDG rely on the nested dictionaries.&lt;br /&gt;
&lt;br /&gt;
As a potentially easier transition, Redis has a plugin that supports JSON:&lt;br /&gt;
&lt;a href="https://redislabs.com/blog/redis-as-a-json-store/"&gt;https://redislabs.com/blog/redis-as-a-json-store/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://redislabs.com/redis-best-practices/data-storage-patterns/json-storage/"&gt;https://redislabs.com/redis-best-practices/data-storage-patterns/json-storage/&lt;/a&gt;&lt;br /&gt;
However, I'm not comfortable with the PDG being dependent on a plugin.&lt;br /&gt;
&lt;br /&gt;
If I go with a relational database, I'll need to choose which one.&lt;br /&gt;
MySQL or PostgreSQL versus SQLite&lt;br /&gt;
&lt;a href="https://stackoverflow.com/questions/5102027/can-sqlite-support-multiple-users"&gt;https://stackoverflow.com/a/5102105/1164295&lt;/a&gt;&lt;br /&gt;
"SQLite can support multiple users at once. It does however lock the whole database when writing, so if you have lots of concurrent writes it is not the database you want (usually the time the database is locked is a few milliseconds - so for most uses this does not matter)."&lt;br /&gt;
&lt;a href="https://www.sqlite.org/whentouse.html"&gt;https://www.sqlite.org/whentouse.html&lt;/a&gt;&lt;br /&gt;
"Any site that gets fewer than 100K hits/day should work fine with SQLite."&lt;br /&gt;
To improve concurrency, reads can happen without blocking writes:&amp;nbsp;&lt;a href="https://www.sqlite.org/wal.html"&gt;https://www.sqlite.org/wal.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-06T19:40:46.685Z</blogger:created>
    <published>2020-04-06T20:40:00Z</published>
    <updated>2020-04-07T12:44:32.315Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/data-in-json-does-not-scale-to-multiple.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-9032681545694709320</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>text to Latex to SymPy using frequency and period example</title>
    <content type='html'>&lt;p&gt;As an illustration of the gradations from text to Latex to CAS is provided below. In the derivation the CAS is 1-to-1 with the Latex.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;statement&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Frequency and period are inversely related.&lt;/p&gt;
&lt;hr /&gt;&lt;i&gt;statement with mathematical notation&lt;/i&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;div&gt;Frequency and period are inversely related; thus &lt;span style="font-family: courier;"&gt;T = 1/f&lt;/span&gt; and &lt;span style="font-family: courier;"&gt;f = 1/T&lt;/span&gt;.&amp;nbsp;&lt;br /&gt;&lt;hr /&gt;&lt;i&gt;statement with mathematical notation and explanation of derivation&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Frequency and period are inversely related; thus&amp;nbsp;&lt;span style="font-family: courier;"&gt;T = 1/f&lt;/span&gt;.&amp;nbsp;&lt;br /&gt;Multiple both sides by &lt;span style="font-family: courier;"&gt;f&lt;/span&gt;, then divide by &lt;span style="font-family: courier;"&gt;T&lt;/span&gt; to get &lt;span style="font-family: courier;"&gt;f = 1/T&lt;/span&gt;.
&lt;hr /&gt;&lt;i&gt;statement with explanation of derivation, separating expressions from text&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;Frequency and period are inversely related; thus&amp;nbsp;&lt;div&gt;&lt;span style="font-family: courier;"&gt;T = 1/f&lt;/span&gt;. &lt;br /&gt;Multiple both sides by &lt;span style="font-family: courier;"&gt;f&lt;/span&gt; to get&lt;br /&gt;&lt;span style="font-family: courier;"&gt;f T=1&lt;/span&gt;&lt;br /&gt; then divide by &lt;span style="font-family: courier;"&gt;T&lt;/span&gt; to get &lt;br /&gt;&lt;span style="font-family: courier;"&gt;f = 1/T&lt;/span&gt;.&lt;/div&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;statement with expressions separated from text and with bindings between math and text made&amp;nbsp;&lt;/i&gt;&lt;i&gt;explicit&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Frequency and period are inversely related; thus&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #2b00fe;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;i&gt;expression 1&lt;/i&gt;: &lt;/span&gt;&lt;span style="font-family: courier;"&gt;T = 1/f&lt;/span&gt;.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;Multiple both sides of&amp;nbsp;&lt;u&gt;expression 1&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;f&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&lt;br /&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 2&lt;/i&gt;: &lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;f T=1&lt;/span&gt;&lt;br /&gt;then divide both sides of&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;T&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 3&lt;/u&gt;&lt;br /&gt;&lt;span style="color: #2b00fe;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;i&gt;expression 3&lt;/i&gt;: &lt;/span&gt;&lt;span style="font-family: courier;"&gt;f = 1/T&lt;/span&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;statement with inference rules made&amp;nbsp;&lt;/i&gt;&lt;i&gt;explicit&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;claim&lt;/i&gt;: Frequency and period are inversely related; thus&lt;/div&gt;&lt;div&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule: &lt;/i&gt;declare initial expression&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 1&lt;/i&gt;: &lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;T = 1/f&lt;/span&gt;.&amp;nbsp;&lt;br /&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule:&amp;nbsp;&lt;/i&gt;Multiple both sides of&amp;nbsp;&lt;u&gt;expression 1&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;f&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 2&lt;/i&gt;: &lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;f T=1&lt;/span&gt;&lt;br /&gt;then&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule:&amp;nbsp;&lt;/i&gt;divide both sides of&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;T&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 3&lt;/u&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #2b00fe;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;i&gt;expression 3&lt;/i&gt;: &lt;/span&gt;&lt;span style="font-family: courier;"&gt;f = 1/T&lt;/span&gt;&lt;/span&gt;.&lt;br /&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule: &lt;/i&gt;declare final expression&lt;br /&gt;&lt;/span&gt;
  &lt;br /&gt;
  &lt;hr /&gt;
&lt;p&gt;&lt;i&gt;use of a Computer algebra system to implement inference rules&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The following expansion requires&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;conversion of Latex to SymPy&lt;/span&gt;&lt;/li&gt;&lt;li&gt;correctly implemented inference rules&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;import sympy&lt;/b&gt;&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;from sympy import *&lt;/b&gt;&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;from sympy.parsing.latex import parse_latex
&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;i&gt;claim&lt;/i&gt;: Frequency and period are inversely related; thus&lt;/div&gt;&lt;div&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule: &lt;/i&gt;declare initial expression&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 1&lt;/i&gt;: &lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;T = 1/f&lt;/span&gt;.&amp;nbsp;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To confirm consistency of representations, the input Latex expression can be converted to SymPy and then back to Latex using&lt;/div&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;latex(eval(sympy.srepr(parse_latex('T = 1/f'))))&lt;/b&gt;&lt;br /&gt;
'T = \\frac{1}{f}'
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;We'll work with the SymPy representation of expression 1,&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;sympy.srepr(parse_latex('T = 1/f'))&lt;/b&gt;&lt;br /&gt;
"Equality(Symbol('T'), Pow(Symbol('f'), Integer(-1)))"
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Rather than using the SymPy, use the raw format of expression 1&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;expr1 = parse_latex('T = 1/f')
&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule:&amp;nbsp;&lt;/i&gt;Multiple both sides of&amp;nbsp;&lt;u&gt;expression 1&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;f&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 2&lt;/i&gt;: &lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;f T=1&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: inherit;"&gt;Although we can multiply a variable and an expression,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;expr1*Symbol('f')&lt;/b&gt;&lt;br /&gt;
f*(Eq(T, 1/f))
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;what actually needs to happen is first split the expression, then apply the multiplication to both sides&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;Equality(expr1.lhs*Symbol('f'), expr1.rhs*Symbol('f'))&lt;/b&gt;&lt;br /&gt;
Eq(T*f, 1)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Application of an inference rule (above) results in the desired result, so save that result as the second expression (below).&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;expr2 = Equality(expr1.lhs*Symbol('f'), expr1.rhs*Symbol('f'))
&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule:&amp;nbsp;&lt;/i&gt;divide both sides of&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;T&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 3&lt;/u&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 3&lt;/i&gt;: &lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;f = 1/T&lt;/span&gt;.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;Equality(expr2.lhs/Symbol('T'), expr2.rhs/Symbol('T'))&lt;/b&gt;&lt;br /&gt;
Eq(f, 1/T)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: inherit;"&gt;Again, save that to a variable&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;expr3 = Equality(expr2.lhs/Symbol('T'), expr2.rhs/Symbol('T'))&lt;/b&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;b&gt;latex(expr3)&lt;/b&gt;&lt;br /&gt;
'f = \\frac{1}{T}'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule: &lt;/i&gt;declare final expression&lt;/span&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;i&gt;statement with inference rules&lt;/i&gt;&lt;i&gt;&amp;nbsp;and numeric IDs for symbols&lt;/i&gt;&lt;/p&gt;&lt;p&gt;To relate the above derivation to any other content in the Physics Derivation Graph, replace T and f with numeric IDs unique to "period" and "frequency"&lt;/p&gt;&lt;p&gt;&lt;span style="color: #274e13; font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;b&gt;import sympy&lt;/b&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;b&gt;from sympy import *&lt;/b&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;b&gt;from sympy.parsing.latex import parse_latex&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;i&gt;claim&lt;/i&gt;: Frequency and period are inversely related; thus&lt;/div&gt;&lt;div&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule:&amp;nbsp;&lt;/i&gt;declare initial expression&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 1&lt;/i&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;T = 1/f&lt;/span&gt;.&amp;nbsp;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; expr1 = parse_latex('T = 1/f')&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; eval(srepr(expr1).replace('T','pdg9491').replace('f','pdg4201'))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;Eq(pdg9491, 1/pdg4201)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Save the result as expression 1&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; expr1 = eval(srepr(expr1).replace('T','pdg9491').replace('f','pdg4201'))&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule:&amp;nbsp;&lt;/i&gt;Multiple both sides of&amp;nbsp;&lt;u&gt;expression 1&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;f&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #2b00fe; font-family: inherit;"&gt;&lt;i&gt;expression 2&lt;/i&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;f T=1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; feed = Symbol('f')&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; feed = eval(srepr(feed).replace('f','pdg4201'))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; Equality(expr1.lhs*feed, expr1.rhs*feed)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; Equality(expr1.lhs*feed, expr1.rhs*feed)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;Eq(pdg4201*pdg9491, 1)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; expr2 = Equality(expr1.lhs*feed, expr1.rhs*feed)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: red;"&gt;&lt;i&gt;inference rule:&amp;nbsp;&lt;/i&gt;divide both sides of&amp;nbsp;&lt;u&gt;expression 2&lt;/u&gt;&amp;nbsp;by&amp;nbsp;&lt;span style="font-family: courier;"&gt;T&lt;/span&gt;&amp;nbsp;to get&amp;nbsp;&lt;u&gt;expression 3&lt;/u&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #2b00fe;"&gt;&lt;i&gt;expression 3&lt;/i&gt;:&amp;nbsp;&lt;/span&gt;&lt;span style="color: #2b00fe; font-family: courier;"&gt;f = 1/T&lt;/span&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; feed = Symbol('T')&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; feed = eval(srepr(feed).replace('T','pdg9491'))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; Equality(expr2.lhs/feed, expr2.rhs/feed)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;Eq(pdg4201, 1/pdg9491)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; expr3 = Equality(expr2.lhs/feed, expr2.rhs/feed)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Convert from numeric ID back to Latex symbols in Latex expression&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;&amp;gt;&amp;gt;&amp;gt; latex(eval(srepr(expr3).replace('pdg9491','T').replace('pdg4201','f')))&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: courier;"&gt;'f = \\frac{1}{T}'&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i style="color: red;"&gt;inference rule:&amp;nbsp;&lt;/i&gt;&lt;span style="color: red;"&gt;declare final expression&lt;/span&gt;&lt;/div&gt;

&lt;hr /&gt;
  &lt;p&gt;&lt;i&gt;removal of text, pure Python&lt;/i&gt;&lt;/p&gt;&lt;p&gt;
  The above steps can be expressed as a Python script with two functions (one for each inference rule)
    &lt;/p&gt;&lt;p&gt;
  &lt;span style="font-family: courier;"&gt;
from sympy import *&lt;br /&gt;
from sympy.parsing.latex import parse_latex
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="background-color: #fff2cc; font-family: courier;"&gt;# assumptions: the inference rules are correct, the conversion of symbols-to-IDs is correct, the Latex-to-SymPy parsing is correct&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
def mult_both_sides_by(expr, feed):&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Equality(expr.lhs*feed, expr.rhs*feed)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
def divide_both_sides_by(expr, feed):&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return Equality(expr.lhs/feed, expr.rhs/feed)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&lt;span style="color: red;"&gt;
# &lt;i&gt;inference rule&lt;/i&gt;: declare initial expression&lt;br /&gt;&lt;/span&gt;
expr1 = parse_latex('T = 1/f')&lt;br /&gt;
expr1 = eval(srepr(expr1).replace('T','pdg9491').replace('f','pdg4201'))
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
feed = Symbol('f')&lt;br /&gt;
feed = eval(srepr(feed).replace('f','pdg4201'))&lt;br /&gt;
expr2 = mult_both_sides_by(expr1, feed)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
feed = Symbol('T')&lt;br /&gt;
feed = eval(srepr(feed).replace('T','pdg9491'))&lt;br /&gt;
expr3 = divide_both_sides_by(expr2, feed)
&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;
latex(eval(&lt;br /&gt;srepr(expr3).replace('pdg9491','T').replace('pdg4201','f')))&lt;br /&gt;&lt;span style="color: red;"&gt;
# &lt;i&gt;inference rule&lt;/i&gt;: declare final expression
  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;
  &lt;p&gt;&lt;i&gt;How would the rigor of the above be increased?
    
&lt;/i&gt;&lt;/p&gt;&lt;p&gt;    To get beyond what a CAS can verify, a "proof" would relate each of the two functions to a set of axioms. Given the two arguments (an expression, a "feed" value), is the returned value always consistent with some set of axioms? &lt;/p&gt;&lt;p&gt;The set of axioms chosen matters. For example, we could start with&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory#Axioms"&gt;Zermelo–Fraenkel set theory&lt;/a&gt;&lt;/p&gt;&lt;p&gt;That would leave a significant gap between building up addition and subtraction and getting to calculus and differential equations. "Theorems of calculus derive from the axioms of the real, rational, integer, and natural number systems, as well as set theory." (&lt;a href="https://math.stackexchange.com/a/564994/819530"&gt;source&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-09-20T20:35:34.898Z</blogger:created>
    <published>2020-09-20T21:30:00.006Z</published>
    <updated>2020-09-22T20:21:37.251Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='layers'/>
    <blogger:filename>/2020/09/text-to-latex-to-sympy-using-frequency.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-9114938478402004711</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>analyze each commit in a repo</title>
    <content type='html'>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;git --no-pager log --pretty=format:"%H %ad" &amp;gt; hash_and_date.log&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;cat hash_and_date.log | wc -l&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;538&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$&amp;nbsp;&lt;b&gt;mkdir -p /tmp/my_bundle&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div style="font-family: Times;"&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$&amp;nbsp;&lt;b&gt;cp hash_and_date.log /tmp/my_bundle/&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
&lt;/span&gt;
&lt;br /&gt;
&lt;div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;git branch -a&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;* gh-pages&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; master&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; remotes/origin/HEAD -&amp;gt; origin/master&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; remotes/origin/gh-pages&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; remotes/origin/haskell&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; remotes/origin/master&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; remotes/origin/mike&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; remotes/origin/test_branch&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;git bundle create pdg.bundle gh-pages&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Enumerating objects: 6317, done.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Counting objects: 100% (6317/6317), done.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Delta compression using up to 4 threads&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Compressing objects: 100% (5936/5936), done.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Writing objects: 100% (6317/6317), 92.21 MiB | 11.46 MiB/s, done.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Total 6317 (delta 3369), reused 150 (delta 68)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;ls -hal pdg.bundle&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; 92M Apr 13 11:44 pdg.bundle&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;cp pdg.bundle /tmp/my_bundle/&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;cd&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;b&gt;/tmp/my_bundle/&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ &lt;b&gt;git clone --no-checkout pdg.bundle&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Cloning into 'pdg'...&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Receiving objects: 100% (6317/6317), 92.21 MiB | 51.80 MiB/s, done.&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Resolving deltas: 100% (3369/3369), done.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;see &lt;a href="https://gist.github.com/bhpayne/fb63fa0816be63733488162baebf9b14"&gt;https://gist.github.com/bhpayne/fb63fa0816be63733488162baebf9b14&lt;/a&gt;&lt;/span&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;for lcount function&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ while read -r line; do this_hash=`echo $line | cut -d' ' -f1`; this_date=`echo $line | cut -d' ' -f3-`; rm -rf *; git checkout $this_hash; lcount $this_hash "$this_date" &amp;gt;&amp;gt; ../record.log; done &amp;lt; ../hash_and_date.log&lt;/span&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-13T15:45:41.276Z</blogger:created>
    <published>2020-04-13T17:15:00Z</published>
    <updated>2020-04-13T19:13:11.569Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/analyze-each-commit-in-repo.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-9164267235809670660</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>migrating to tables in version 8</title>
    <content type='html'>Currently the Physics Derivation Graph is "version 7: pkl and web interface". While v7 started as a Python Pickle data file, it then moved to JSON, and is now a JSON file stored as a string in Redis.&lt;br /&gt;
&lt;br /&gt;
While I could rewrite the "JSON as string in Redis" into a proper Redis-based interface, my plan is to rewrite the code to support an SQLite3&amp;nbsp;backend. This would mean rewriting all the functions to use tables rather than nested dictionaries and lists.&lt;br /&gt;
&lt;br /&gt;
While the in-memory data of Redis sounds attractive for low-latency, the downside is that the Redis server needs to be running in order to query the content. An SQLite3 database is available offline.&lt;br /&gt;
&lt;br /&gt;
Three issues have held me back from implementing the database as tables. Two of the issues are about translating the nested dictionaries and lists to tables. I want the translation to be to a schema design that is compact (not too many tables) and tidy (no element should contain lists).&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Issue&lt;/i&gt;: a symbol can be a constant or a variable, for constants there may be multiple values. Should this be one table with multiple rows per value for constants, or a table of symbols + a table for values?&lt;br /&gt;
The multiple tables is a better schema but not as intuitive for users.&lt;br /&gt;
&lt;i&gt;Resolution&lt;/i&gt;: The HTML table displayed in the web interface doesn't have to be the same as the backend schema. I will use a single table for the web frontend and multiple tables in SQLite3.&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Issue&lt;/i&gt;: the derivation table columns could be&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;['step id', 'inference rule', 'input expr1', 'input expr 2', 'input expr 3', 'feed 1', 'feed 2', 'feed 3', 'output expr 1', 'output expr 2', 'output expr 3']&lt;/span&gt;&lt;br /&gt;
which is one row per step and not tidy&lt;br /&gt;
or&lt;br /&gt;
&lt;span style="font-family: Courier New, Courier, monospace;"&gt;['step id', 'in connection type', 'in id', 'out connection type', 'out id']&lt;/span&gt;&lt;br /&gt;
which has multiple rows per step and is tidy.&lt;br /&gt;
&lt;i&gt;Resolution&lt;/i&gt;: use the tidy table schema and write a converter to the dictionary with lists?&lt;br /&gt;
&lt;br /&gt;&lt;i&gt;Issue&lt;/i&gt;: I'm not comfortable with SQL&lt;br /&gt;
&lt;i&gt;Resolution&lt;/i&gt;: learn SQL.</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-09T11:19:20.292Z</blogger:created>
    <published>2020-04-09T11:51:00.001Z</published>
    <updated>2020-04-09T11:51:17.101Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='tables'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sqlite3'/>
    <category scheme='tag:blogger.com,1999:blog-7761348728894775915' term='sql'/>
    <blogger:filename>/2020/04/migrating-to-tables-in-version-8.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-7761348728894775915.post-9220753934172257039</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>that one guy</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>disable DigitalOcean default gunicorn and nginx; start docker-compose</title>
    <content type='html'>&lt;span style="font-family: inherit;"&gt;See this post&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: inherit;"&gt;&lt;a href="https://www.digitalocean.com/community/questions/how-to-stop-gunicorn-nginx-from-serving-up-the-default-project-on-ubuntu-django-droplet"&gt;https://www.digitalocean.com/community/questions/how-to-stop-gunicorn-nginx-from-serving-up-the-default-project-on-ubuntu-django-droplet&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ service gunicorn stop&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ service nginx stop&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ sudo systemctl disable nginx.service&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ sudo systemctl disable gunicorn.service&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
Then I added "restart: always" to the docker-compose.yaml file&lt;br /&gt;
https://docs.docker.com/compose/compose-file/&lt;br /&gt;
based on this post:&lt;br /&gt;
https://stackoverflow.com/a/52955638/1164295</content>
    <blogger:metaDescription/>
    <blogger:created>2020-04-25T21:36:53.495Z</blogger:created>
    <published>2020-04-25T21:46:00.002Z</published>
    <updated>2020-04-25T21:49:01.957Z</updated>
    <blogger:location/>
    <category/>
    <blogger:filename>/2020/04/disable-digitalocean-default-gunicorn.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  </entry>
</feed>